local View = require("system.view")
local talent_ui_view = class("talent_ui_view", View)


function talent_ui_view:doInit(param)
    ----是否需要移动
    self.m_need_move = false
    ----移动速度
    self.m_move_speed = 0
    ----移动时间
    self.m_move_time = 0.2
    ---滑动条的值
    self.m_scroll_bar_target_value = 0

    self:load("ui/Talent.prefab", function(go)
        local frame = self:getFrame()
        ---- TODO 屏幕适配不好使啊啊啊啊啊 啊啊啊   ui_manager_view 74 行报错啊【所以我就把屏幕适配删了...】
        go.transform.localPosition = Vector3.zero
        go.transform.localScale = Vector3.one
        local talent_card_root = go.transform:Find("bg/drag_panel/talent_container")
        self.m_drag_area_container = go.transform:Find("bg/drag_panel").gameObject:GetComponent("DragSkill")
        self.m_scroll_bar = go.transform:Find("bg/drag_panel/scrollbar"):GetComponent(UI.Scrollbar)
        self.m_drag_area_container.onEndDrag = DragSkill_OnEndDragHandler()
        self.m_drag_area_container.onEndDrag:AddListener(function()
            self:end_drag_callback()
        end)
        self:subscribe(self:getFrame():on_event("child_created"), function(child_frame)
            local name = child_frame:getFrameName()
            if string.find(name, "talent_frame") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = talent_card_root.transform
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end
        end)
        frame:on_loaded()
    end)
end

function talent_ui_view:end_drag_callback()
    if self.m_scroll_bar.value <= 0.25 then
        self.m_scroll_bar_target_value = 0
    elseif self.m_scroll_bar.value <= 0.75 then
        self.m_scroll_bar_target_value = 0.5
    else
        self.m_scroll_bar_target_value = 1
    end
    self.m_need_move = true
end

function talent_ui_view:doUpdate()
    if self.m_need_move then
        if (math.abs(self.m_scroll_bar.value - self.m_scroll_bar_target_value) < 0.01) then
            self.m_scroll_bar.value = self.m_scroll_bar_target_value
            self.m_need_move = false
            return
        end
        ----在unity中有一个返回值，但是函数的参数有应用类型的参数，所以将引用类型的那个参数作为返回值返回，故有两个参数
        local smoothed_val, move_speed = Mathf.SmoothDamp(self.m_scroll_bar.value, self.m_scroll_bar_target_value, self.m_move_speed, self.m_move_time)
        self.m_scroll_bar.value = smoothed_val
        self.m_move_speed = move_speed
    end


    ----[[临时 用一下GM 指令
    if Input.GetKeyDown(KeyCode.UpArrow) then
        local kbe_mgr = self:getFrame("kbe.kbe_mgr")
        local sdk = app:getKBESDK()
        local role_id = sdk:get_player_id()
        local role = kbe_mgr:get_entity(role_id)
        local level = role:get_attr("level")
        self:getFrame("skill_ui_manager"):base_call("gm_command", "level " .. level + 1)
    end
    ----]]
end

return talent_ui_view