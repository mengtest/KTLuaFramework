local M = class("SkillData")


-------------------------
-- Attribute & Event
-------------------------
Attribute.decl(M, "id", -1)        -- 技能id


-- cooldown
Attribute.decl(M, "cooldown", 0)            -- cd时长
Attribute.decl(M, "is_cooldown", false)        -- 是否正在cd中
Attribute.decl(M, "cd_end_time", 0)            -- cd结束时间


-- 公共cd
Attribute.decl(M, "global_cooldown_time", 0)    -- 公共cd时长
Attribute.decl(M, "is_g_cd", false)                -- 是否正在公共cd中
Attribute.decl(M, "g_cd_end_time", 0)            -- 公共cd结束时间


-- 充能
Attribute.decl(M, "max_charges", 1)     -- 最大充能数
function M:wrap_set_max_charges(val)
    -- wrap setter
    if val < 1 then
        val = 1
    end
    self:set_max_charges(val)
end

Attribute.decl(M, "charged_count", 0)        -- 已充数量
function M:wrap_set_charged_count(val)
    -- wrap setter
    if val < 0 then
        val = 0
    elseif val > self:get_max_charges() then
        val = self:get_max_charges()
    end
    self:set_charged_count(val)
end

Attribute.decl(M, "charge_cd_end_time", 0) -- 充能cd结束时间


-- 正在充能
Attribute.decl(M, "is_charging", function()
    return false
end)

--Attribute.decl(M, "charge_arrow_end_time", 0) -- 充能箭头cd结束时间


--技能模版
-- 基本数据
Attribute.calc(M, "cfg",
function(self)
    return dbc.spell[self:get_id()]
end,
"id")

-- 技能效果数据
Attribute.calc(M, "effect_cfg",
function(self)
    return self.m_skill_mgr:get_effect_cfg_list(self:get_id())
end,
"id")

-- 客户端显示
Attribute.calc(M, "client_cfg",
function(self)
    return dbc.spell_client[self:get_id()]
end,
"id")


function M:initialize()
    Attribute.init(self)

    self.m_skill_mgr = app:getSkillMgr()
    self.m_is_type_charge = false
end



function M:start_cd()
    local cd_time = self:get_cooldown()

    -- 正常情况下这里不会遇到【正在公共cd】的情况

    -- cd为0， 先忽略
    if cd_time == 0 then
        return
    end

    -- 开始cd
    self:set_cd_end_time(app:get_server_time() + cd_time)   -- 重置cd
    self:set_attr_and_event("is_cooldown", true)

    -- 充能技能的自cd
    if self:is_type_charge() then
        self:set_cd_end_time(self:get_charge_cd_end_time())
    end


end

function M:start_charge_cd()

    local charge_time = self:get_cooldown()
    self:set_charge_cd_end_time(app:get_server_time() + charge_time)
    --self:set_charge_arrow_end_time(app:get_server_time() + charge_time)
end


function M:start_g_cd()
    -- print("=============start_g_cd")
    local g_cd_time = self:get_global_cooldown_time()

    -- 公共cd为0，先忽略
    if g_cd_time == 0 then
        return
    end


    -- 应该不会发生两个公共cd相遇
    if self:get_is_g_cd() then
        -- 重置公共cd
        self:set_g_cd_end_time(app:get_server_time() + g_cd_time)
        return
    end


    self:set_g_cd_end_time(app:get_server_time() + g_cd_time)
    self:set_is_g_cd(true)
end


function M:update()
    local server_time = app:get_server_time()
    local charge_time = self:get_cooldown()

    -- 充能处理
    if self:get_is_charging() then
        -- 判断充能是否到期(即冲完了一格)
        if server_time >= self:get_charge_cd_end_time() then
            -- 是
            -- 充能 +1
            -- 本地 充能递增
            local charged_count = self:get_charged_count()
            self:wrap_set_charged_count(charged_count + 1)
            -- 检查是否充满所有格？
            charged_count = self:get_charged_count()
            if charged_count == self:get_max_charges() then
                -- 是，停止充能cd
                self:set_is_charging(false)
            else
                -- 否，开始新充能cd
                self:start_charge_cd()
            end
        else
            -- 否
            -- 什么都不做
        end
    end



    -- 判断cd是否到期
    if self:get_is_cooldown() then
        if server_time >= self:get_cd_end_time() then
            -- 结束cd
            --self:set_is_cooldown(false)
            self:set_attr_and_event("is_cooldown", false)
        end
    end

    -- 判断公共cd是否到期
    if self:get_is_g_cd() then
        if server_time >= self:get_g_cd_end_time() then
            self:set_is_g_cd(false)
        end
    end
end

-- 本技能是否【充能类型】
function M:is_type_charge()
    return self:get_max_charges() > 1
end

return M
