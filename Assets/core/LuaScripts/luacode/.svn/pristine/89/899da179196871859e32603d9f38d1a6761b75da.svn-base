local Frame = require("system.frame")
local skill_ui_manager = class("skill_ui_manager", Frame)

Event.decl(skill_ui_manager, "master_info_add")
Event.decl(skill_ui_manager, "master_enabled") -- 2017.11.25 rjy 天赋已启用  客户端需要自己进行三选一行为的维护  服务器自己进行了这个操作  但是这个阶段没有把这个协议发过来
Event.decl(skill_ui_manager, "skill_curr_level_up")
Event.decl(skill_ui_manager, "skill_max_level_up")
Event.decl(skill_ui_manager, "change_slot")
Event.decl(skill_ui_manager, "unlock_talent")  -- 2017.11.25 rjy 天赋已解锁
Event.decl(skill_ui_manager, "change_skill")  -- 2017.12.07 rjy 为了player_controller所发的事件
Event.decl(skill_ui_manager, "change_specilization")  -- 切换专精之后发个事件
Event.decl(skill_ui_manager, "master_status") -- 更新外部技能状态


function skill_ui_manager:doInit()
    ---- 2017.12.28 切换专精临时做法
    self.m_change = false

    -- 本职业所有的已学习技能
    self.m_master_info = {}
    ----目前不维护这个表，收到与其相关的消息直接作出处理，之后如果有拓展可以再来维护这个表
    ----2017.11.25 rjy 为了天赋启用这张表   暂时只有 rec_master_all 的时候维护了这张表  我觉得够了   如果不够到时候再来修改吧
    self.m_unlocked_skill_id_list = {}
    self.m_locked_skill_id_list = {}
    self:local_log("skill_ui_manager  初始化")
    self:req_master_list()
end

function skill_ui_manager:init()
    --self:local_log("skill_ui_manager  初始化")
    --self:req_master_list()
end

-- *------------------[S]Sever interface-----------------——*
-- [S2C]
-- 收到所有技能  可用位置标志位  页面编号   已学习技能资讯列表  已解锁技能ID列表  未解锁技能ID列表
function skill_ui_manager:rec_master_all(flags, page, master_info, unlocked_skill_id_list, locked_skill_id_list)
    for i, v in ipairs(master_info) do
        self.m_master_info[i] = v
        self:local_log("已学习的技能  %s  %s  %s  %s  %s  ", v["tmpl"], v["enabled"], v["level"], v["stat"], v["slot"][1])
    end

    -- 起名是专精技能，实际上是非天赋技能 以下的这个都是如此
    local specialization_skill_id_list = {}
    for i, v in ipairs(unlocked_skill_id_list) do
        self.m_unlocked_skill_id_list[i] = v
        if assert(dbc.spell_ui[v],"spell_ui表找不到技能  id:"..v).is_talent <= 0 then
            table.insert(specialization_skill_id_list, v)
        end
        self:local_log("已解锁但是还未学习的技能id  %s", v)
    end
    -- 专精技能用这个方法学习【一下学习多个技能】
    self:req_master_learns(specialization_skill_id_list)
    for i, v in ipairs(locked_skill_id_list) do
        self.m_locked_skill_id_list[i] = v
        self:local_log("未解锁的技能id  %s", v)
    end
    self:local_log("已经学习的表的长度%s", #self.m_master_info)

    -- 切换专精
    self:subscribe(self:get_role():on_event_specialization_set(true), function(specialization)
        ---- 2017.12.28 切换专精临时做法
        self.m_change = true
        self.m_cur_spe_talent_skill_num = 21
        -- master_info 中的 enable 字段表示此(天赋)技能是否被选择
        -- 当前专精下的技能资讯列表
        self.m_cur_specialization_master_info = {}
        -- 当前专精下的已解锁技能id列表
        self.m_cur_specialization_unlocked_skill_id_list = {}
        -- 当前专精下的未解锁技能id列表
        self.m_cur_specialization_locked_skill_id_list = {}
        for i, v in ipairs(self.m_master_info) do
            if specialization == utility.math:get_integer_part((v.tmpl - 900000) / 1000) then
                table.insert(self.m_cur_specialization_master_info, v)

                ---- 2017.12.28 切换专精临时做法
                if dbc.spell_ui[v.tmpl].is_talent > 0 then
                    self.m_cur_spe_talent_skill_num = self.m_cur_spe_talent_skill_num - 1
                end

                self:local_log("当前专精下已学习的技能  %s %s ", v.tmpl, v["slot"][1])
            end
        end
        local specialization_skill_id_list = {}
        for i, v in ipairs(self.m_unlocked_skill_id_list) do
            if specialization == utility.math:get_integer_part((v - 900000) / 1000) then
                self.m_cur_specialization_unlocked_skill_id_list[i] = v
                if dbc.spell_ui[v].is_talent <= 0 then
                    table.insert(specialization_skill_id_list, v)
                end
                self:local_log("当前专精下已解锁但是还未学习的技能  %s  ", v)
            end
        end
        self:req_master_learns(specialization_skill_id_list)
        for i, v in ipairs(self.m_locked_skill_id_list) do
            if specialization == utility.math:get_integer_part((v - 900000) / 1000) then
                self.m_cur_specialization_locked_skill_id_list[i] = v
                self:local_log("当前专精下未解锁的技能  %s  ", v)
            end
        end


        ---- TODO 现在由于新建号切换专精的时候要先去学习本专精的技能  当技能学完刷新本专精的各种列表的时候 消息已经发出去了  所以在学习技能处也发了一下这个消息 但这样是不对的【个人想法需要服务器初始的时候把本职业的所有专精下的技能能学习的都学习了然后发过来】
        ---------1.就是在切换专精的时候发切换专精消息   条件是本专精下的已解锁技能表没有非天赋技能
        ---------2.在学习技能的时候   每次学习到新技能  做的操作是去除已解锁  添加已学习   判断已解锁的非天赋技能还有没有  没有的话就发
        --self:emit_event("change_specilization")
    end)
end

-- 取得已启用天赋技能 同 master_enabling 配合使用
function skill_ui_manager:rec_master_enabled(talent_id)
    self:local_log("取得已启用天赋技能%s", talent_id)
    -- 找到天赋的组号
    local group_num = string.sub(dbc.spell_ui[talent_id].is_talent, -4, -3)


    -- 根据组号找到其余两个技能
    for i, v in pairs(dbc.spell_ui) do
        if v.major == self:get_role():get_specialization() then
            if group_num == string.sub(tostring(v.is_talent), -4, -3) then
                self:local_log("取得已启用天赋组号%s%s", group_num, string.sub(tostring(i), -4, -3))
                if v["id"] ~= talent_id then
                    self:local_log("取得已启用天赋同组的技能id%s", v["skill"])
                    -- 从已学习的技能资讯列表中将已启用的天赋同组的两个取消启用
                    for i, val in ipairs(self.m_master_info) do
                        if val["tmpl"] == v["id"] then
                            val["enabled"] = 0
                        end
                    end
                    for i, val in ipairs(self.m_cur_specialization_master_info) do
                        if val["tmpl"] == v["id"] then
                            val["enabled"] = 0
                        end
                    end
                end
            end
        end
    end
    -- 从已学习的技能资讯列表中将已启用的天赋启用
    for i, v in ipairs(self.m_master_info) do
        if v["tmpl"] == talent_id then
            v["enabled"] = enum.shared.AbilityStatus.EnabledFixed
            break
        end
        self:local_log("从已学习的技能资讯列表中将已启用的天赋启用  %s  %s  %s  %s  %s  ", v["tmpl"], v["enabled"], v["level"], v["stat"], v["slot"])
    end
    for i, v in ipairs(self.m_cur_specialization_master_info) do
        if v["tmpl"] == talent_id then
            v["enabled"] = enum.shared.AbilityStatus.EnabledFixed
            break
        end
    end
    self:emit_event("master_enabled", talent_id)
end

-- 取得新增已学习技能(参数为列表)   这里需要做的是填加到已经学习技能列表中
function skill_ui_manager:rec_master_learnt(master_info)
    self:local_log("运行中新学习的技能列表长度  %s", #master_info)
    for i, v in ipairs(master_info) do
        self.m_master_info[#self.m_master_info + 1] = v
        table.insert(self.m_cur_specialization_master_info, v)
        --self.m_cur_specialization_master_info[#self.m_cur_specialization_master_info + 1] = v
        self:local_log("运行中新学习的技能id  %s", v["tmpl"])
        ---- 把已学习的技能从已解锁的列表中移除
        for key, val in ipairs(self.m_unlocked_skill_id_list) do
            if v.tmpl == val then
                table.remove(self.m_unlocked_skill_id_list, key)
            end
        end
        for key, val in ipairs(self.m_cur_specialization_unlocked_skill_id_list) do
            if v.tmpl == val then
                table.remove(self.m_cur_specialization_unlocked_skill_id_list, key)
            end
        end
        ---- 2017.12.28 切换专精临时做法
        if dbc.spell_ui[v.tmpl].is_talent > 0 then
            self.m_cur_spe_talent_skill_num = self.m_cur_spe_talent_skill_num - 1
        end
    end
    self:local_log("已经学习的表的长度%s", #self.m_master_info)
    --print("已经学习的本专精表的长度", #self.m_cur_specialization_master_info)
    --print("已经解锁的本专精表的长度", #self.m_cur_specialization_unlocked_skill_id_list)

    self:emit_event("master_info_add", master_info)
end

-- 取得新增已解锁技能(参数为id列表)  学习已经解锁技能  并且要将这些技能从未解锁列表中删除
function skill_ui_manager:rec_master_available(available_id_list)
    self:local_log("新增已解锁的技能id列表的长度  %s", #available_id_list)
    local specialization_skill_id_list = {}
    for i, v in ipairs(available_id_list) do
        self:local_log("新增已解锁是不是天赋啊啊啊啊啊啊啊啊啊啊啊 啊啊啊啊啊啊  %s", dbc.spell_ui[v].is_talent)
        if dbc.spell_ui[v].is_talent <= 0 then
            table.insert(specialization_skill_id_list, v)
        else
            self:emit_event("unlock_talent", v)
        end

        self:local_log("新增已解锁的技能id  %s", v)
        for key, val in ipairs(self.m_locked_skill_id_list) do
            if v == val then
                table.remove(self.m_locked_skill_id_list, key)
                self:local_log("删除未解锁的技能id  %s", v)
            end
        end
        for key, val in ipairs(self.m_cur_specialization_locked_skill_id_list) do
            if v == val then
                table.remove(self.m_cur_specialization_locked_skill_id_list, key)
            end
        end
    end
    self:req_master_learns(specialization_skill_id_list)
end

-- 更新技能等级（当前人物角色下可升到的最大等级）
function skill_ui_manager:rec_master_level(skill_id)
    for i, v in ipairs(self.m_master_info) do
        if v["tmpl"] == skill_id then
            v["level"] = v["level"] + 1
            break
        end
    end
    for i, v in ipairs(self.m_cur_specialization_master_info) do
        if v["tmpl"] == skill_id then
            v["level"] = v["level"] + 1
            break
        end
    end
    self:emit_event("skill_max_level_up", skill_id)
end

-- 更新技能状态(当前等级)
function skill_ui_manager:rec_master_stat(skill_id)
    for i, v in ipairs(self.m_master_info) do
        if v["tmpl"] == skill_id then
            v["stat"] = v["stat"] + 1
            break
        end
    end
    for i, v in ipairs(self.m_cur_specialization_master_info) do
        if v["tmpl"] == skill_id then
            v["stat"] = v["stat"] + 1
            break
        end
    end
    self:emit_event("skill_curr_level_up", skill_id)
end

-- 更新技能页面
function skill_ui_manager:rec_master_page(page_id)
    --print("rec_master_page页面id", page_id)
end
-- 更新技能位置
function skill_ui_manager:rec_master_slot(skill_id, slot)
    self:local_log("rec_master_slot技能id%s", skill_id)
    self:local_log("rec_master_slot位置编号%so", slot)
    for i, v in ipairs(self.m_master_info) do
        if v["tmpl"] == skill_id then
            v.slot[1] = slot
            break
        end
    end
    for i, v in ipairs(self.m_cur_specialization_master_info) do
        if v["tmpl"] == skill_id then
            v.slot[1] = slot
            break
        end
    end
    self:emit_event("change_slot", skill_id, slot)
end

-- 更新外部技能状态
function skill_ui_manager:rec_master_status(skill_id, max_level, curr_level, associated)
    self:emit_event("master_status", skill_id, max_level, curr_level, associated)
end
--------------------------------------------------------------
-- [C2S]
-- 请求技能列表
function skill_ui_manager:req_master_list()
    self:cell_call("master_list")
end

-- 请求学习技能
function skill_ui_manager:req_master_learn(skill_id)
    self:cell_call("master_learn", skill_id)
end

-- 请求学习多个技能
function skill_ui_manager:req_master_learns(skill_id_list)
    local list = ListObject()
    for i, v in ipairs(skill_id_list) do
        list:Add(v)
    end
    self:cell_call("master_learns", list)
end

-- 请求切换天赋技能(给服务器发送的是我所切换的天赋是 第几组 第几个)
function skill_ui_manager:req_master_enabling(group_num, slot_num)
    self:cell_call("master_enabling", group_num, slot_num)
end

-- 切换技能页面
function skill_ui_manager:req_master_switch(page_id)
    self:cell_call("master_switch", page_id)
end

-- 交换技能位置
function skill_ui_manager:req_master_swap(source_skill_id, source_skill_slot, target_skill_id, target_skill_slot)
    self:cell_call("master_swap", source_skill_id, source_skill_slot, target_skill_id, target_skill_slot)
    self:emit_event("change_skill", source_skill_id, source_skill_slot, target_skill_id, target_skill_slot)
end

-- *------------------[E]Sever interface-----------------——*

-----返回（可以使用的）已学习的技能列表
function skill_ui_manager:get_master_info_list()
    --local ret = {}
    --for k, v in pairs(self.m_master_info) do
    --    ret[k] = v
    --end
    --return ret
    -- 修改为获取当前专精下的技能
    local ret = {}
    for k, v in pairs(self.m_cur_specialization_master_info) do
        -- 外部技能检查
        if dbc.spell_ui[v.tmpl].is_talent == -1 then
            if v.associated ~= 0 then
                table.insert(ret, v)
            end
        else
            table.insert(ret, v)
        end
        --ret[k] = v
        --print("get_master_info_list", v.tmpl)
    end
    return ret

end

-----返回未解锁的技能列表
function skill_ui_manager:get_locked_skill_id_list()
    --local ret = {}
    --for k, v in pairs(self.m_locked_skill_id_list) do
    --    ret[k] = v
    --end
    --return ret
    -- 修改为获取当前专精下的技能
    local ret = {}
    for k, v in pairs(self.m_cur_specialization_locked_skill_id_list) do
        ret[k] = v
    end
    return ret

end

-----返回已解锁但是未学习的技能列表[2017.11.25 rjy 这张表中暂时应该只有天赋技能  之后可能会有装备技能等]
function skill_ui_manager:get_unlocked_skill_id_list()
    --local ret = {}
    --for k, v in pairs(self.m_unlocked_skill_id_list) do
    --    ret[k] = v
    --end
    --return ret
    -- 修改为获取当前专精下的技能
    local ret = {}
    for k, v in pairs(self.m_cur_specialization_unlocked_skill_id_list) do
        ret[k] = v
    end

    return ret
end

function skill_ui_manager:base_call(method_name, ...)
    local kbesdk = app:getKBESDK()
    local player_id = kbesdk:get_player_id()
    kbesdk:entity_base_call(player_id, method_name, ...)
end

function skill_ui_manager:cell_call(method_name, ...)
    local kbesdk = app:getKBESDK()
    local player_id = kbesdk:get_player_id()
    kbesdk:entity_cell_call(player_id, method_name, ...)
end
function skill_ui_manager:get_role()
    local kbe_mgr = self:getFrame("kbe.kbe_mgr")
    local sdk = app:getKBESDK()
    local role_id = sdk:get_player_id()
    local role = kbe_mgr:get_entity(role_id)
    return role
end

function skill_ui_manager:local_log(...)
    --app:logError(string.format(...))
end
function skill_ui_manager:doUpdate()
    if self.m_change and utility.table:count(self.m_cur_specialization_unlocked_skill_id_list) == self.m_cur_spe_talent_skill_num then
        self:emit_event("change_specilization")
        self.m_change = false
    end
end

return skill_ui_manager