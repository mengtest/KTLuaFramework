local require_relative = REQUIRE_BASE(...)
local ObserverHost = require "system.observer_host"
local Combat = require_relative("interfaces.Combat")
local M = class("Creature")

-- include mixin
M:include(ObserverHost, Combat)

Attribute.decl(M, "tid", 0)
Attribute.decl(M, "pos", function() return Vector3(0, 0, 0) end)
Attribute.decl(M, "dir", function() return 0 end)
Attribute.decl(M, "move_state", 0)
Attribute.decl(M, "move_speed", 0)
Attribute.decl(M, "name", "")
Attribute.decl(M, "health", 0)
Attribute.decl(M, "health_max", 0)
Attribute.decl(M, "target_id", 0)
Attribute.decl(M, "in_combat", 0)
-- 可否被选中 1:可以 0:不可以
Attribute.decl(M, "selectable", 0)
-- 可否被攻击 1:可以 0:不可以
Attribute.decl(M, "attackable", 0)


Event.decl(M, "cast_skill")
Event.decl(M, "be_hit")
Event.decl(M, "set_position")
Event.decl(M, "update_position")
Event.decl(M, "play_anim")
Event.decl(M, "popup_bubble")


function M:initialize(id)
    --print("kbe.Creature initialize")
	Attribute.init(self)

	-- 各mixin初始化
	Combat.initialize(self)

	self.m_id = id
end

function M:on_init()
	--print("Creature:on_init")
    -- 各mixin
	Combat.on_init(self)
end

function M:on_destroy()
	--print("Creature:on_destroy")
    -- 各mixin
	Combat.on_destroy(self)
end

function M:set_property(name, value)
	self:set_attr(name, value)
    self:emit_event("on_event_" .. name .. "_set", value)
end

function M:get_id()
	return self.m_id
end

function M:get_role_type()
	local id = self:get_tid()
	return id
end

function M:reset_pos()
    self:emit_event("set_position",self:get_pos())
end

function M:move_to(pos)
    self:emit_event("update_position",self:get_pos())
end

function M:cast_skill(skill_id, target_id, target_pos, dir)
	 print("M:cast_skill", skill_id, target_id, target_pos,dir)
	 --Debug.LogError("M:cast_skill -->"..skill_id)
	self:emit_event("cast_skill", skill_id, target_id, target_pos, dir)
end

function M:be_hit(attacker_id, skill_id, hit_outcome, damage)
	--print("M:be_hit", attacker_id, skill_id, hit_outcome, damage)
	self:emit_event("be_hit", attacker_id, skill_id, hit_outcome, damage)
end


function M:play_anim(anima_name,has_camera,is_loop)
	self:emit_event("play_anim",anima_name,has_camera,is_loop)
end

--这里是服务器与客户端的接口，用于传递触发条件，并且执行的结果
function M:popup_bubble(dialog_id)
	self:emit_event("popup_bubble", dialog_id)
end

function M:update(delta)
    -- 各mixin update
	Combat.update(self, delta)
end

return M