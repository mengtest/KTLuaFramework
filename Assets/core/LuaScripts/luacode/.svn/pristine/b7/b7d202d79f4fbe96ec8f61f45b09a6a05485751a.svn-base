
local View = require("system.view")
local Mini_map_view = class("Mini_map_view", View)

function Mini_map_view:doInit()
    --Util_log:logError(Util_log.Mask.SJG_Map, string.format("parent.name = %s, parent.child0.name = %s", self:getParent():getGO().transform.name, self:getParent():getGO().transform:GetChild(0).name))
    local ui_main_entity_tr = self:getParent():getGO().transform:GetChild(0)
    local ctrl_node = ui_main_entity_tr:Find("MiniMap")
    
    self.m_world = self:getFrame("world")
    self.m_quest_manager = self:getFrame("quest_manager")
    self.m_scale_x = nil
    self.m_scale_y = nil
    self.m_moveable_rt = nil
    self.m_layer_quest_rt = nil
    
    self.m_quest_condition_aim_area_dict = {}
    self.m_quest_aim_area_dict = {}
    
    self:init_with_go(ctrl_node, ui_main_entity_tr)
end

function Mini_map_view:on_prepared()
    self:init()
    
    self:subscribe(self:getFrame():on_event("refresh_owner_pos"), function (pos)
        self:refresh_owner_pos(pos)
    end)
    self:subscribe(self:getFrame():on_event("refresh_owner_dir"), function (dir)
        self:refresh_owner_dir(dir)
    end)
    self:subscribe(self:getFrame():on_event("show_quest_condition_aim_area"), function (quest_id, index)
        self:show_quest_condition_aim_area(quest_id, index)
    end)
    self:subscribe(self:getFrame():on_event("hide_quest_condition_aim_area"), function (quest_id, index)
        self:hide_quest_condition_aim_area(quest_id, index)
    end)
    self:subscribe(self:getFrame():on_event("show_quest_aim_area"), function (quest_id)
        self:show_quest_aim_area(quest_id)
    end)
    self:subscribe(self:getFrame():on_event("hide_quest_aim_area"), function (quest_id)
        self:hide_quest_aim_area(quest_id)
    end)
    
    --self:subscribe(self:getFrame():on_event("refresh_"))
end

function Mini_map_view:init()
    local temp_map_size = Vector2(400, 400)
    local tr = self:getGO().transform
    local mini_map_size = tr:Find("mask/moveable_items/bg_terrain"):GetComponent(UnityEngine.RectTransform).rect.size
    self.m_scale_x = mini_map_size.x / temp_map_size.x
    self.m_scale_y = mini_map_size.y / temp_map_size.y
    self.m_moveable_rt = tr:Find("mask/moveable_items"):GetComponent(UnityEngine.RectTransform)
    self.m_owner_rt = tr:Find("mask/owner"):GetComponent(UnityEngine.RectTransform)
    self.m_layer_quest_rt = tr:Find("mask/moveable_items/layer_quest"):GetComponent(UnityEngine.RectTransform)
    self:getFrame():set_scale(self.m_scale_x, self.m_scale_y)
end

function Mini_map_view:refresh_owner_pos(pos)
    --[[local map_pos = Vector2(-pos.x * self.m_scale_x, -pos.z * self.m_scale_y)
    self.m_moveable_rt.anchoredPosition = map_pos--]]
    self.m_moveable_rt.anchoredPosition3D = -self:project_3d_pos_to_map_pos(pos)
end

function Mini_map_view:refresh_owner_dir(dir)
    self.m_owner_rt.localEulerAngles = Vector3(0, 0, - dir)
end

function Mini_map_view:show_quest_condition_aim_area(quest_id, index)
    local quest_layer = self.m_quest_condition_aim_area_dict[quest_id]
    if not quest_layer then
        quest_layer = {}
        self.m_quest_condition_aim_area_dict[quest_id] = quest_layer
    end
    local area_rt = quest_layer[index]
    if area_rt then
        --area_rt.gameObject:SetActive(true)
        return
    end
    
    local area_info = self.m_quest_manager:get_quest_list()[quest_id]:get_condition_aim_area(index)
    local area_data = self.m_world:get_area_data(area_info[1], area_info[2])
    if not area_data then
        return
    end
    
    quest_layer[index] = "locked"
    self:load("ui/map/aim_area.prefab", function (go)
        go.name = "quest_condition_aim_area_" .. area_info[2]
        area_rt = go:GetComponent(UnityEngine.RectTransform)
        area_rt.parent = self.m_layer_quest_rt
        area_rt.localScale = Vector3.one
        area_rt.anchoredPosition3D = self:project_3d_pos_to_map_pos(area_data.worldPosition)
        area_rt.sizeDelta = Vector2(2 * area_data.radius * self.m_scale_x, 2 * area_data.radius * self.m_scale_y)
        
        quest_layer[index] = area_rt
        Util_log:logError(Util_log.Mask.SJG_Map, string.format("quest_id = %d, index = %d, radius = %d\n area_data = \n%s", quest_id, index, 2 * area_data.radius, Util_string:get_string_by_tbl(area_data)))
    end)
end

function Mini_map_view:hide_quest_condition_aim_area(quest_id, index)
    local quest_layer = self.m_quest_condition_aim_area_dict[quest_id]
    if not quest_layer then
        return
    end
    local area_rt = quest_layer[index]
    if not area_rt then
        return
    end
    
    Object.Destroy(area_rt.gameObject)
    table.remove(quest_layer, index)
    if #quest_layer == 0 then
        table.remove(self.m_quest_condition_aim_area_dict, quest_id)
    end
end

function Mini_map_view:show_quest_aim_area(quest_id)
    local area_rt = self.m_quest_aim_area_dict[quest_id]
    if area_rt then
        return
    end
    
    local area_info = self.m_quest_manager:get_quest_list()[quest_id]:get_aim_area()
    local area_data = self.m_world:get_area_data(area_info[1], area_info[2])
    if not area_data then
        return
    end
    
    self.m_quest_aim_area_dict[quest_id] = "locked"
    self:load("ui/map/aim_area.prefab", function (go)
        go.name = "quest_aim_area_" .. area_info[2]
        area_rt = go:GetComponent(UnityEngine.RectTransform)
        area_rt.parent = self.m_layer_quest_rt
        area_rt.localScale = Vector3.one
        area_rt.anchoredPosition3D = self:project_3d_pos_to_map_pos(area_data.worldPosition)
        area_rt.sizeDelta = Vector2(2 * area_data.radius * self.m_scale_x, 2 * area_data.radius * self.m_scale_y)
        
        self.m_quest_aim_area_dict[quest_id] = area_rt
    end)
end

function Mini_map_view:hide_quest_aim_area(quest_id)
    local area_rt = self.m_quest_aim_area_dict[quest_id]
    if not area_rt then
        return
    end
    
    Object.Destroy(area_rt.gameObject)
    self.m_quest_aim_area_dict[quest_id] = nil
end

function Mini_map_view:project_3d_pos_to_map_pos(pos)
    return Vector3(pos.x * self.m_scale_x, pos.z * self.m_scale_y, 0)
end






return Mini_map_view