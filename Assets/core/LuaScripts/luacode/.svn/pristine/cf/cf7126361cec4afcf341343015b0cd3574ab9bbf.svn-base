local M = {}

Attribute.decl(M, "can_use",true)
Attribute.decl(M, "highLight",false)


function M:doInit(parma)
    local unit = parma.unit
    self.m_skill_data =  unit:get_skill(parma.id) --技能数据
    local dbc_spell = dbc.spell[ self.m_skill_data:get_id()]
    self:check_condition(unit,dbc_spell)
end

function M:get_skill_data()
    return self.m_skill_data
end


function M:check_condition(unit,dbc_spell)
    if(dbc_spell.condition>0) then
        --具有释放条件的技能
        self:change_btn_state(false,false)
        
        --临时做法 等待服务器修改位运算以及是否有通用枚举

        --如果是目标眩晕
        if(dbc_spell.condition==1) then
            self:subscribe(unit:on_event_target_set(), function(target)
            if(self.m_target_func~=nil) then self:unsubscribe(self.m_target_func) end           
               if(target~=nil) then
                    self.m_target_func = self:subscribe(target:on_event_stunned_set(), function(val)
                        self:change_btn_state_by_condition(val)
                    end)
               end
            end)

            -- self:subscribe(unit:on_event_stunned_set(), function(val)
            --     self:change_btn_state_by_condition(val)
            -- end)
        end

        --如果是自己眩晕
        if(dbc_spell.condition==2) then
            self:subscribe(unit:on_event_stunned_set(), function(val)
                self:change_btn_state_by_condition(val)
            end)
        end
    end
end


function M:change_btn_state(can_use,is_highLight)
    self:set_can_use(can_use)
    self:set_highLight(is_highLight)
end

function M:change_btn_state_by_condition(val)
    if(val == 1) then
        self:change_btn_state(true,true)
    else
        self:change_btn_state(false,false)
    end
end

return M


--[[
Attribute.decl(M, "stunned",nil)
Attribute.decl(M, "frozen",nil)
Attribute.decl(M, "silenced",nil)
]]--