local require_relative = REQUIRE_BASE(...)

local M = {}

-- doInit 时重置
local PLAYER_CAMERA_YAW_THRESHOLD = 0.5 -- 镜头复位:角度容差(度)
local CAMERA_RESET_WAIT_TIME = 2 -- 镜头复位:等待时长
local CAMERA_RESET_SPEED = 90 -- 镜头复位速度
local SHOW_TEAM_THUMBS_TIME = 0.5 -- 增益技能显示小队头像时间

local Unit = require_relative("unit")
local MOVE_STATE = Unit.MOVE_STATE

--Attribute.decl(M, "cur_skill_id", 0)
Attribute.decl(M, "cur_skill_data", nil)-- 当前操纵中的技能
Attribute.decl(M, "show_team_thumbs", false)
Attribute.decl(M, "cur_skill_layer", 1)-- 当前显示中的技能图层  1主; 2副
Attribute.decl(M, "target_skill_layer", 1)-- 要显示的技能图层  1主; 2副
Attribute.decl(M, "interact_btn_name", nil)
Attribute.decl(M, "interact_btn_time", 2)
Attribute.decl(M, "interact_btn_tip", nil)

Event.decl(M, "move")
Event.decl(M, "skill")
Event.decl(M, "reset")
Event.decl(M, "show_skill_layer")
Event.decl(M, "widget_loaded")
Event.decl(M, "team_member_change")
Event.decl(M, "switch_interact_btn")

-- 计算输入对应的move_state
function M.get_move_state_from_input(input)
    local axis_x = input.x
    local axis_y = input.y
    local axis_z = input.z
    -- 暂未使用
    if axis_x ~= 0 then
        local tan = axis_y / axis_x
        if axis_x > 0 then
            if tan < -2.41421 then
                -- tan(-90 + 45/2)
                return MOVE_STATE.BACK
            elseif tan < -0.41421 then
                -- tan(-45/2)
                return MOVE_STATE.R_BACK
            elseif tan < 0.41421 then
                -- tan(45/2)
                return MOVE_STATE.RIGHT
            elseif tan < 2.41421 then
                -- tan(90 - 45/2)
                return MOVE_STATE.R_FORWARD
            else
                return MOVE_STATE.FORWARD
            end
        else
            if tan < -2.41421 then
                -- tan(90 + 45/2)
                return MOVE_STATE.FORWARD
            elseif tan < -0.41421 then
                -- tan(180 - 45/2)
                return MOVE_STATE.L_FORWARD
            elseif tan < 0.41421 then
                -- tan(180 + 45/2)
                return MOVE_STATE.LEFT
            elseif tan < 2.41421 then
                -- tan(-90 - 45/2)
                return MOVE_STATE.L_BACK
            else
                return MOVE_STATE.BACK
            end
        end
    elseif axis_y ~= 0 then
        if axis_y > 0 then
            return MOVE_STATE.FORWARD
        else
            return MOVE_STATE.BACK
        end
    else
        return MOVE_STATE.IDLE
    end
end


function M:doInit(unit)
    -- 读取/重置参数
    local setting = Resources.Load("settings/PlayerControllSetting")
    PLAYER_CAMERA_YAW_THRESHOLD = setting.PlayerCameraYawThreshold
    CAMERA_RESET_WAIT_TIME = setting.CameraResetWaitTime
    CAMERA_RESET_SPEED = setting.CameraResetSpeed
    SHOW_TEAM_THUMBS_TIME = setting.ShowTeamThumbsTime
    
    self.m_unit = unit
    self.m_battle_mgr = app:getBattleMgr()
    self.m_skill_mgr = app:getSkillMgr()
    
    self.m_new_target = nil
    self.m_new_target_dist = nil
    self.m_is_all_selected = false
    self.m_selected = true
    self.m_world = self:getFrame("world")
    self.m_attacked_list = nil
    self.m_thumb_view_list = {}
    self.m_team_manager = self:getFrame("team_manager")
    
    self.m_cam = self:getFrame("world"):getCamera()
    self.m_reset_camera_cd = 0
    -- 重置相机倒计时
    self.m_is_reseting_camera = false
    -- 重置中
    self.m_cam_operated = false
    self:subscribe(
        self.m_cam:on_event_operated(),
        function()
            self.m_cam_operated = true
        end
    )
    self.m_joystick_input = nil
    -- 最近一次的摇杆输入
    self:subscribe(self.m_unit:on_event("be_hit"), function(attacker_id, skill_id, hit_outcome, damage)
            -- 如果是主角，且没有目标
            if self.m_unit:get_target() == nil then
                print("被攻击了")
                -- 判断技能是否坏技能
                local spell_cfg = dbc.spell[skill_id]
                if not spell_cfg.is_positive then
                    -- 获取施法者
                    local attacker = self.m_world:getUnit(attacker_id)
                    attacker:set_is_Selected(true)
                    -- 把该施法者记录为本unit的目标
                    self.m_unit:set_target(attacker)
                end
            else
                
                end
    end)
end

function M:on_loaded()
    
    -----------rjy--------2017.10.26-------测试技能配置--------------------------------------
    self:subscribe(self:getFrame("ui_main"):on_event_skill_setting_is_created_set(true), function(is_open)
        if is_open then
            local skill_ui_setting = self:getFrame("skill_ui_setting")
            self:subscribe(skill_ui_setting:on_event("set_skill_id_list"), function(skill_id_list)
                for i, v in ipairs(skill_id_list) do
                    self:destroyChild("skill_btn_" .. i)
                    --print(v)
                    self:createChild("skill_btn_" .. i, "skill_controll_btn", {id = v, unit = self.m_unit})
                end
            end)
        end
    end)
    
    -----------------------------
    --创建队内玩家的view    myself
    local team_dic = self.m_team_manager:get_member_dict()
    
    local num = 0
    for k, v in pairs(team_dic) do
        num = num + 1
        self.m_teammember_list[num] = {k, v["entity_id"], v["state"]}
    end
    
    
    self:subscribe(
        self.m_team_manager:on_event_add_member(),
        function(db_id, data)
            print("成员入队了》》》》》》》》》》》》》》》》》")
            self:refresh_set_teamunit()
        end)
    self:subscribe(
        self.m_team_manager:on_event_del_member(),
        function(db_id)
            print("成员离队了》》》》》》》》》》》》》》》》》")
            self:refresh_set_teamunit()
        end)
    self:subscribe(
        self.m_team_manager:on_event_login(),
        function(db_id)
            print("成员上线了》》》》》》》》》》》》》》》》》")
            self:refresh_set_teamunit()
        end)
    self:subscribe(
        self.m_team_manager:on_event_logout(),
        function(db_id)
            print("成员下线了》》》》》》》》》》》》》》》》》")
            self:refresh_set_teamunit()
        end)
    
    self:Client_Test("Treasure", Vector3(92.28, 60.88, 94.76), 700001)
    self:Client_Test("Treasure", Vector3(-125.908, 174.5, 522.6638), 700002)
end

function M:change_skill_btn_state(skill_id, can_use, is_highLight)
    for i, v in ipairs(self.m_skill_btn_list) do
        if (v:get_skill_data():get_id() == skill_id) then
            v:change_btn_state(can_use, is_highLight)
        end
    end
end


function M:create_skill_btn_list(pos_list,container)
    -- 在没有角色技能管理系统之前，在此临时配置各职业的技能
    local specialization = self.m_unit:get_specialization()
    
    local default_skill_id_list = {}

    -- 临时增加几个好厉害技能测试
    local special_skill_id_list = {}

    if specialization == SharedEnum.TalentSpecialization.DEMON_HUNTER_VENGEANCE then
        -- 灵猴(战士)技能
        default_skill_id_list = {912001, 912001, 912002, 912003, 912004, 912005, --11个测试技能
            912006, 912007, 912008, 912009, 912010
        }
    
    elseif specialization == SharedEnum.TalentSpecialization.MAGE_FIRE then
        -- 罗刹(法师)技能
        default_skill_id_list = {903001, 903008, 903002, 903003, 903006, 903005, --11个测试技能
            9030011, 9030012, 9030013, 9030014, 9030015
        }
        special_skill_id_list = {903007, 903019}
    elseif SharedEnum.TalentSpecialization.PRIEST_HOLY then
        default_skill_id_list = {906001, 906001, 906004, 906005, 906006, 906007, --11个测试技能
        906008, 906009, 906007, 906001, 906004
    }
    else
        logError("!!!!!!!! invalid specialization type", type)
       
    end


    
    -- 创建技能按钮
    self.m_skill_btn_list = {}
    local skill_num = 0
    for i, v in ipairs(default_skill_id_list) do
        skill_num = skill_num + 1
        local skill_id = v
        local skill_btn = self:createChild("skill_btn_" .. i, "skill_controll_btn", 
        {id = skill_id, 
        unit = self.m_unit, 
        parent = pos_list[skill_num],
        special = 0})
        self.m_skill_btn_list[skill_num] = skill_btn
    end

    -- 创建好厉害技能按钮
    self.m_special_skill_btn_list = {}
    for i, v in ipairs(special_skill_id_list) do
        skill_num = skill_num + 1
        local skill_id = v
        local skill_btn = self:createChild("special_skill_btn_" .. i, "skill_controll_btn", 
        {id = skill_id, 
        unit = self.m_unit, 
        parent = container,
        special = 1})

        self.m_skill_btn_list[skill_num] = skill_btn
    end

end

function M:create_team_Thumb_list(pos_list)
    self.m_teammember_list = {}
    for i = 1, 5 do
        self.m_thumb_view_list[i] = self:createChild("Thumb_view_" .. i, "team_skilltarget_controll", {parent = pos_list[i]})
    
        if #self.m_teammember_list > 0 then
            if i <= #self.m_teammember_list then
                self.m_thumb_view_list[i]:set_unit(self.m_world:getUnit(self.m_teammember_list[i][2]))
            end
        end
    end
end

function M:get_skill_btn_list()
    return self.m_skill_btn_list
end
-----重新获取组队成员的字典
function M:refresh_set_teamunit()
    local team_dic = self.m_team_manager:get_member_dict()
    local num = 0
    ---------
    self.m_teammember_list = {}
    for k, v in pairs(team_dic) do
        num = num + 1
        self.m_teammember_list[num] = {k, v["entity_id"], v["state"]}
    --print("刷新后状态为》》》》》》》》》》》》》》》》》》》》",v["state"])
    end
    for i = 1, #self.m_teammember_list do
        if #self.m_teammember_list > 0 then
            if i <= #self.m_teammember_list then
                --print("重新设置了对象》》》》》》》》》",i)
                --print("重新设置对象的id为",self.m_teammember_list[i][2])
                self.m_thumb_view_list[i]:set_unit(self.m_world:getUnit(self.m_teammember_list[i][2]))
            end
        end
    end
    self:emit_event("team_member_change")
end


--获取技能按钮的fram列表
function M:get_skill_btn_list()
    local ret_list = {}
    for k, v in pairs(self.m_skill_btn_list) do
        ret_list[k] = v
    end
    return ret_list
end

--获取小队列表
function M:get_team_member_list()
    local ret_list = {}
    for k, v in pairs(self.m_teammember_list) do
        ret_list[k] = v
    --print(">>>>>>>>>>>>>>>>>>>>>>>>>>>",k)
    end
    return ret_list
end

-- 处理(摇杆)输入
function M:handle_input(input)
    -- print("22222222222222", M.get_move_state_from_input(input))
    local ms = M.get_move_state_from_input(input)
    if (ms ~= 0 and self:is_interact_state()) then
        self:handle_other_with_interact(true)
        return
    end
    
    self.m_joystick_input = input
    self.m_unit:change_move_state(ms)
end

-- 处理跳跃
function M:handle_jump()
    if (self:is_interact_state()) then
        self:handle_other_with_interact(true)
        return
    end
    -- print("PlayerController:handle_jump")
    self.m_unit:set_to_jump(true)
end

M.obj_id = 200001

function M:Client_Test(...)
    local funcs = {...}
    if (funcs[1] == "Treasure") then
        -- clz test for interactObj
        local kbe_mgr = self:getFrame("kbe.kbe_mgr")
        -- clz test for interactObj
        kbe_mgr:on_entity_init(M.obj_id, "Treasure")
        if (funcs[2] ~= nil) then
            kbe_mgr:on_entity_property_set(M.obj_id, "pos", funcs[2])
        end
        if (funcs[3] ~= nil) then
            kbe_mgr:on_entity_property_set(M.obj_id, "tmpl", funcs[3])
        end
        
        kbe_mgr:on_entity_property_set(M.obj_id, "discoverable", 1)
        kbe_mgr:on_entity_property_set(M.obj_id, "count", 100)
        -- clz test for interactObj
        kbe_mgr:on_entity_enter(M.obj_id)
    elseif (funcs[1] == "creature") then
        -- clz test for creature
        local kbe_mgr = self:getFrame("kbe.kbe_mgr")
        -- clz test for creature
        kbe_mgr:on_entity_init(M.obj_id, "Creature")
        if (funcs[2] ~= nil) then
            kbe_mgr:on_entity_property_set(M.obj_id, "pos", funcs[2])
        end
        if (funcs[3] ~= nil) then
            kbe_mgr:on_entity_property_set(M.obj_id, "tid", funcs[3])
        end
        if (funcs[4] ~= nil) then
            kbe_mgr:on_entity_property_set(M.obj_id, "dir", funcs[4])
        end
        if (funcs[5] ~= nil) then
            kbe_mgr:on_entity_property_set(M.obj_id, "name", funcs[5])
        end
        -- clz test for creature
        kbe_mgr:on_entity_enter(M.obj_id)
    end
    M.obj_id = M.obj_id + 1
end



-- 处理切换目标
function M:handle_switch_target()
    
    if (self:is_interact_state()) then
        self:handle_other_with_interact(false)
        return
    end
    
    self.allunitTable = self.m_world:getUnitMap()
    local old_target = self.m_unit:get_target()
    
    local targetlist = self.m_world:getDisUnit(self.m_unit, 10)
    local renwuidList = self:getFrame("quest_manager"):get_prey_list()
    local bossList = {}
    local jingyinList = {}
    local putongList = {}
    local renwuList = {}
    local diduiList = {}
    local allList = {}
    local isrenwuguai = false
    ---获取到在攻击范围内的unit
    if #targetlist == 0 then
        --如果在范围内没有，设置为没有目标状态
        self.m_unit:set_target(nil)
        for _, v in pairs(self.allunitTable) do
            v:set_is_Selected(false)
        end
    else --如果在范围内有，根据优先级判断
        for _, v in pairs(targetlist) do
            isrenwuguai = false
            -- 获取unit的unit_type
            local cfg = v:getCfg()
            local unit_type = cfg.unit_type
            local renwuMonsterId = cfg.id
            if self.m_battle_mgr:is_enemy(v) then
                diduiList[#diduiList + 1] = v
            elseif #renwuidList ~= 0 then
                for i = 1, #renwuidList do
                    if renwuMonsterId == renwuList[i] then
                        renwuList[#renwuList + 1] = v
                        isrenwuguai = true
                        break
                    end
                end
                if not isrenwuguai then
                    if unit_type == 4 then
                        bossList[#bossList + 1] = v
                    elseif unit_type == 3 then
                        jingyinList[#jingyinList + 1] = v
                    elseif unit_type == 2 then
                        putongList[#putongList + 1] = v
                    end
                end
            elseif unit_type == 4 then
                bossList[#bossList + 1] = v
            elseif unit_type == 3 then
                jingyinList[#jingyinList + 1] = v
            elseif unit_type == 2 then
                putongList[#putongList + 1] = v
            end
        end
        -------此处代码可以重构，当前没有选择目标
        if old_target == nil then
            self.m_selected = false
            allList[1] = {#diduiList, diduiList}
            allList[2] = {#renwuList, renwuList}
            allList[3] = {#bossList, bossList}
            allList[4] = {#jingyinList, jingyinList}
            allList[5] = {#putongList, putongList}
            
            for i = 1, #allList do
                if allList[i][1] > 0 then
                    self.m_selected = self:nontarget_List_CallBack(allList[i][2])
                end
                if self.m_selected then
                    break
                end
            end
            
            self.m_unit:set_target(self.m_new_target)
            local aa = self.m_new_target:getCfg().unit_type
        --for _, v in pairs(targetlist) do
        --    print(v:get_id(), v:get_is_Selected())
        --end
        --print("攻击角色类型为" .. aa)
        ------------------------------------------------------------------
        else --当前有了选择的目标
            self.m_selected = true
            --这个用于判断   如果在当前切换目标列表之外的unit全部设置为没有被选中过
            local isSame = false
            for _, v in pairs(self.allunitTable) do
                for j = 1, #targetlist do
                    if v == targetlist[j] then
                        --print("相同不需要重新设置")
                        isSame = true
                        break
                    end
                end
                if isSame ~= true then
                    --print("设置为没有被选中过")
                    v:set_is_Selected(false)
                end
                isSame = false
            end
            if self.m_unit:get_in_combat() == 1 then
                --进入战斗状态
                allList[1] = {#diduiList, diduiList}
                allList[2] = {#renwuList, renwuList}
                allList[3] = {#bossList, bossList}
                allList[4] = {#jingyinList, jingyinList}
                allList[5] = {#putongList, putongList}
                self:have_target_findnext(allList)
            else --没有进入战斗状态
                allList[1] = {#diduiList, diduiList}
                allList[2] = {#renwuList, renwuList}
                allList[3] = {#bossList, bossList}
                allList[4] = {#jingyinList, jingyinList}
                allList[5] = {#putongList, putongList}
                self:have_target_findnext(allList)
            end
            self.m_unit:set_target(self.m_new_target)
            local aa = self.m_new_target:getCfg().unit_type
        --for _, v in pairs(targetlist) do
        --    print(v:get_is_Selected())
        --end
        --print("攻击角色类型为" .. aa)
        end
    end
end

function M:reset()
    self:emit_event("reset")
end

function M:on_skill_btn_down(skill_data)
    print("---------on_skill_btn_down", skill_data:get_id())
    if (self:is_interact_state()) then
        self:handle_other_with_interact(false)
        return
    end
    
    -- 记录按钮按下的时间
    self.m_btn_pressed_time = os.time()
    
    local skill_id = skill_data:get_id()
    self:set_cur_skill_data(skill_data)-- 记录为当前操作中的技能
    self.m_is_skill_btn_down = true
    self.m_unit:set_skill_id(skill_id)-- 记录为角色当前使用的技能id
    self.m_unit:set_skill_valid(true)-- 显示技能为可用
    
    
    local client_cfg = skill_data:get_client_cfg()
    
    -- 区域型技能开始选择技能目标
    if
        client_cfg.target_mode == Enum_Battle.Skill_Target_Mode.AREA or
        client_cfg.target_mode == Enum_Battle.Skill_Target_Mode.DIRECTION
    then
        self.m_unit:emit_event("show_skill_idctr", true, skill_id)
    end
end

-- 抬起技能按钮
function M:on_skill_btn_up(is_in_cancel_area, is_in_skilltarget)
    
    if (self:is_interact_state()) then
        self:handle_other_with_interact(false)
        return
    end
    
    local unit = self.m_unit
    local skill_data = self:get_cur_skill_data()
    local skill_id = skill_data:get_id()
    local skill_cfg = skill_data:get_cfg()
    local skill_client_cfg = skill_data:get_client_cfg()
    local skill_effect_cfg_list = skill_data:get_effect_cfg()
    
    --print("---------on_skill_btn_up", skill_id)
    self.m_is_skill_btn_down = false
    unit:emit_event("show_skill_idctr", false, skill_id)-- 隐藏技能指示器
    
    -- 是否关闭【小队头像】
    if skill_client_cfg.show_team_member == Enum_Battle.Skill_Show_Team_Member.SHOW then
        if self:get_show_team_thumbs() then
            self:set_show_team_thumbs(false)
        end
    end
    
    -- 取消技能
    if is_in_cancel_area then
        -- 取消技能
        -- 目前什么都不用做
        return
    end
    
    -- todo 更多检查 --
    -- 读条中释放检查
    local unit_main_act = unit:get_main_act()
    if unit_main_act == Enum_Battle.Unit_Main_Act.SKILL_SING or
        unit_main_act == Enum_Battle.Unit_Main_Act.SKILL_CHANNEL
    --正在吟唱或者正在引导
    then
        -- 不是 读条中释放 类型
        if not skill_cfg.can_cast_while_casting then
            print(skill_id, "正在施法中")
            return
        end
    end
    
    
    -- 启动技能流程 --
    -- 是否为瞬移技能
    local teleport_bool, teleport_dist = self.m_skill_mgr:is_teleport_skill(skill_effect_cfg_list)
    if teleport_bool then
        local euler_y = unit:get_dir();
        local vec3 = unit:get_pos()
        local actual_fwd = Quaternion.AngleAxis(euler_y, Vector3.up) * Vector3.forward * teleport_dist;
        local mask = LayerMask.GetMask("Terrain")
        local cc = unit:get_cc()
        local ok, hitinfo = Physics.Raycast(vec3 + Vector3(0, cc.height * 0.3, 0), actual_fwd, Slua.out, teleport_dist, mask)
        
        if ok then
            actual_fwd = Quaternion.AngleAxis(euler_y, Vector3.up) * Vector3.forward * hitinfo.distance;
        end
        
        self:emit_event_skill(skill_id, 0, actual_fwd + vec3, 0)-- 广播
        unit:cast_skill(skill_id, 0, actual_fwd + vec3, 0)-- 开始角色释放技能
        return
    end
    
    
    -- 不需要指定目标的技能
    if self.m_skill_mgr:is_target_type_none(skill_effect_cfg_list) then
        self:emit_event_skill(skill_id, 0, Vector3.zero, 0)-- 广播
        unit:cast_skill(skill_id, 0, Vector3.zero, 0)-- 开始角色释放技能
        return
    end
    
    -- 需要指定释放位置或者角度的技能
    if self.m_skill_mgr:is_target_type_dest_area(skill_effect_cfg_list) or
        self.m_skill_mgr:is_target_type_dir(skill_effect_cfg_list)
    then
        --print("**********", self.m_unit:get_skill_area_pos())
        self:emit_event_skill(skill_id, 0, unit:get_skill_area_pos(), unit:get_skill_dir())-- 广播
        unit:cast_skill(skill_id, 0, unit:get_skill_area_pos(), unit:get_skill_dir())-- 开始角色释放技能
        return
    end
    
    
    
    -- 其余即为需要指定目标的技能
    -- 指向性增益技能目标特殊处理 见《斗战神操作设计》修正8.0 --
    local target = unit:get_target()
    if skill_cfg.is_positive then
        --print("------------retarget", skill_id)
        -- 以下情况保持当前目标状态，对自己释放该技能
        if is_in_skilltarget ~= false then
            local team_dic = self.m_team_manager:get_member_dict()
            local db_id = self.m_teammember_list[is_in_skilltarget][1]
            print(db_id)
            local target_entity_id = nil
            for k, v in pairs(team_dic) do
                print(k)
                if k == db_id then
                    target_entity_id = v["entity_id"]
                    print("确定了增益技能释放的对象>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", target_entity_id)
                    break
                end
            end
            if target_entity_id ~= nil then
                local temptarget = self.m_world:getUnit(target_entity_id)
                unit:set_target(temptarget)
                print("确定了增益技能释放的对象>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", temptarget)
                --self.m_world:getUnit(self.m_teammember_list[is_in_skilltarget][2]):set_is_Selected(true)
                target = unit:get_target()
            end
        else
            if target == nil or -- 没有目标
                self.m_battle_mgr:is_enemy(target)-- 目标是敌方
            then
                target = unit
            end
        end
    end
    -- 条件检查
    if target == nil then
        print(skill_id, "需要一个目标")
    elseif target:is_dead() then
        print(skill_id, "目标已经死亡")
    elseif not self.m_battle_mgr:is_target_in_range(unit, target, skill_id) then
        print(skill_id, "目标距离太远")
    else
        --print(">>>>>>>>", skill_id, target:get_id(), target:get_pos(), unit:get_skill_dir())
        self:emit_event_skill(skill_id, target:get_id(), target:get_pos(), unit:get_skill_dir())-- 广播
        unit:cast_skill(skill_id, target:get_id(), target:get_pos(), unit:get_skill_dir())-- 开始角色释放技能
    end
end

-- 拖动技能按钮
function M:on_skill_btn_swipe(gesture)
    local swipe = gesture.swipeVector
    -- print(">>>>>>>>>>>>>>>>", swipe)
    local skill_data = self:get_cur_skill_data()
    local skill_id = skill_data:get_id()
    local skill_cfg = skill_data:get_cfg()
    local skill_client_cfg = skill_data:get_client_cfg()
    
    -- 技能【目标类型】决定拖动操作模式 --
    if skill_client_cfg.target_mode == Enum_Battle.Skill_Target_Mode.AREA then
        -- 选取区域 --
        -- 手势位移沿相机x,z轴投射到世界xz平面上
        -- 相机x轴在世界xz平面上的投影方向
        local projected_camera_axis_x = Vector3.ProjectOnPlane(self.m_cam:fetch_unity_camera().transform.right, Vector3.up).normalized
        local move_x = projected_camera_axis_x * 0.02 * swipe.x
        
        -- 相机z轴在世界xz平面上的投影方向
        local projected_camera_axis_z = Vector3.ProjectOnPlane(self.m_cam:fetch_unity_camera().transform.forward, Vector3.up).normalized
        local move_z = projected_camera_axis_z * 0.02 * swipe.y
        
        self.m_unit:emit_event("move_skill_area", move_x + move_z, skill_cfg)
    elseif skill_client_cfg.target_mode == Enum_Battle.Skill_Target_Mode.DIRECTION then
        -- 旋转角度 --
        local delta_yaw = swipe.x * 0.2
        self.m_unit:emit_event("yaw_skill_area", delta_yaw, skill_cfg)
    elseif skill_client_cfg.show_team_member == Enum_Battle.Skill_Show_Team_Member.SHOW then
        self:set_show_team_thumbs(true)
    -- 马上显示队员列表
    end
end

function M:update()
    local delta_time = app.get_delta_time()
    local cam = self.m_cam
    local unit = self.m_unit
    local input = self.m_joystick_input
    local cam_euler = cam:get_euler_angle()
    local unit_dir = unit:get_dir()
    
    local enable_reset_cd = true
    
    -- 角色与相机朝向相同
    if math.abs(cam_euler.y - unit_dir) < PLAYER_CAMERA_YAW_THRESHOLD then
        -- 没有摇杆输入
        -- print("@@@@@@@@@@@ camera unit same dir")
        enable_reset_cd = false
    elseif input.x == 0 and input.y == 0 then
        -- print("@@@@@@@@@@@ no input")
        enable_reset_cd = false
    elseif self.m_cam_operated then
        -- print("@@@@@@@@@@@ camera operated")
        enable_reset_cd = false
    end
    
    ------------------------
    -- 计算相机复位倒计时
    if enable_reset_cd then
        self.m_reset_camera_cd = self.m_reset_camera_cd + delta_time
    else
        self.m_reset_camera_cd = 0
        if self.m_is_reseting_camera then
            self.m_is_reseting_camera = false
        end
    end
    
    -- 判断开启复位操作
    if self.m_reset_camera_cd > CAMERA_RESET_WAIT_TIME then
        if not self.m_is_reseting_camera then
            self.m_is_reseting_camera = true
        end
    end
    
    -- 执行复位操作
    if self.m_is_reseting_camera then
        local new_yaw = Mathf.MoveTowardsAngle(cam_euler.y, unit_dir, CAMERA_RESET_SPEED * delta_time)
        cam:change_goal_yaw(new_yaw)
    end
    
    -- print("#########", self.m_reset_camera_cd)
    self.m_cam_operated = false
    
    -------------------------
    -- 治疗技能显示小队列表
    local skill_id = unit:get_skill_id()
    if self.m_is_skill_btn_down and skill_id == 1004 and (not self:get_show_team_thumbs()) then
        if os.time() - self.m_btn_pressed_time > SHOW_TEAM_THUMBS_TIME then
            self:set_show_team_thumbs(true)
        end
    end
end

function M:handle_change_skill_layer(skill_layer_code)
    self:set_target_skill_layer(skill_layer_code)
    
    self:check_change_skill_layer()
end

function M:check_change_skill_layer()
    local target_layer_code = self:get_target_skill_layer()
    local cur_skill_layer = self:get_cur_skill_layer()
    local is_any_skill_btn_down = self.m_is_skill_btn_down
    
    if (not self.m_is_skill_btn_down) and (target_layer_code ~= cur_skill_layer) then
        -- print("^^^^^^^^^^^^^ show_skill_layer", target_layer_code)
        self:set_cur_skill_layer(target_layer_code)
        self:emit_event_show_skill_layer(target_layer_code)
    end
end

---吴哥原来的
--function M:add_team_member(team_no, member_no, unit)
--    self.m_group = self.m_group or {}
--
--    -- if unit:get_team() ~= nil then
--    --     self.m_group[team_no] = unit:get_team()
--    -- else
--    --     self.m_group[team_no] = self.m_group[team_no] or {}
--    -- end
--
--    self.m_group[team_no] = self.m_group[team_no] or {}
--
--    local team = self.m_group[team_no]
--    team[member_no] = unit
--    unit:set_team(team)
--
--    self:emit_event("add_member", team_no, member_no, unit)
--end
------------------------------
function M:add_npc(unit)
    self.m_npc = unit
end

function M:get_npc()
    return self.m_npc
end

function M:on_skill_btn_swipe_into_cancel_area()
    self.m_unit:set_skill_valid(false)
end

function M:on_skill_btn_swipe_out_cancel_area()
    self.m_unit:set_skill_valid(true)
end

-- 这里控制是否显示交互按钮,同时也定义了显示名称和交互逻辑
function M:show_interact_btn(name, func, callback, frame)
    self.interact_btnfunc = func
    self.interact_frame = frame
    self.interact_func_callback = callback
    self:set_attr_and_event("interact_btn_name", name)

end

-- 这里是执行交互逻辑
function M:on_interact_btn()
    assert(self.interact_btnfunc)
    assert(self.interact_frame)
    
    self.interact_btnfunc(self.interact_frame)
end

function M:set_interact_btn_callback(cb_func)
    self.m_interact_btn_callback = cb_func
end

function M:on_interact()
    if self.m_interact_btn_callback then
        self.m_interact_btn_callback()
    end
end

function M:get_cur_interact_discoverable()
    return self.interact_frame:get_discoverable()
end
-- 采集完成
function M:on_interact_finish(is_success)
    assert(self.interact_func_callback)
    
    self.interact_func_callback(self.interact_frame, is_success)
end

-- 反正这里有就借用一下
function M:get_main_player_unit()
    return self.m_unit
end

-- 获取是否处于交互状态
function M:is_interact_state()
    local b = self.m_unit:is_interact_state()
    return b
end

-- 交互状态下其他操作处理
function M:handle_other_with_interact(is_break)
    local tip = ""
    if is_break == true then
        tip = lang.interact_break
        self:on_interact_finish(false)
        self:set_attr_and_event("interact_btn_time", 0)
    else
        tip = lang.interacting
    end
    self:set_attr_and_event("interact_btn_tip", tip)
    slua_timer.removeTimerEvent(slua_timer.EVENT_LIST.Interact_Tip)
    slua_timer.addTimerEvent(
        slua_timer.EVENT_LIST.Interact_Tip,
        2,
        0,
        function()
            self:set_attr_and_event("interact_btn_tip", "")
        end
)
end

function M:nontarget_List_CallBack(no_list)
    if #no_list == 1 then
        self.m_new_target = no_list[1]
        return true
    else
        self.m_new_target_dist = Vector3.Distance(self.m_unit:get_pos(), no_list[1]:get_pos())
        for k, v in pairs(no_list) do
            local dist = Vector3.Distance(self.m_unit:get_pos(), v:get_pos())
            if dist <= self.m_new_target_dist then
                self.m_new_target_dist = dist
                self.m_new_target = v
            end
        end
        self.m_new_target:set_is_Selected(true)
        return true
    end
    return false
end

--返回True代表在当前的列表中选中了要攻击的目标，如果返回false表示没有选中要攻击的目标
function M:havetarget_List_CallBack(have_list)
    self.m_is_all_selected = false
    local ischoosed = false
    local no_selected_list = {}
    if #have_list == 1 then
        if not have_list[1]:get_is_Selected() then
            self.m_new_target = have_list[1]
            self.m_new_target:set_is_Selected(true)
            return true
        else
            return false
        end
    else
        --self.m_new_target_dist = Vector3.Distance(self.m_unit:get_pos(), have_list[1]:get_pos())
        self.m_is_all_selected = true
        for i = 1, #have_list do
            if have_list[i]:get_is_Selected() ~= true then
                self.m_is_all_selected = false
                no_selected_list[#no_selected_list + 1] = have_list[i]
            end
        end
        if self.m_is_all_selected then
            return false
        end
        self.m_new_target_dist = Vector3.Distance(self.m_unit:get_pos(), no_selected_list[1]:get_pos())
        for _, v in pairs(no_selected_list) do
            if v:get_is_Selected() ~= true then
                local dist = Vector3.Distance(self.m_unit:get_pos(), v:get_pos())
                if dist <= self.m_new_target_dist then
                    self.m_new_target_dist = dist
                    self.m_new_target = v
                    ischoosed = true
                end
            end
        end
        if ischoosed then
            self.m_new_target:set_is_Selected(true)
        end
        return ischoosed
    end
end

function M:have_target_findnext(allList)
    local i = 1
    self.m_selected = false
    while i <= #allList do
        if allList[i][1] > 0 then
            self.m_selected = self:havetarget_List_CallBack(allList[i][2])
            if self.m_selected then
                break
            end
        end
        if i == #allList then
            for _, v in pairs(self.allunitTable) do
                v:set_is_Selected(false)
            end
        end
        i = i + 1
        if i == #allList + 1 then
            i = 1
        end
    end
end


return M
