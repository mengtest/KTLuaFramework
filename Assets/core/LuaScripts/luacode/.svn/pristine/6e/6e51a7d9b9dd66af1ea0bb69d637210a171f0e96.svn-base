local View = require("system.view")
local fashionable_dress_list_view = class("fashionable_dress_list_view", View)

function fashionable_dress_list_view:doInit()
    self.m_ui_manager = app:get_ui_manager()
    self.m_frame = self:getFrame()

    ----是否需要移动
    self.m_need_move = false
    ----移动速度
    self.m_move_speed = 0
    ----移动时间
    self.m_move_time = 0.2
    ---滑动条的值
    self.m_scroll_bar_target_value = 0
    -----按钮列表
    self.m_btn_list = {}
    ----当前选中的按钮
    self.m_curr_selected_btn = nil
    -----开始拖拽的位置
    self.m_drag_begin_pos = nil
    ---结束拖拽的位置
    self.m_drag_end_pos = nil
    ---当前显示出来的card_group
    self.m_current_group = nil
    ---存放卡牌group的列表
    self.m_group_list = {}
    ---在每个分页栏中当前的页码
    self.m_current_page = nil

    self.m_child_frame_list = {}
    self.m_default_card = nil

    self:load(app:getAssetPathMgr().get_ui_view_asset("FashionableDress"), function(go)
        go.transform.localPosition = Vector3.zero
        go.transform.localScale = Vector3.one

        ----存放卡牌的group，每四张卡牌放在一个group中
        self.m_card_group = go.transform:Find("dressing_room/card_group").gameObject
        ----存放时装卡牌组的父物体
        self.m_template_go_fashion = go.transform:Find("dressing_room/scroll_view/viewport/content/fashionable_dress")
        ----存放pve时装卡牌组的父物体
        self.m_template_go_pve = go.transform:Find("dressing_room/scroll_view/viewport/content/pve")
        ----存放pvp时装卡牌组的父物体
        self.m_template_go_pvp = go.transform:Find("dressing_room/scroll_view/viewport/content/pvp")
        ----存放散件时装卡牌组的父物体
        self.m_template_go_parts = go.transform:Find("dressing_room/scroll_view/viewport/content/parts")

        local left_btn_container = go.transform:Find("dressing_room/left_btn_container").transform
        self.m_fashionable_dress_btn = left_btn_container:Find("fashionable_dress_btn"):GetComponent(UI.Button)
        self.m_fashionable_dress_image = left_btn_container:Find("fashionable_dress_image").transform
        self:add_btn_list(self.m_fashionable_dress_btn, self.m_fashionable_dress_image, -303)
        self.m_pendant_btn = left_btn_container:Find("pendant_btn"):GetComponent(UI.Button)
        self.m_pendant_image = left_btn_container:Find("pendant_image").transform
        self:add_btn_list(self.m_pendant_btn, self.m_pendant_image, -423)
        self.m_weapon_btn = left_btn_container:Find("weapon_btn"):GetComponent(UI.Button)
        self.m_weapon_image = left_btn_container:Find("weapon_image").transform
        self:add_btn_list(self.m_weapon_btn, self.m_weapon_image, -543)
        self.m_diy_btn = left_btn_container:Find("diy_btn"):GetComponent(UI.Button)
        self.m_diy_image = left_btn_container:Find("diy_image").transform
        self:add_btn_list(self.m_diy_btn, self.m_diy_image, -663)
        self.m_selected_image = left_btn_container:Find("selected_image").transform
        self.m_drag_area_container = go.transform:Find("dressing_room/scroll_view").gameObject:GetComponent("DragSkill")
        self.m_scroll_bar = go.transform:Find("dressing_room/scroll_view/scrollbar"):GetComponent(UI.Scrollbar)
        local sub_list_parent = go.transform:Find("dressing_room/scroll_view/viewport/content").transform
        self.m_fashionable_dress_btn.onClick:AddListener(function()
            self:click_btn_callback(self.m_fashionable_dress_btn)
        end)

        self.m_pendant_btn.onClick:AddListener(function()
            self:click_btn_callback(self.m_pendant_btn)
        end)

        self.m_weapon_btn.onClick:AddListener(function()
            self:click_btn_callback(self.m_weapon_btn)
        end)

        self.m_diy_btn.onClick:AddListener(function()
            self:click_btn_callback(self.m_diy_btn)
        end)

        self.m_drag_area_container.onBeginDrag = DragSkill_OnBeginDragHandler()
        self.m_drag_area_container.onBeginDrag:AddListener(function(eventdata)
            self.m_drag_begin_pos = eventdata.position
        end)

        self.m_drag_area_container.onEndDrag = DragSkill_OnEndDragHandler()
        self.m_drag_area_container.onEndDrag:AddListener(function(eventdata)
            self.m_drag_end_pos = eventdata.position
            --local scroll_bar_value = self.m_scroll_bar.value
            self:end_drag_call_back(self.m_drag_begin_pos, self.m_drag_end_pos)
        end)

        self:subscribe(self.m_frame:on_event("child_created"), function(child_frame)
            local name = child_frame:getFrameName()
            local param = child_frame:getParam()
            local view = self.m_mgr:getView(name)
            local view_go = view:getGO()
            if string.find(name, "fashion_select_card_one") then
                if param['index'] % 4 == 1 then
                    self:instantiate_card_group(1)
                end
                local parent_transform = self.m_current_group.transform
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end
            if string.find(name, "fashion_select_card_two") then
                if param % 4 == 1 then
                    self:instantiate_card_group(2)
                end
                local parent_transform = self.m_current_group.transform
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end
            if string.find(name, "fashion_select_card_three") then
                if param % 4 == 1 then
                    self:instantiate_card_group(3)
                end
                local parent_transform = self.m_current_group.transform
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end
            if string.find(name, "fashion_select_card_four") then
                if param % 4 == 1 then
                    self:instantiate_card_group(4)
                end
                local parent_transform = self.m_current_group.transform
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end
        end)
        self:subscribe(self.m_frame:on_event("card_click"), function(param)
            for k, v in pairs(self.m_child_frame_list) do
                for i = 1, #v do
                    if v[i] ~= param.frame then
                        v[i]:close_icons()
                    end
                end
            end
        end)
        self.m_frame:on_loaded()
        self.m_child_frame_list = self.m_frame:gain_child_frame_list()
        self:add_value_list()
        self:click_btn_callback(self.m_fashionable_dress_btn)
    end)
end

function fashionable_dress_list_view:doUpdate()
    if self.m_need_move then
        if (math.abs(self.m_scroll_bar.value - self.m_scroll_bar_target_value) < 0.01) then
            self.m_scroll_bar.value = self.m_scroll_bar_target_value
            self.m_need_move = false
            return
        end
        ----在unity中有一个返回值，但是函数的参数有应用类型的参数，所以将引用类型的那个参数作为返回值返回，故有两个参数
        local smoothed_val, move_speed = Mathf.SmoothDamp(self.m_scroll_bar.value, self.m_scroll_bar_target_value, self.m_move_speed, self.m_move_time)
        self.m_scroll_bar.value = smoothed_val
        self.m_move_speed = move_speed
    end
end

------结束拖拽的回调
function fashionable_dress_list_view:end_drag_call_back(begine_pos, end_pos)
    if end_pos.y > begine_pos.y then
        for i = 1, #self.m_btn_list do
            --先找到当前页签
            if self.m_curr_selected_btn == self.m_btn_list[i]["btn"] then
                for j = 1, #self.m_group_list[i] do
                    --找到当前页签中当前显示的页面
                    if self.m_current_page == self.m_group_list[i][j].group then
                        if j < #self.m_group_list[i] then
                            --如果当前页面不是该页签中的最后一页，则切换到下一页
                            self:change_page_call_back(self.m_group_list[i][j + 1].group, self.m_group_list[i][j + 1].value)
                        else
                            --如果当前页面是该页签中的最后一页，并且当前页签不是最后一个，则切换到下一页签
                            if i < #self.m_btn_list then
                                self:click_btn_callback(self.m_btn_list[i + 1]["btn"])
                            end
                        end
                        break
                    end
                end
                break
            end
        end
    elseif end_pos.y < begine_pos.y then
        for i = 1, #self.m_btn_list do
            --先找到当前页签
            if self.m_curr_selected_btn == self.m_btn_list[i]["btn"] then
                for j = 1, #self.m_group_list[i] do
                    --找到当前页签中当前显示的页面
                    if self.m_current_page == self.m_group_list[i][j].group then
                        if j > 1 then
                            --如果当前页面不是该页签中的第一页，则切换到上一页
                            self:change_page_call_back(self.m_group_list[i][j - 1].group, self.m_group_list[i][j - 1].value)
                        else
                            --如果当前页面是该页签中的第一页，并且当前页签不是第一个，则切换到上一页签
                            if i > 1 then
                                self:click_btn_callback(self.m_btn_list[i - 1]["btn"])
                            end
                        end
                    end
                end
                break
            end
        end
    end
end

---点击左侧按钮的回调
function fashionable_dress_list_view:click_btn_callback(press_btn)
    self.m_curr_selected_btn = press_btn
    self:change_btn_to_selected(press_btn)
    self.m_need_move = true
    self.m_move_speed = 0
end

function fashionable_dress_list_view:change_page_call_back(page, value)
    self.m_current_page = page
    self.m_need_move = true
    self.m_move_speed = 0
    self.m_scroll_bar_target_value = value
end

-----按钮高亮
function fashionable_dress_list_view:change_btn_to_selected(press_btn)
    for k, v in pairs(self.m_btn_list) do
        if v["btn"] == press_btn then
            v["btn"].transform.gameObject:SetActive(false)
            v["selected_show"].transform.gameObject:SetActive(true)
            self:selected_image_move(v["pos"])
            self.m_scroll_bar_target_value = v["value"]
            --设置当前显示的页面
            self.m_current_page = self.m_group_list[k][1].group
        else
            v["btn"].transform.transform.gameObject:SetActive(true)
            v["selected_show"].transform.gameObject:SetActive(false)
        end
    end
end

-----向按钮列表中添加内容
function fashionable_dress_list_view:add_btn_list(btn, selected_show, pos)
    self.m_btn_list[#self.m_btn_list + 1] = { ["btn"] = btn, ["selected_show"] = selected_show, ["value"] = 0, ["pos"] = pos, ['group_list'] = nil }
end

function fashionable_dress_list_view:selected_image_move(target)
    ShortcutExtensions.DOLocalMoveY(self.m_selected_image.gameObject.transform, target, 0.6, false)
end

------记录每个分页栏及每一页的value值
function fashionable_dress_list_view:add_value_list()
    local page_count = 0
    --计数器，标识当前遍历到了第几个页面
    local count_index = 1
    for i = 1, #self.m_group_list do
        --获取每个分页栏中的页数
        page_count = page_count + #self.m_group_list[i]
    end
    ----记录每个分页栏中每一页的value值
    for i = 1, #self.m_group_list do
        for j = 1, #self.m_group_list[i] do
            self.m_group_list[i][j].value = 1 / (page_count - 1) * (page_count - count_index)
            count_index = count_index + 1
        end
    end
    ----将每个分页栏中的第一页的value值作为当前分页栏的索引值
    for i = 1, #self.m_btn_list do
        self.m_btn_list[i].value = self.m_group_list[i][1].value
    end
    self.m_current_page = self.m_group_list[1][1].group
    ----设置默认的卡牌，初始就选中
    self.m_default_card = self.m_child_frame_list[1][1]
    ---预加载默认卡牌的场景、模型 temp 临时写法
    --local default_view = self.m_mgr:getView(self.m_default_card:getFrameName())
    --default_view:card_click_call_back()
end

------创建三个分页栏的card_group，并存放起来  传入的参数 index 代表创建的是第几个分页栏的card_group
function fashionable_dress_list_view:instantiate_card_group(index)
    local group_go = Object.Instantiate(self.m_card_group)
    local card_group_parent = self.m_template_go_fashion
    if index == 1 then
        card_group_parent = self.m_template_go_fashion
    elseif index == 2 then
        card_group_parent = self.m_template_go_pve
    elseif index == 3 then
        card_group_parent = self.m_template_go_pvp
    elseif index == 4 then
        card_group_parent = self.m_template_go_parts
    end
    group_go.transform:SetParent(card_group_parent)
    group_go.transform.localPosition = Vector3.zero
    group_go.transform.localScale = Vector3.one
    group_go:SetActive(true)
    if not self.m_group_list[index] then
        self.m_group_list[index] = {}
    end
    self.m_group_list[index][#self.m_group_list[index] + 1] = { ['group'] = group_go, ['value'] = 0 }
    self.m_current_group = group_go
end

function fashionable_dress_list_view:select_default_card()
    local default_view = self.m_mgr:getView(self.m_default_card:getFrameName())
    default_view:card_click_call_back()
end

return fashionable_dress_list_view