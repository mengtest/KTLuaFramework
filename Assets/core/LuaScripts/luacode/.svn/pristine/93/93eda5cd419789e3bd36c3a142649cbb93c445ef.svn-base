local View = require("system.view")
local skill_ui_list_btn_view = class("skill_ui_list_btn_view", View)

function skill_ui_list_btn_view:doInit(param)
    self:loadRes(param)
end

function skill_ui_list_btn_view:loadRes(param)

    self.m_show_list = param

    self:load_prefab("ui/SkillShowList.prefab", function(loaded_go)
        self.m_res_loaded = true
        local template_go = loaded_go.transform:Find("skill_list/grid/frame_image").gameObject
        local go = Object.Instantiate(template_go)

        self:getGO():AddComponent(RectTransform)

        go.transform:SetParent(self:getGO().transform)
        go.transform.localPosition = Vector3(0, 0, 0)
        go.transform.localScale = Vector3.one
        self:initOutlet(go, self:getFrame())

        local go_trsf = go.transform
        go:SetActive(true)
        local frame = self:getFrame()

        self.m_lock_image = go.transform:Find("local_bg"):GetComponent(UI.Image)
        self.m_level_text = go.transform:Find("Text"):GetComponent(UI.Text)
        self.m_up_level_tip = go.transform:Find("level_up_image")
        self.m_skill_item_image = go.transform:Find("skill_item"):GetComponent(UI.Image)
        self.m_selected_image = go.transform:Find("selected_image"):GetComponent(UI.Image)
        self.m_frame_image = go.transform:GetComponent(UI.Image)

        --self:local_log("技能的id为%s", self.m_show_list["id"])
        local icon_path = dbc.spell_client[self.m_show_list["id"]].icon
        --self:local_log("技能的图片路径为%s", icon_path)
        self:subscribe(app:getResMgr():rxLoad(icon_path), function(asset_ref)
            local tex = asset_ref.asset
            if (tex == nil) then
                Debug.LogError("找不到这个icon啊---->" .. icon_path)
            else
                self.m_skill_item_image.sprite = Sprite.Create(tex, Rect(0, 0, tex.width, tex.height), Vector2(0.5, 0.5))
            end
        end)

        -----如果此技能是锁定状态，那么就让它显示锁定的图片以及隐藏技能等级的显示框
        if self.m_show_list["state"] == 0 then
            self.m_lock_image.gameObject:SetActive(true)
            self.m_level_text.gameObject:SetActive(false)
        else
            self:unlocked_show()
        end

        -----根据不同的技能来源显示不同的边框，0显示蓝框  1显示绿  2显示红  其余全部显示为灰
        if dbc.spell_ui[self.m_show_list["id"]].source_type_skill == 0 then
            local path = "ui/Icons/skill/skillshow/skill_2.png"
            self:change_sprite(path)
        elseif dbc.spell_ui[self.m_show_list["id"]].source_type_skill == 1 then
            local path = "ui/Icons/skill/skillshow/skill_3.png"
            self:change_sprite(path)
        elseif dbc.spell_ui[self.m_show_list["id"]].source_type_skill == 2 then
            local path = "ui/Icons/skill/skillshow/skill_4.png"
            self:change_sprite(path)
        else
            local path = "ui/Icons/skill/skillshow/skill_1.png"
            self:change_sprite(path)
        end

        self:subscribe(frame:on_event("unlock_skill"), function(master_info)
            self.m_show_list["max_level"] = master_info[1]["level"]
            self.m_show_list["curr_level"] = master_info[1]["stat"]
            self.m_show_list["state"] = 1
            self:unlocked_show()
        end)

        -----技能提升了当前等级  在这里需要判断，是否和当前可升到的最大等级相等，如果低于..，则还可以再次升级
        self:subscribe(frame:on_event("up_cur_level_skill"), function()
            self.m_show_list["curr_level"] = self.m_show_list["curr_level"] + 1
            if self.m_show_list["curr_level"] < self.m_show_list["max_level"] then
                self:to_up_level_show()
            else
                self:done_up_level_show()
            end
        end)

        self:subscribe(frame:on_event("selected"), function()
            self:selected_show()
        end)

        self:subscribe(frame:on_event("unselected"), function()
            self:unselected_show()
        end)

        local skill_ui_show = self:getFrame("skill_ui_show")
        local skill_ui_list = self:getFrame("skill_ui_list")
        -----技能提升了当前状态可以升到的最大等级
        self:subscribe(frame:on_event("up_max_level_skill"), function()
            self.m_show_list["max_level"] = self.m_show_list["max_level"] + 1
            self:to_up_level_show()
            skill_ui_show:max_level_result(self.m_show_list["max_level"])
        end)

        self:init_level_show()

        ------按下按钮之后通知显示面板显示，将一系列参数传递过去
        local btn = self.m_skill_item_image.gameObject:GetComponent(UI.Button)
        btn.onClick:AddListener(function()
            skill_ui_show:data_list(self.m_show_list)
            self:selected_show()
            skill_ui_list:change_selected_btn(frame)
        end)

    end)
end

function skill_ui_list_btn_view:change_sprite(icon_path)
    self:subscribe(app:getResMgr():rxLoad(icon_path), function(asset_ref)
        local tex = asset_ref.asset
        if (tex == nil) then
            Debug.LogError("找不到这个icon啊---->" .. icon_path)
        else
            self.m_frame_image.sprite = Sprite.Create(tex, Rect(0, 0, tex.width, tex.height), Vector2(0.5, 0.5))
        end
    end)
end

------锁定技能解锁之后的操作
function skill_ui_list_btn_view:unlocked_show()
    self.m_lock_image.gameObject:SetActive(false)
    self.m_level_text.gameObject:SetActive(true)
    self.m_level_text.text = tostring(self.m_show_list["curr_level"])
end

------技能可以升级，但是还没有升级的显示
function skill_ui_list_btn_view:to_up_level_show()
    self.m_level_text.gameObject:SetActive(false)
    self.m_up_level_tip.gameObject:SetActive(true)
end

-----技能升级之后的显示
function skill_ui_list_btn_view:done_up_level_show()
    self.m_up_level_tip.gameObject:SetActive(false)
    self.m_level_text.gameObject:SetActive(true)
    self.m_level_text.text = tostring(self.m_show_list["curr_level"])
end

----技能选中之后的处理
function skill_ui_list_btn_view:selected_show()
    self.m_selected_image.gameObject:SetActive(true)
end

-----技能未选中的处理
function skill_ui_list_btn_view:unselected_show()
    self.m_selected_image.gameObject:SetActive(false)
end

function skill_ui_list_btn_view:init_level_show()
    if self.m_show_list["curr_level"] < self.m_show_list["max_level"] then
        self:to_up_level_show()
    else
        self:done_up_level_show()
    end
end

function skill_ui_list_btn_view:local_log(...)
    --app:logError(string.format(...))
end

return skill_ui_list_btn_view