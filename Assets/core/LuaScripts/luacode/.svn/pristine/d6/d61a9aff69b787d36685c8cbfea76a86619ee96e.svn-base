local Frame = require("system.frame")
local dungeon_manager = class("dungeon_manager", Frame)

-- 副本系统解锁
Event.decl(dungeon_manager, "unlock_dungeon_system")
-- 解锁新副本
Event.decl(dungeon_manager, "unlock_new_dungeon")
-- 创建副本时收到的消息
Event.decl(dungeon_manager, "join_dungeon_first")
-- 请求当前进度
Event.decl(dungeon_manager, "refresh_dungeon_progress")
-- 副本存在的情况下进入副本
Event.decl(dungeon_manager, "join_dungeon")

function dungeon_manager:doInit()
    self.m_ui_manager = app:get_ui_manager()
    -- 所有副本的id，这是一个列表
    self.m_dungeon_list = {}
    -- 所有副本的可以用到的信息，这是一个字典，以id为键
    self.m_dungeon_dic = {}
    -- 副本的总表
    self.m_dungeon_info_dic = {}
    -- 副本的进度
    self.m_dungeon_progress = {}
    -- 副本的Boss拾取进度
    self.m_drag_progress = {}
    -- 当前副本的id
    self.m_dungeon_id = nil
    -- 请求查看的副本id
    self.m_req_dungeon_id = nil

    for k, v in pairs(dbc.instances) do
        self.m_dungeon_info_dic[k] = v
    end
end

function dungeon_manager:init()
    self:req_unlock_dungeon_list()
end

--------------------  client  to  server  begin

-- 向服务器请求解锁列表
function dungeon_manager:req_unlock_dungeon_list()
    self:base_call("req_unlock_instances")
end

-- 向服务器请求副本的进度
function dungeon_manager:req_req_kill_pro_for_diff_sel(id)
    self.m_req_dungeon_id = id
    self:cell_call("req_kill_pro_for_diff_sel", id)
end

-- 向服务器请求匹配
function dungeon_manager:req_match_instance(is_random_matching, diff_type, dungeon_id)
    self:base_call("req_match_instance", is_random_matching, diff_type, dungeon_id)
end

-- 向服务器请求停止匹配
function dungeon_manager:req_pause_instance()
    self:base_call("req_pause_instance")
end

-- 向服务器发送要进入的副本id
function dungeon_manager:req_enter_instance(ret_id)
    self:base_call("req_enter_instance", ret_id)
end

-- 向服务器发送离开副本
function dungeon_manager:req_leave_dungeon()
    self:base_call("req_leave_instance")
end

-- 向服务器发送重置副本
function dungeon_manager:req_close_instance(dungeon_id)
    self:base_call("req_close_instance", dungeon_id)
end

-- 确认进入副本
function dungeon_manager:accept_enter_instance(dungeon_id)
    self:base_call("accept_enter_instance", dungeon_id)
end

--------------------  client  to  server  end  --------------------



--------------------  server  to  client  begin

-- 服务器返回解锁列表
function dungeon_manager:accept_unlock_dungeon_list(unlock_dungeon_list)

    for i, v in ipairs(unlock_dungeon_list) do
        self.m_dungeon_list[i] = v
    end

    if #self.m_dungeon_list > 0 then
        self:emit_event("unlock_dungeon_system")
    end
    -- 维护客户端的一个字典来存储副本的信息
    for k, v in pairs(self.m_dungeon_list) do
        local in_map_id = dbc.instances[v].inst_map_id
        local level_name = dbc.instances[v].diff_name
        local data = { ["map_id"] = in_map_id, ["level_name"] = level_name }
        self.m_dungeon_dic[v] = data
    end
end

-- 接受服务器反回的地图id结果
function dungeon_manager:accept_dungeon_diff_result(acc_map_id)
    --这里是返回了一个地图的map_id，要在总的表中根据map_id找出对应的id，再找出此副本所拥有的难度类型，
    local curr_map_level_list = {}
    for k, v in pairs(self.m_dungeon_info_dic) do
        if v.inst_map_id == acc_map_id then
            curr_map_level_list[k] = v.diff_name
        end
    end

    -- 之后再从已经解锁的表当中来确定哪些难度可以进入，哪些难度不可以进入，这个主要用来判断按钮变灰，是否可以点击
    -- 本map_id对应的难度list，在值中1表示普通，2表示英雄，3表示史诗，4表示秘境
    local open_diff_list = {}
    for k, v in pairs(curr_map_level_list) do
        if v == "普通" then
            open_diff_list[1] = { ["level"] = 1, ["ret_id"] = k, ["state"] = 0 }
        elseif v == "英雄" then
            open_diff_list[2] = { ["level"] = 2, ["ret_id"] = k, ["state"] = 0 }
        elseif v == "史诗" then
            open_diff_list[3] = { ["level"] = 3, ["ret_id"] = k, ["state"] = 0 }
        elseif v == "秘境" then
            open_diff_list[4] = { ["level"] = 4, ["ret_id"] = k, ["state"] = 0 }
        end
    end

    for k, v in pairs(self.m_dungeon_dic) do
        if v["map_id"] == acc_map_id then
            if v["level_name"] == "普通" then
                open_diff_list[1]["state"] = 1
            elseif v["level_name"] == "英雄" then
                open_diff_list[2]["state"] = 1
            elseif v["level_name"] == "史诗" then
                open_diff_list[3]["state"] = 1
            elseif v["level_name"] == "秘境" then
                open_diff_list[4]["state"] = 1
            end
        end
    end
    -- 触发打开dunjeon_join面板
    self:create_dungeon_join(open_diff_list)
end

-- 解锁新副本
function dungeon_manager:accept_unlock_new_dungeon(dungeon_id)
    self:do_add_dungeon(dungeon_id)
end

-- 被拉入副本时服务器传来时间和当前副本的进度
function dungeon_manager:accept_dungeon_time_and_progress(time, progress_arry, drag_arry)
    self.m_dungeon_progress = progress_arry
    -- 抛出进入副本的事件
    self.m_drag_progress = drag_arry
    self:emit_event("join_dungeon_first", time, progress_arry, drag_arry)
end

-- 当打开副本地图的时候向服务器请求，服务器返回副本的进度的回调
function dungeon_manager:accept_dungeon_progress(progress_arry)
    self.m_dungeon_progress = progress_arry
    self:emit_event("refresh_dungeon_progress", progress_arry)
end

-- 接受进入副本时同步副本已经进行了多少秒，这个协议只有副本已经存在并且重新进入副本的时候才会收到
function dungeon_manager:accept_dungeon_time(time)
    self:emit_event("join_dungeon", time)
end

-- 当副本已经存在的时候撞门会弹出进度板，此进度板会有重置的功能
function dungeon_manager:accept_dungeon_reset_and_progress(id, progress_arry, drag_arry, reset)
    self.m_dungeon_id = id
    self.m_dungeon_progress = progress_arry
    self.m_drag_progress = drag_arry
    self:create_dungeon_reset(id, progress_arry, drag_arry, reset)
end

-- 在难度选择的时候，以及进入副本的时候会去查看副本进度  这里第一个参数传回的是副本的战斗点，在instance表中  需要将其转化为boss的id，对应外部的弹板接口
function dungeon_manager:accept_resp_kill_pro_for_diff_sel(progress_arry, drag_arry)
    local send_list = {}
    for i, v in ipairs(progress_arry) do
        if v == dbc.instance[self.m_req_dungeon_id].dungeon_battle_pro[i] then
            send_list[i] = dbc.instance[self.m_req_dungeon_id].progresses[i]
        end
    end
    self.m_drag_progress = drag_arry
    local frame_mgr = self:getFrameMgr()
    if frame_mgr:getFrame("dungeon_join") ~= nil then
        self.m_ui_manager:HideView("dungeon_join")
    end
    self:create_dungeon_confirm_progress(send_list, drag_arry)
end

--------------------  server  to  client  end  --------------------



--------------------  client  local  begin

-- 向副本的列表中添加新解锁的副本id
function dungeon_manager:do_add_dungeon(dungeon_id)
    if #self.m_dungeon_list == 0 then
        self:emit_event("unlock_dungeon_system")
    end
    -- 向副本列表中添加
    self.m_dungeon_list[#self.m_dungeon_list + 1] = dungeon_id

    -- 向副本字典中添加
    local map_id = dbc.instances[dungeon_id].inst_map_id
    local level_name = dbc.instances[dungeon_id].diff_name
    local data = { ["map_id"] = map_id, ["level_name"] = level_name }
    self.m_dungeon_dic[dungeon_id] = data
    self:emit_event("unlock_new_dungeon", dungeon_id)
end

-- 根据服务器传回的时间来判断是否需要生成时间的显示
function dungeon_manager:create_dungeon_stop_time(time)
    local kbe_mgr = self:getFrame("kbe.kbe_mgr")
    local sdk = app:getKBESDK()
    local role_id = sdk:get_player_id()
    local role = kbe_mgr:get_entity(role_id)
    local id = role:get_inst_id()
    if id == nil then
        return
    elseif id <= 0 then
        return
    end
    local prepare_time = dbc.instances[id].prepare_time
    if prepare_time > time then
        local show_time = prepare_time - time
        self.m_ui_manager:CreateUI("dungeon_stop_time", "dungeon.dungeon_stop_time", show_time, self.m_ui_manager.UI_Depth.HIGH)
    end
end

-- 副本的进度页面
function dungeon_manager:create_dungeon_confirm_progress(progress_array, drag_array)
    self.m_ui_manager:CloseLowUIRootByName(self.m_ui_manager.UI_Depth.HIGH)
    -- 暂时注释
    if #drag_array <= 0 then
        -- return
    end
    local arr = {}
    arr["progress_array"] = progress_array
    arr["drag_array"] = drag_array
    self.m_ui_manager:CreateUI("dungeon_confirm_progress", "dungeon.dungeon_confirm_progress", arr, self.m_ui_manager.UI_Depth.HIGH)
end

-- 副本进入页面
function dungeon_manager:create_dungeon_join(open_diff_list)
    self.m_ui_manager:CloseLowUIRootByName(self.m_ui_manager.UI_Depth.HIGH)
    self.m_ui_manager:CreateUI("dungeon_join", "dungeon.dungeon_join", open_diff_list, self.m_ui_manager.UI_Depth.HIGH)
end

-- 副本的重置界面
function dungeon_manager:create_dungeon_reset(id, progress_arry, drag_arry, reset)
    self.m_ui_manager:CloseLowUIRootByName(self.m_ui_manager.UI_Depth.HIGH)
    local ret = {}
    ret["dungeon_id"] = id
    ret["progress_arry"] = progress_arry
    ret["drag_arry"] = drag_arry
    ret["reset"] = reset
    self.m_ui_manager:CreateUI("dungeon_reset", "dungeon.dungeon_reset", ret, self.m_ui_manager.UI_Depth.HIGH)
end

-- 返回请求进度的副本id
function dungeon_manager:gain_req_dungeon_id()
    return self.m_req_dungeon_id
end

-- 获取当前副本的进度
function dungeon_manager:gain_dungeon_progress()
    local progress = self.m_dungeon_progress
    return progress
end

-- 获取当前的主角所在的副本id
function dungeon_manager:gain_inst_id()
    local kbe_mgr = self:getFrame("kbe.kbe_mgr")
    local sdk = app:getKBESDK()
    local role_id = sdk:get_player_id()
    local role = kbe_mgr:get_entity(role_id)
    local id = role:get_inst_id()
    return id
end

-- 外界获取副本列表
function dungeon_manager:gain_unlock_dungeon_list()
    local ret = {}
    for k, v in pairs(self.m_dungeon_list) do
        ret[k] = v
    end
    return ret
end

-- 外界获取获取已解锁副本的个数
function dungeon_manager:gain_unlock_dungeon_length()
    return #self.m_dungeon_list
end

function dungeon_manager:base_call(method_name, ...)
    local kbesdk = app:getKBESDK()
    local player_id = kbesdk:get_player_id()
    kbesdk:entity_base_call(player_id, method_name, ...)
end

function dungeon_manager:cell_call(method_name, ...)
    local kbesdk = app:getKBESDK()
    local player_id = kbesdk:get_player_id()
    kbesdk:entity_cell_call(player_id, method_name, ...)
end

function dungeon_manager:local_log(...)
    -- app:logError(string.format(...))
end

--------------------  client  local  end  --------------------

return dungeon_manager