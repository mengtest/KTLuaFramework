-- 角色行为状态 技能
local require_relative = REQUIRE_BASE(...)
local UnitActStateBase = require_relative("ua_state_base")
-- 在initialize中初始化，避免交叉require死循环
local UAFsm = nil
local Unit = nil

local M = class("UnitActStateSkillSing", UnitActStateBase)

function M:initialize(fsm, unit)
    UnitActStateBase.initialize(self, fsm, unit)

    UAFsm = require_relative("ua_state_machine")
    Unit = require "frame.unit"
end

function M:enter()
    --print("UnitActStateSkillSing:enter")
    UnitActStateBase.enter(self)

    self.m_unit:set_main_act(UAFsm.MAIN_ACT.SKILL_SING)
    self.m_unit:set_anim_trigger("sing")
    -- 计算状态剩余时间，日后会改从服务器获取
    -- cast_time 改为从skill_data获取
    local duration = self.m_unit:get_skill(self.m_unit:get_skill_id()):get_cast_time() 
    assert(duration ~= nil, string.format("fail to get sing time of %d", self.m_unit:get_skill_id()))

    local server_time = app:get_server_time()
    self.m_end_time = server_time + duration
    self.m_unit:set_skill_sing_start_time(server_time)
    self.m_unit:set_skill_sing_end_time(self.m_end_time)
end


function M:exit()
     --print("UnitActStateSkillSing:exit")
    UnitActStateBase.exit(self)
end


function M:update()

    --print("UnitActStateSkill:update")
    UnitActStateBase.update(self)

    local cc = self.m_unit:get_cc()
    if cc == nil then
        return
    end

    -- 新增需求吟唱时可以移动，而且会立即打断
    local move_state = self.m_unit:get_move_state()

    if(move_state ~= Unit.MOVE_STATE.IDLE) then
        self:finish_sing(Enum_Battle.Sing_Finish.CANCEL)
        return
    end


    local server_time = app:get_server_time()

    --------------------
    -- 结束施法
    if self.m_end_time <= server_time then
        self:finish_sing(Enum_Battle.Sing_Finish.FINISH)
        return
    end

end

function M:finish_sing(val)
    self.m_fsm:change_state(UAFsm.MAIN_ACT.MOVE)
    self.m_unit:on_skill_sing_state_exit(self.m_unit:get_skill_id(),val)
end

function M:change_move_state(move_state)
    self.m_unit:set_move_state(move_state)
end

return M
