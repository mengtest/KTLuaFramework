local Camera = require "system.camera"
local Trigger_component = require("subsystem.component.trigger_component")

local World = {}

Event.decl(World, "add_unit")
Event.decl(World, "del_unit")

Event.decl(World, "add_linghunsuipian")
Event.decl(World, "del_linghunsuipian")

Event.decl(World, "create_new_vhcl")
Event.decl(World, "vhcl_travel_obejct")

-- Event.decl(World, "add_interact_obj")
-- Event.decl(World, "del_interact_obj")

Attribute.decl(World, "map_id", 0)
Attribute.decl(World, "map_loaded", false)
Attribute.decl(World, "spawn_pos")
Attribute.decl(World, "area_pic",nil) -- by lijunfeng 2018/3/3 区域映射图

--需要在世界里记录一个主角乘载的车辆信息
Attribute.decl(World, "main_player_vhcl_type")

Event.decl(World, "boss_show")

Event.decl(World, "out_dungeon")

Event.decl(World, "camera_animation")

function World:doInit()
    self.m_unit_map = {}
    self.m_interact_map = {}
    self.m_object_map = {}
    self.m_giver_map = {}
    self.m_giver_map_tid = {}
    -- 灵兽列表
    self.m_spirit_list = {}
    self.m_merchant_map = {}
    self.m_drop_item_map = {}

    --玩家列表，为了通过dbid获取unit key：dbid  value：unit   by xjl 2018.3.5
    self.m_player_map = {}

    self.m_cam = Camera:new()
    -- rjy 2017.12.15专门播放相机动画的相机
    self.m_anim_cam = nil
    self:create_animation_camera()

    self.m_change_map_callback = {}
    self.m_main_player_unit = nil
    self.m_scene_data_list = {}     -- 目前暂时缓存读取到的场景数据表，因为不确定之后客户端是否还需要用到其中的数据。如果日后确定客户端除了触发器之外无需其它数据，则可以不再进行缓存。
    self.m_area_data_list = {}      -- 与当前场景相关的触发区域数据
    self.m_trigger_cmp_dict = {}    -- Trigger_component字典
    self.m_trigger_go_dict = {}     -- Trigger_go字典
    self.m_area_id_map={}           --by lijunfeng 2018/3/3 区域映射字典

    self.areaIndicatorObject = {}
    self.is_map_id = 0
    self.m_map_info=nil --by lijunfeng 2018/3/5 当前地图大小

    --lhd 同步载具
    self.vhecl_handle = nil

    -- pacman 2017-12-29 下面两个事件好像是一回事吧？
    self:subscribe(
    self:on_event_attr_set("map_loaded"),
    function(val)
        print("切换地图", val)
        if (val == true) then
            self:change_map(self:get_map_id())
            self:on_map_loaded()
        else
            self:on_map_unloaded()
        end
    end
    )

end

-- rjy 2017.12.15专门播放相机动画的相机
function World:getAnimationCamera()
    return self.m_anim_cam
end

function World:create_animation_camera()
    self.m_anim_cam = GameObject("Animation Camera")
    self.m_anim_cam:AddComponent(UnityEngine.Camera)

    self.m_anim_component = self.m_anim_cam:AddComponent(UnityEngine.Animator)
    local animation_path = app:getAssetPathMgr().get_world_resource('camera_controller')
    self:subscribe(app:getResMgr():rxLoad(animation_path), function(asset)
        local anim = asset
        if (anim == nil) then
            Debug.LogError("找不到这个runtimeAnimatorController啊---->" .. animation_path)
        else
            self.m_anim_component.runtimeAnimatorController = anim
        end
    end)
    self.m_anim_cam:SetActive(false)
end
function World:rec_camera_animation(id)
    self:emit_event("camera_animation", id)
end
function World:rec_screen_shake(id)
    self.m_cam:screen_shake(id)
end
function World:on_map_loaded()
    self:construct_area_data(self:get_map_id())
    self:getFrame("quest_manager"):init()
    self:getFrame("team_manager"):init()
    self:getFrame("dungeon_manager"):init()
    self:getFrame("skill_ui_manager"):init()
    self:getFrame("inventory_manager"):init()
    self:getFrame("matching_manager"):init()
    self:init_scene_music()
    self:init_warp_gate()
    --self:init_giver_state()

    Event_system:dispatch_event(EVENT_SCENE_LOADED, self)
end

function World:on_map_unloaded()
    Event_system:dispatch_event(EVENT_SCENE_UNLOADED, nil)
end

function World:get_scene_data(map_id)
    if (map_id == nil) then
        map_id = self:get_map_id()
    end

    if not self.m_scene_data_list[map_id] then
        local map_tbl = dbc.map[map_id]
        if not map_tbl then
            return
        end
        local map_name = map_tbl.map_file
        map_name = string.gsub(map_name, "^res/map", "tables/scene")
        map_name = string.gsub(map_name, ".json$", "")
        map_name = string.gsub(map_name, "[/]", ".")
        self.m_scene_data_list[map_id] = require(map_name)
    end
    return self.m_scene_data_list[map_id]
end

--加载完构建数据
function World:construct_area_data(map_id)
    local scene_data = self:get_scene_data(map_id)
    if not scene_data then
        return
    end
    local area_data = scene_data["patrolAreas"]
    self.m_area_data_list = {}
    for _, area in pairs(area_data) do
        --local index = tonumber(utility.string:split_to_arr(area.addr, "##")[2]) + 1
        local index = area.id
        if self.m_area_data_list[index] then
            app:logError("区域id重复，重复id: " .. index)
        end

        local worldPosition = Vector3(area.worldPosition.x, area.worldPosition.y, area.worldPosition.z)
        local worldRotation = Quaternion(area.worldRotation.x, area.worldRotation.y, area.worldRotation.z, area.worldRotation.w)
        local localScale = Vector3(area.localScale.x, area.localScale.y, area.localScale.z)
        local radius = area.radius
        local temp_area_data = {
            ["worldPosition"] = worldPosition,
            ["worldRotation"] = worldRotation,
            ["localScale"] = localScale,
            ["radius"] = radius,
        }
        self.m_area_data_list[index] = temp_area_data
    end

    local data=dbc.map[map_id]
    if not data then
        return
    end

    --by lijunfeng 2018/3/3 解析区域映射配置
    if data.area_id_map and data.area_id_map~="" then
        self.m_area_id_map=utility.string:parse_to_dict(data.area_id_map) --每次都清理
        print("解析完区域映射字典",data.area_id_map)
    end
    --by lijunfeng 2018/3/5
    local x,y,width,height=self:get_map_size_info(map_id)
    self.m_map_info={x=x,y=y,width=width,height=height}
    print("保存当前地图区域信息",x,y,width,height)
end

function World:get_area_data(map_id, area_id)
    if self:get_map_id() ~= map_id then
        return
    end
    return self.m_area_data_list[area_id]
end

function World:register_area_trigger_enter_func(map_id, area_id, func)
    local trigger_component = self:create_trigger(map_id, area_id)
    if trigger_component then
        return trigger_component.on_trigger_enter:add(func)
    else
        return false
    end
end

function World:register_area_trigger_exit_func(map_id, area_id, func)
    local trigger_component = self:create_trigger(map_id, area_id)
    if trigger_component then
        trigger_component.on_trigger_exit:add(func)
        return true
    else
        return false
    end
end

function World:unregister_area_trigger_enter_func(map_id, area_id, func)
    if map_id ~= self:get_map_id() then
        return
    end

    local trigger_component = self.m_trigger_cmp_dict[area_id]
    if trigger_component then
        trigger_component.on_trigger_enter:remove(func)
    end
    if trigger_component.on_trigger_enter:count() == 0 and trigger_component.on_trigger_exit:count() == 0 then
        self:destroy_trigger(area_id)
    end
end

function World:unregister_area_trigger_exit_func(map_id, area_id, func)
    if map_id ~= self:get_map_id() then
        return
    end

    local trigger_component = self.m_trigger_cmp_dict[area_id]
    if trigger_component then
        trigger_component.on_trigger_exit:remove(func)
    end
    if trigger_component.on_trigger_exit:count() == 0 and trigger_component.on_trigger_enter:count() == 0 then
        self:destroy_trigger(area_id)
    end
end

-- private
function World:create_trigger(map_id, area_id)
    if map_id ~= self:get_map_id() then
        return nil
    end

    local trigger_component = self.m_trigger_cmp_dict[area_id]
    if not trigger_component then
        local area_data = self:get_area_data(map_id, area_id)
        if not area_data then
            return nil
        end

        local param = {
            ["x"] = area_data.radius,
            ["y"] = area_data.radius,
            ["z"] = area_data.radius,
        }
        local trigger_go = GameObject("Area_Trigger_" .. tostring(area_id))
        trigger_go.transform.position = area_data.worldPosition
        trigger_go.transform.rotation = area_data.worldRotation
        trigger_go.transform.localScale = area_data.localScale
        trigger_component = Trigger_component:new()
        trigger_component:set_go(trigger_go)
        trigger_component:set_area_type_and_param(enum.scene.Trigger_Area.Box, param)
        trigger_component.on_trigger_condition = function(other)
            local tag = other.gameObject.tag
            if tag == "Player" then
                return true
            end
            return false
        end
        self.m_trigger_cmp_dict[area_id] = trigger_component
        self.m_trigger_go_dict[area_id] = trigger_go
        trigger_component:start()
    end
    return trigger_component
end

-- private
function World:destroy_trigger(area_id)
    local trigger_component = self.m_trigger_cmp_dict[area_id]
    if trigger_component then
        trigger_component:destroy()
        self.m_trigger_cmp_dict[area_id] = nil
    end
    local trigger_go = self.m_trigger_go_dict[area_id]
    if trigger_go then
        Object.Destroy(trigger_go)
        self.m_trigger_go_dict[area_id] = nil
    end
end

function World:init_scene_music()
    local map_id = self:get_map_id()
    local data = dbc.map[map_id]

    -- 默认背景音乐
    if data.background_music ~= self.m_cur_bgm_id then
        if self.m_cur_bgm_id ~= nil then
            app:get_sound_mgr():destroy(self.m_cur_bgm_mgr_id)
        end
        self.m_cur_bgm_mgr_id = app:get_sound_mgr():create(data.background_music)
        self.m_cur_bgm_id = data.background_music
    end

    -- pacman 2017-12-25 触发区域切换背景音乐
    local switch_bgm_list = utility.string:parse_to_list(data.switch_bgm)
    for _, switch_bgm_info in pairs(switch_bgm_list) do
        for trigger_area_id, bgm_id in pairs(switch_bgm_info) do
            --print(trigger_area_id, bgm_id)
            self:register_area_trigger_enter_func(map_id, trigger_area_id, function()
                if self.m_cur_bgm_id ~= bgm_id then
                    app:get_sound_mgr():destroy(self.m_cur_bgm_mgr_id)
                    self.m_cur_bgm_mgr_id = app:get_sound_mgr():create(bgm_id)
                    self.m_cur_bgm_id = bgm_id
                end
            end)
        end
    end

    -- 区域音乐(进入区域开启，离开区域关闭)
    local area_music_list = utility.string:parse_to_list(data.area_music)
    for _, music_info in pairs(area_music_list) do
        for area_id, area_sound_id in pairs(music_info) do
            local sound_id = -1
            self:register_area_trigger_enter_func(map_id, area_id, function()
                sound_id = app:get_sound_mgr():create(area_sound_id)
            end)
            self:register_area_trigger_exit_func(map_id, area_id, function()
                app:get_sound_mgr():destroy(sound_id)
            end)
        end
    end
end

function World:init_warp_gate()
    local map_id = self:get_map_id()
    local data = dbc.map[map_id]

    local warp_gate_lsit = utility.string:parse_to_list(data.area_change_map)
    for _, gata_info in pairs(warp_gate_lsit) do
        for area_id, aim_map_id in pairs(gata_info) do
            self:register_area_trigger_enter_func(map_id, area_id, function()
                local sdk = app:getKBESDK()
                sdk:entity_cell_call(sdk:get_player_id(), "req_change_map", aim_map_id)
            end)
        end
    end
end

-- by lijunfeng 2018/2/28 获取地图配置文件
function World:get_map_info()
    local map_id = self:get_map_id()
    local map_lua_file_path = string.format("tables.scene.%s", dbc.map[map_id].res_client)
    local map_lua_file = require(map_lua_file_path)
    return map_lua_file
end
-- by lijunfeng 2018/2/28 获取区域信息
function World:get_patrol_area_by_id(id)
    local map_lua_file = self:get_map_info()

    for k, v in ipairs(map_lua_file.patrolAreas) do
        if v.id == id then
            return v
        end
    end

    return nil
end

--by lijunfeng 2018/3/3 获取地图大小
function World:get_map_size_info(map_id)
    local data=dbc.map[map_id]
    local left_bottom_x,left_bottom_y,right_top_x,right_top_y=tonumber(data.left_bottom[1]),tonumber(data.left_bottom[2]),tonumber(data.right_top[1]),tonumber(data.right_top[2])
    return left_bottom_x,left_bottom_y,right_top_x-left_bottom_x,right_top_y-left_bottom_y
end

--by lijunfeng 2018/3/3 判断在哪个地图区域内
--当前地图id，玩家坐标
--返回区域id
--必须保证区域映射图加载完毕
function World:get_area_id_in_map(x,y)
    local px,py=x-self.m_map_info.x,y-self.m_map_info.y --计算坐标在地图上的相对坐标，用于读取图片颜色
    local scale_x,scale_y=self:get_area_pic().width/self.m_map_info.width,self:get_area_pic().height/self.m_map_info.height
    local pic_x,pic_y=Mathf.CeilToInt(px*scale_x),Mathf.CeilToInt(py*scale_y)

    if pic_x>self:get_area_pic().width or pic_x<0 or pic_y>self:get_area_pic().height or pic_y<0 then
        print("超出映射图范围")
        return
    end

    local color=self:get_area_pic():GetPixel(pic_x,pic_y)
    --print("图片信息",self:get_area_pic().width,self:get_area_pic().height,pic_x,pic_y,color)
    local flag,area_id=utility.table:is_contain(self.m_area_id_map,tostring(ColorUtility.ToHtmlStringRGB(color)))
    --print("玩家当前相对位置",area_id,px,py,ColorUtility.ToHtmlStringRGB(color))
    return flag and area_id or -1
end

local function node_name(name, id)
    return string.format(name .. "-%d", id)
end

--[[ unit  start ]]

function World:setSkillIndicator(skill_id, self_pos, self_dir, target_pos, boss_id, cast_time)
    self:emit_event("set_skill_indicator", skill_id, self_pos, self_dir, target_pos, boss_id, cast_time)
end


function World:check_unit_vhcl_type(unit)
    if unit:get_is_role() then
        print(unit:get_unit_kbeFrame():get_vhcl())
        if unit:get_unit_kbeFrame():get_vhcl() == 1 then
            self:emit_event("vhcl_travel_obejct", unit)
            unit:set_sync_vhcl_type(1)
        end
    end
    if unit:getCfg().id == 600008 then
        --等关卡编辑加入公共载具选项后安Type判断
        self:emit_event("create_new_vhcl", unit)
    end
end


function World:addUnit(id, type, name, pos, is_role, is_main_player, role)
    --print("~~~~~~~~~~~", is_role, "~~~~~~~~~~~")
    assert(self.m_unit_map[id] == nil, id)
    local m_add_unit = nil
    local cfg = dbc.creature[type]

    if (m_add_unit == nil) then
        m_add_unit = self:createChild(
        node_name("unit", id),
        "unit",
        {
            id = id,
            type = type,
            name = name,
            cfg = cfg,
            pos = pos,
            is_role = is_role,
            is_main_player = is_main_player,
            role = role
        }
        )
        if (is_main_player == true) then
            self.m_main_player_unit = m_add_unit
            self:set_main_player_vhcl_type(role:get_vhcl())
        end
        self:check_unit_vhcl_type(m_add_unit)
    end
    self.m_unit_map[id] = m_add_unit
    if m_add_unit:get_dbid() then
        self.m_player_map[m_add_unit:get_dbid()] = m_add_unit
    end

    self:emit_event("add_unit", id, m_add_unit)
    return m_add_unit
end

function World:delUnit(id)
    --print("-----> delUnit", id)
    local unit = self.m_unit_map[id]
    assert(unit ~= nil)

    if unit:get_dbid() then
        self.m_player_map[unit:get_dbid()] = nil
    end
    self.m_unit_map[id] = nil

    self:emit_event_del_unit(id, unit)

    if (unit:getCfg().unit_type == enum.unit.UnitType.TOTEM) then
        -- 临时打个补丁 图腾不要立即删除
        slua_timer.addDelayEvent(5, function()
            self:destroyChild(unit)
        end)
    else
        self:destroyChild(unit)
    end


    --  2018-02-24 当unit消失时  将target_unit 置空 by:wdd
    local player_controller = app:getFrameMgr():getFrame("player_controller")
    if player_controller ~= nil then
        local target_unit = player_controller:get_target_unit()
        if target_unit then
            if (target_unit:get_id() == id) then
                player_controller:set_target_unit(nil)
            end
        end
    end
    -- 删除灵兽
    self:del_spirit_beast(unit)
end

function World:getUnit(id)
    return self.m_unit_map[id]
end

function World:getUnitByDBID(dbid)
    return self.m_player_map[dbid]
end

-- rjy 2018.01.06 灵兽
function World:add_spirit_beast(unit, id)
    local param = { unit = unit, id = id }

    for i, v in pairs(self.m_spirit_list) do
        if i == unit:get_id() then
            self:destroyChild(v)
            self.m_spirit_list[i] = nil
        end
    end
    --if self.m_pet then
    --    self:destroyChild(self.m_pet)
    --    self.m_pet = nil
    --end
    local spirit = self:createChild("pet_" .. unit:get_id() .. "_" .. id, "spirit_beast.spirit_beast", param)
    self.m_spirit_list[unit:get_id()] = spirit
end

function World:del_spirit_beast(unit)
    --print("走的删除？？？？？")
    if utility.table:count(self.m_spirit_list) > 0 then
        for i, v in pairs(self.m_spirit_list) do
            if i == unit:get_id() then
                self:destroyChild(v)
                self.m_spirit_list[i] = nil
            end
        end
    end
end

function World:add_giver(giver, pos)
    local temp_giver = self:createChild(node_name("giver", giver:get_id()), "giver", {
        pos = pos,
        giver = giver,
    })
    self.m_giver_map[giver:get_tmpl()] = temp_giver
    self.m_unit_map[giver:get_id()] = temp_giver
end

-- add by lijunfeng 2017/12/14
function World:add_mob_giver(id, tid, name, pos, is_role, is_main_player, role)
    assert(self.m_unit_map[id] == nil, id)
    local cfg = dbc.creature[tid]
    local temp_giver = self:createChild(node_name("mob_giver", id), "mob_giver", {
        id = id,
        tid = tid,
        type = tid,
        name = name,
        cfg = cfg,
        pos = pos,
        is_role = is_role,
        is_main_player = is_main_player,
        role = role
    })

    print("添加mob giver tid=", tid)
    self.m_giver_map_tid[tid] = temp_giver
    self.m_giver_map[id] = temp_giver
    self.m_unit_map[id] = temp_giver
    temp_giver:set_is_in_world(true)--by lijunfeng 2018/1/22     标记frame是否加入world列表

    return temp_giver
end
-- add by lijunfeng 2017/12/14
function World:del_mob_giver(id)
    --print("-----> del_mob_giver", id)

    local unit = self.m_unit_map[id]
    assert(unit ~= nil)

    self.m_giver_map_tid[unit:get_tid()] = nil
    self.m_unit_map[id] = nil
    self.m_giver_map[id] = nil
    self:emit_event_del_unit(id, unit)
    self:destroyChild(unit)
end
-- add by lijunfeng 2017/12/18
function World:del_mob_giver_by_tid(tid)
    --print("-----> del_mob_giver_by_tid", tid)
    local unit = self.m_giver_map_tid[tid]
    assert(unit ~= nil)
    local id = unit:get_id()
    self.m_giver_map_tid[tid] = nil
    self.m_unit_map[id] = nil
    self.m_giver_map[id] = nil
    self:emit_event_del_unit(id, unit)
    self:destroyChild(unit)
end
-- add by lijunfeng 2017/12/18
function World:get_giver_by_tid(tid)
    return self.m_giver_map_tid[tid]
end
-- add by lijunfeng 2018/1/31
function World:get_giver_list()
    return self.m_giver_map_tid
end

function World:del_giver(id)
    local giver = self.m_giver_map[id]
    if giver then
        self.m_giver_map[id] = nil
        self:destroyChild(giver)
    end
end

function World:get_giver(id)
    return self.m_giver_map[id]
end

function World:getFirstUnitByType(type)
    for i, j in pairs(self.m_unit_map) do
        if (j:get_type() == type) then
            return j
        end
    end
end

function World:getNearestUnit(unit)
    local distList = {}

    for k, v in pairs(self.m_unit_map) do
        if v ~= unit then
            distList[#distList + 1] = { id = k, dist = Vector3.Distance(unit:get_pos(), v:get_pos()) }
        end
    end

    if #distList == 0 then
        return nil
    end

    table.sort(
    distList,
    function(a, b)
        return a.dist < b.dist
    end
    )
    return self.m_unit_map[distList[1].id]
end

--获取在指定unit40米范围内的其他unit
-- pacman 2017-11-30 加入【是否在玩家屏幕内】开关
-- pacman 2018-02-01 加入【不包含友方目标】开关
-- todo 如果筛选条件继续增加就搞个条件bitmask
function World:getDisUnit(unit, range, must_inside_main_camera, exclude_friend)

    local battle_mgr = app:getBattleMgr()
    local camera = self.m_cam:fetch_unity_camera()
    local list = {}
    for _, v in pairs(self.m_unit_map) do
        -- 有效目标默认条件，不能是搜索者自己，不能是死掉的`
        if v ~= unit and not (v:get_dead()) then
            local is_to_add = true

            -- todo pacman 2018-02-01 这个selectable属性是干啥的?
            is_to_add = (v:get_selectable() == 1)
            --print("get_selectable", v:get_selectable() == 1)

            -- 排除UNSELECTABLE_ITEM
            if is_to_add and v:getCfg().unit_type == enum.unit.UnitType.UNSELECTABLE_ITEM then
                --print("!!!!!!!! 排除UNSELECTABLE_ITEM", v:get_id())
                is_to_add = false
            end

            -- 排除友方目标
            if is_to_add and exclude_friend then
                if not battle_mgr:is_enemy(v) then
                    --print("!!!!!!!! not an enemy", v:get_id())
                    is_to_add = false
                end
            end

            -- 判断距离
            if is_to_add then
                local dist = Vector3.Distance(unit:get_pos(), v:get_pos())
                if dist > range then
                    --print("!!!!!!!! not in range", v:get_id())
                    is_to_add = false
                end
            end

            --  包含条件： 必须位于玩家屏幕内
            if is_to_add and must_inside_main_camera then
                local unit_view = app:getView(v:getFrameName())
                if not (unit_view ~= nil and unit_view:is_inside_camera_view(camera) == true) then
                    --print("!!!!!!!! not in view", v:get_id())
                    -- 不位于相机屏幕内
                    is_to_add = false
                end
            end

            -- 最后决定是否要加入结果中
            if is_to_add then
                list[#list + 1] = v
            end

        end
    end

    if #list == 0 then
        return list
    end
    return list
end


--

-- [[ unit  end ]]
-- [[ interact  start ]]

function World:addInteractObj(obj)
    assert(self.m_interact_map[obj:get_id()] == nil)
    local interact_obj = self:createChild(
    node_name("interact_obj", obj:get_id()),
    "interact_obj",
    obj
    )
    self.m_interact_map[obj:get_id()] = interact_obj
    return interact_obj
end

function World:delInteractObj(id)
    local interact_obj = self.m_interact_map[id]
    self.m_interact_map[id] = nil
    assert(interact_obj ~= nil)
    self:destroyChild(interact_obj)
end

function World:getInteractObj(id)
    return self.m_interact_map[id]
end

function World:getNearestObj(unit)
    if (self.m_interact_map == nil) then
        --print("交互物为空")
        return nil
    end

    local distList = {}

    --print("交互物数量1",utility.table:count(self.m_interact_map))
    for k, v in pairs(self.m_interact_map) do
        if (v:canInteract(unit:get_pos())) then
            distList[#distList + 1] = { id = k, dist = Vector3.Distance(unit:get_pos(), v:get_pos()) }
        end
    end

    if #distList == 0 then
        --print("交互物数量为0")
        return nil
    end

    table.sort(
    distList,
    function(a, b)
        return a.dist < b.dist
    end
    )
    return self.m_interact_map[distList[1].id]
end




--[[ interact  end ]]

-- [[ object  start ]]

function World:addObject(obj)
    assert(self.m_object_map[obj:get_id()] == nil)
    local object = self:createChild(
    node_name("Object", obj:get_id()),
    "Object",
    obj
    )
    self.m_object_map[obj:get_id()] = object
    return object
end

function World:delObject(id)
    local object = self.m_object_map[id]
    self.m_object_map[id] = nil
    assert(object ~= nil)
    self:destroyChild(object)
end

function World:getObject(id)
    return self.m_object_map[id]
end


--[[ object  end ]]

-- [[ merchant  start ]]

function World:addMerchant(obj)
    assert(self.m_merchant_map[obj:get_id()] == nil)
    local object = self:createChild(
    node_name("Merchant", obj:get_id()),
    "Merchant",
    obj
    )
    self.m_merchant_map[obj:get_id()] = object
    return object
end

function World:delMerchant(id)
    local object = self.m_merchant_map[id]
    self.m_merchant_map[id] = nil
    assert(object ~= nil)
    self:destroyChild(object)
end

function World:getMerchant(id)
    return self.m_merchant_map[id]
end

--[[ merchant  end ]]

-- [[ DropItem  start ]]

function World:addDropItem(obj)
    assert(self.m_drop_item_map[obj:get_id()] == nil)
    local object = self:createChild(
    node_name("drop_item", obj:get_id()),
    "drop_item",
    obj
    )
    self.m_drop_item_map[obj:get_id()] = object

    if (self.m_drop_item_count == nil) then
        self.m_drop_item_count = 0
    end

    return object
end

function World:delDropItem(id)
    local object = self.m_drop_item_map[id]

    assert(object ~= nil)

    object:del(function(drop_item)
        self.m_drop_item_map[drop_item:get_id()] = nil
        self:destroyChild(drop_item)
    end)
end

function World:getDropItem(id)
    return self.m_drop_item_map[id]
end



--[[ DropItem  end ]]

function World:getCamera()
    return self.m_cam
end

function World:add_skl_sfx(skill_id, skill_client_id, sfx_path, pos, euler)
    --Debug.LogError("add_skl_sfx..sfx_path --->"..sfx_path)
    local sfx = self:createChild(string.format("%s_%s_%s_%s", "world_sfx", skill_client_id, os.time(), math.random()),
    "auto_destroy_sfx",
    { sfx_path = sfx_path })

    sfx:set_pos(pos)
    sfx:set_euler(euler)

    return sfx
end

function World:add_space_sfx(sfx_path, pos, euler)
    local sfx = self:createChild(string.format("%s_%s_%s", "world_sfx", os.time(), math.random()),
    "auto_destroy_sfx",
    { sfx_path = sfx_path })

    sfx:set_pos(pos)
    sfx:set_euler(euler)

    return sfx
end

-- pacman 2017-12-02 考虑到不一定总是从unit开始发射，也可能是从某空间位置开始，于是添加了一个start_pos参数
function World:add_projectile(skill_id, skill_client_id, sfx_path, caster_unit, start_pos, target_unit, end_mount_point, on_hit)
    local projectile = self:createChild("projectile" .. skill_id .. os.time() .. math.random(), "projectile", {
        skillId = skill_id,
        skill_client_id = skill_client_id,
        sfx_path = sfx_path,
        casterUnit = caster_unit,
        startPos = start_pos,
        onHit = on_hit,
        targetUnit = target_unit,
        endMountPoint = end_mount_point,
    })
    return projectile
end




function World:request_change_map(map_id, func)
    local map = "map_id" .. tostring(map_id)
    self.m_change_map_callback[map] = func
    -- 发送请求切换地图
    app:getKBESDK():onSetSpaceData(1, "map_id", map_id)

    -- pacman 2017-12-29 屏蔽cc为什么没能阻止玩家在切地图时进入下跌状态
    self.m_main_player_unit:get_cc().enabled = false
end

function World:change_map(map_id)
    -- clz test for change map
    -- 设置主角位置和坐标
    local dbc_data = dbc.map[map_id]
    local name = dbc_data.res_client

    -- 修正相机跟随
    local cam = self:getCamera()
    local unit = self.m_main_player_unit

    local cam_euler = cam:get_euler_angle()
    local unit_dir = unit:get_dir()
    local new_yaw = Mathf.MoveTowardsAngle(cam_euler.y, unit_dir, 1000)
    cam:change_goal_yaw(new_yaw)

    local map = "map_id" .. tostring(map_id)

    if (self.m_change_map_callback[map] ~= nil) then
        self.m_change_map_callback[map]()
        self.m_change_map_callback[map] = nil
    end
    ------判断是否在副本内
    local is_dungeon = self:get_map_type(map_id)
    if is_dungeon ~= 1 then
        self:emit_event("out_dungeon")
    end

    -- pacman 2017-12-29 重开玩家cc
    if unit ~= nil then
        unit:set_cc_enabled(true)
    end

    -- 重开摇杆
    -- pacman 2017-12-29 奇怪的是，没加这一句的话，etc joystick也会自动重开
    local player_controller = app:getFrameMgr():getFrame("player_controller")
    if player_controller ~= nil then
        player_controller:set_joystick_enabled(true)
    end
end


-- function World:get_scene_objs_manager()
--     return self.m_scene_objs_manager
-- end

function World:get_main_player()
    return self.m_main_player_unit
end



function World:getUnitMap()
    local ret = {}
    for k, v in pairs(self.m_unit_map) do
        ret[k] = v
    end
    return ret
end

------根据map_id在map表中判断map类型
function World:get_map_type(map_id)
    return dbc.map[map_id].type
end

-- pacman 2017-12-28 开始加载地图时的一些处理
-- 目前主要防止玩家在切地图时进入下跌状态
function World:on_start_load_map()
    local map_id = self:get_map_id()
    if (map_id ~= nil and map_id ~= 0) then
        local type_id = dbc.map[map_id]
        if (type_id.type == 2 or self.is_map_id == 2) then
            self.is_map_id = type_id.type
            return
        end
    end
    -- 关闭主玩家cc
    local main_player_unit = self.m_main_player_unit
    if main_player_unit ~= nil then

        main_player_unit:set_cc_enabled(false)
    end
    -- 关闭摇杆
    local player_controller = app:getFrameMgr():getFrame("player_controller")
    if player_controller ~= nil then
        player_controller:set_joystick_enabled(false)
    end
end
return World
