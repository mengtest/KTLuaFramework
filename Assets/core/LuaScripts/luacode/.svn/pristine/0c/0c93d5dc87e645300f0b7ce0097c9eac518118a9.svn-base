-- 在initialize中初始化，避免交叉require死循环
local UAFsm = nil
local Unit = nil
local require_relative = REQUIRE_BASE(...)

local Ua_state_base = require("frame.unit_act_state.ua_state_base")
local Ua_state_skill_jump = class("Ua_state_skill_jump", Ua_state_base)

Ua_state_skill_jump.Const = {}
Ua_state_skill_jump.Const.h = 6    -- 跳跃的最低高度
Ua_state_skill_jump.Const.g1 = 60 * Vector3.up      -- 阶段1的重力加速度
Ua_state_skill_jump.Const.g2 = 100 * Vector3.up     -- 阶段2的重力加速度

function Ua_state_skill_jump:initialize(fsm, unit)
    Ua_state_base.initialize(self, fsm, unit)

    UAFsm = require_relative("ua_state_machine")
    self.m_cur_duration = 0

    -- pacman 2017-12-01 原对应于跳跃的四个阶段（起跳、滞空、翻滚、落地，1-4）
    -- 根据新的一版设计，改为了（蓄力起跳、腾空、攻击、收招，1-4）
    self.m_stage = 0

    self.m_played_hit_anim = false
end

function Ua_state_skill_jump:enter()
    Ua_state_base.enter(self)

    self.m_unit:set_main_act(enum.battle.Unit_Main_Act.SKILL_JUMP)
    self.m_unit:set_sub_act(enum.unit.AnimParam.SubAct.DYHZJ.NONE)
    self.m_cur_duration = 0
    self.m_played_hit_anim = false
    --self.m_unit:emit_event("cross_fade", "skill_jump_a", 0.2)
    self.m_stage = 1

    -- pacman 2017-12-01 旧的环节控制 1.起跳时间点 2.翻滚时间点(从起跳后开始计时) 3.砸地时间点(从落地时间点开始计算)
    -- 根据新的动作，环节控制改为 1.起跳时间点 2.攻击时间点(从落地时间点往回计算提前量)
    self.m_jump_param = {0.05, -0.2}

    self.m_ori_pos = self.m_unit:get_pos()
    self.m_end_pos = self.m_param.target_pos
    local s_vec = self.m_end_pos - self.m_ori_pos

    local h1, h2 = nil, nil
    -- 跳跃高度
    if s_vec.y > self.Const.h then
        -- 如果从起跳位置到目标位置的垂直距离超出了跳跃设定高度
        local add_height = 0.5
        h1 = s_vec.y + add_height        -- 上升距离等于最大跳跃高度在加上一段距离
        h2 = add_height        -- 下落距离等于加上的这段距离
    else
        -- 如果没有超出跳跃设定高度
        h1 = self.Const.h
        h2 = self.Const.h - s_vec.y
    end

    self.m_s = s_vec.magnitude
    self.m_t1 = math.sqrt(2 * h1 / self.Const.g1.magnitude)     -- 上升时间
    self.m_t2 = math.sqrt(2 * h2 / self.Const.g2.magnitude)     -- 下落时间
    self.m_vv = math.sqrt(2 * h1 * self.Const.g1.magnitude) * Vector3.up    -- 起跳初速度
    self.m_t = self.m_t1 + self.m_t2        -- 跳跃总时间(不含蹲地起跳时间)
    self.m_vh = s_vec / self.m_t        -- 直线方向的速度
    self.m_td = utility.math:clamp(self.m_t - self.m_jump_param[2], 0, self.m_t)   -- 砸地动作时间点
    self.m_cc = self.m_unit:get_cc()


    -- todo pacman 2017-11-02 临时做法，不停的向服务器更新自己的位置来覆盖服务器端的位移操作
    self.m_unit:set_pos(self.m_ori_pos)
    self.m_unit:emit_event("set_position", self.m_ori_pos)


  
end

function Ua_state_skill_jump:exit()
    Ua_state_base.exit(self)
    
end

function Ua_state_skill_jump:update()
    Ua_state_base.update(self)

    local dt = app:get_delta_time()
    self.m_cur_duration = self.m_cur_duration + dt

    -- pacman 2017-11-02 梳理了一下思路
    -- 从水平/垂直两个方面描述跳跃过程的位置曲线
    -- 用额外的时间点来控制各个动作切换的时机
    if self.m_stage == 0 then

    elseif self.m_stage == 1 then

        -- 蓄力起跳阶段 --
        -- pacman 2017-11-02 临时做法，不停的向服务器更新自己的位置来覆盖服务器端的位移操作
        self.m_unit:set_pos(self.m_ori_pos)
        self.m_unit:emit_event("set_position", self.m_ori_pos)

        -- 此阶段不会移动
        if self.m_cur_duration >= self.m_jump_param[1] then
            -- pacman 2017-11-02 改成了在animator中自动播放
            -- 因为美术给过来的动画起跳中包含了腾空的动作，无法通过延长【起跳】阶段的时间来实现蓄力
            --self.m_unit:emit_event("cross_fade", "skill_jump_d", 0.2)
            self.m_cur_duration = 0     -- 重置计时
            self.m_stage = 2            -- 开始【跳跃-腾空】
        end
    elseif self.m_stage == 2 then   -- 跳跃-腾空
        if not self.m_cc then
            return
        end

        -- 临落地前提前进入【攻击】
        if self.m_cur_duration >= self.m_t + self.m_jump_param[2] then
        --if self.m_cur_duration >= self.m_jump_param[2] then
            --self.m_unit:emit_event("cross_fade", "skill_jump_b", 0.1)
            self.m_unit:emit_event("anim_param", "sub_act", "int", enum.unit.AnimParam.SubAct.DYHZJ.ATTACK)
            self.m_stage = 3
        end

        self:update_jump_pos(dt)
    elseif self.m_stage == 3 then   -- 攻击
        if not self.m_cc then
            return
        end

        -- pacman 2017-12-01 整个跳跃时间结束，进入收招阶段
        if self.m_cur_duration >= self.m_t then
            self.m_cur_duration = 0
            self.m_unit:emit_event("anim_param", "sub_act", "int", enum.unit.AnimParam.SubAct.DYHZJ.FINISH)
            self.m_stage = 4
        end

        self:update_jump_pos(dt)
    elseif self.m_stage == 4 then   -- 收招
        -- 直接结束
        self.m_unit:stop_skill_jump(self.m_unit:get_skill_id())

        --if self.m_cur_duration >= self.m_jump_param[3] then
        --    print("<---------------- time to stop jump")
        --    self.m_unit:stop_skill_jump(self.m_unit:get_skill_id())
        --end
    end
end


function Ua_state_skill_jump:update_jump_pos(dt)
    local g = self.m_cur_duration <= self.m_t1 and self.Const.g1 or self.Const.g2
    self.m_vv = self.m_vv - g * dt
    local vec = (self.m_vv + self.m_vh) * dt
    self.m_cc:Move(vec)
    self.m_unit:set_pos(self.m_cc.transform.position)
    self.m_unit:emit_event("set_position",self.m_cc.transform.position)
end



function Ua_state_skill_jump:change_move_state(move_state)
    --self.m_unit:set_move_state(move_state)
    --app:logError("Ua_state_skill_jump change_move_state")
end

function Ua_state_skill_jump:exit(move_state)
    self.m_unit:set_sub_act(enum.unit.AnimParam.SubAct.DYHZJ.NONE)
end

return Ua_state_skill_jump