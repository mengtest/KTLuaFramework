
local Quest_condition = require "subsystem.quest.quest_bar.quest_condition"

local Quest_detail = class("Quest_detail")

function Quest_detail:initialize(go)
	self.m_go = go
	self.m_rect = go:GetComponent(RectTransform)
    self.m_schdule_text = self.m_rect:Find("quest_info/second_line/schdule"):GetComponent(UnityEngine.UI.Text)
    self.m_arrow_self_tr = self.m_rect:Find("arrow_info/arrow/arrow_self")
    self.m_arrow_aim_tr = self.m_rect:Find("arrow_info/arrow/arrow_aim")
    self.m_dis_text = self.m_rect:Find("arrow_info/distance"):GetComponent(UnityEngine.UI.Text)
	self.m_linked_go_list = {}
	self.m_condition_dict = {}
end

function Quest_detail:destroy()
	Object.Destroy(self.m_go)
	for _, go in pairs(self.m_linked_go_list) do
		Object.Destroy(go)
	end
end

function Quest_detail:set_parent(parent_tr)
	self.m_rect:SetParent(parent_tr)
    self.m_rect.localPosition = Vector3.zero
    self.m_rect.localScale = Vector3.one
	self.m_rect.sizeDelta = Vector2(0, 0)
end

function Quest_detail:set_const_info(data)
    local title_text = self.m_rect:Find("quest_info/txt_title"):GetComponent(UnityEngine.UI.Text)
    local sketch_text = self.m_rect:Find("quest_info/second_line/txt_sketch"):GetComponent(UnityEngine.UI.Text)
    title_text.text = data.detail .. data.name
    sketch_text.text = data.sketchy
    for i = 1, 2 do
        local cur_good_id = data.goods[i]
        local cur_good_img = self.m_rect:Find(string.format("goods/good%d", i)):GetComponent(UnityEngine.UI.Image)
        if cur_good_id and cur_good_id > 0 then
            cur_good_img.gameObject:SetActive(true)
        else
            cur_good_img.gameObject:SetActive(false)
        end
    end
end

--[[function Quest_detail:init_condition(data, quest_data)
	KTGame.instance.assetManager:LoadAsset("ui/sidebar/item_quest/border_siderbar_quest_condition_detail.prefab", function (ref)
		for index = 1, 8 do
			local name_finish_tp = "finish" .. tostring(index)
			local condition_tp = data[name_finish_tp]
			if condition_tp and condition_tp > 0 then
				local name_finish_desc = string.format("finish%s_desc", tostring(index))
				local name_finish_param = string.format("finish%s_param", tostring(index))
				
				
				local go = Object.Instantiate(ref.asset)
				go.transform.parent = self.m_rect
                go.transform.localPosition = Vector3.zero
                go.transform.localScale = Vector3.one
				local quest_condition = Quest_condition:new(go)
				self.m_condition_dict[index] = quest_condition
				quest_condition:set_finish_desc(data[name_finish_desc])
			end
		end
        self:refresh_by_quest_data(quest_data)
	end)
end--]]

--[[function Quest_detail:link_with(go)
	table.insert(self.m_linked_go_list, go)
end--]]

--[[function Quest_detail:refresh_by_quest_data(quest_data)
	local condition_dict = quest_data:get_condition_dict()
	for index, condition in pairs(condition_dict) do
		self:refresh_condition(index, condition:get_fixed_param())
	end
end--]]

--[[function Quest_detail:refresh_condition(index, fixed_param)
	local condition = self.m_condition_dict[index]
	assert(condition, "index = " .. index)
    condition:refresh_param(fixed_param)
end--]]

function Quest_detail:refresh_schdule(cur_weights, aim_weights)
    self.m_schdule_text.text = string.format("(%d/%d)", cur_weights, aim_weights)
end

--[[function Quest_detail:get_condition_dict()
	return self.m_condition_dict
end--]]

--[[function Quest_detail:update()
    self.m_dis_text.text = self:get_closest_aim_info()
end--]]

function Quest_detail:refresh_aim_info(dis_aim, dir_aim, dir_self)
    if not dis_aim or not dir_aim then return end
    self.m_dis_text.text = string.format("%dm", math.floor(dis_aim) + 1)
    self.m_arrow_aim_tr.localEulerAngles = Vector3(0, 0, math.deg(math.atan2(dir_aim.z, dir_aim.x)) - 90)
    --self.m_arrow_self_tr.localEulerAngles = Vector3(0, 0, math.deg(math.atan2(dir_self.z, dir_self.x)))
    self.m_arrow_self_tr.localEulerAngles = Vector3(0, 0, -dir_self)
end



return Quest_detail