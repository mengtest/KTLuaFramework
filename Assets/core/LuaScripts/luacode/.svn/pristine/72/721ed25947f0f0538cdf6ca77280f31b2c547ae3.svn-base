local Projectile = {}

--Attribute.decl(Projectile, "caster", nil)
Attribute.decl(Projectile, "target", nil)
Attribute.decl(Projectile, "pos", function() return Vector3(0, 0, 0) end)
Attribute.decl(Projectile, "euler", function() return Vector3(0, 0, 0) end)
Attribute.decl(Projectile, "action", nil)



--轨迹计算相关
Attribute.decl(Projectile, "moved_dis", nil) -- 真实弹道已经移动的位移
Attribute.decl(Projectile, "target_pos", nil) -- 实时目标位置
Attribute.decl(Projectile,"expected_time",nil) -- 出手时的期望击中时间
Attribute.decl(Projectile,"expected_dis",nil) -- 出手时的期望击中距离
Attribute.decl(Projectile, "on_hit", nil)

Event.decl(Projectile,"Inited")
Event.decl(Projectile,"destroy_view")


function Projectile:doInit(param)
    local skill_id = param.skillId
    local skill_client_id = param.skill_client_id
    assert(skill_id, "skill_id is nil")
    self.m_cfg = dbc.spell[skill_id]
    self.m_client_cfg = dbc.spell_client[skill_client_id]
    -- 通过spell_client找到弹道类型 然后通过projectile_type找到配置数据
    self.m_projectile_type_cfg = dbc.projectile_type[self.m_client_cfg.projectile_type]
    self.m_sfx_path = param.sfx_path
    self.m_caster_unit = param.casterUnit
    --self.m_target_unit = param.targetUnit
    self.m_hit_on = param.onHit

    -- pacman 2017-12-02 加入技能资源预加载之后，view的prefab就位时间点提前，释放有些技能比如【火焰冲击】会报错
    -- 一些参数/属性的初始化顺序需要调整
    -- 目标对象
    local target = param.targetUnit
    self:set_target(target)

    -- 初始位置
    self:set_pos(param.startPos)

    -- 目标(挂点)位置
    local mount_point_name = param.endMountPoint
    if target ~= nil and mount_point_name ~= nil then
        local target_mp_trans = target:get_bone(mount_point_name)
        if target_mp_trans ~= nil then
            self:set_target_pos(target_mp_trans.position)
        end
    end

    self:on_event_action_set():subscribe(function(new, old)
        if old then old:close() end
        if new then new:start() end
    end)

end

function Projectile:doUpdate()
    if self:get_action() then
        if not self:get_action():update() then
            self:set_action(nil)
        end
    end
end

function Projectile:get_projectile_type_cfg()
    return self.m_projectile_type_cfg
end

function Projectile:get_cfg()
    return self.m_cfg
end

function Projectile:get_client_cfg()
    return self.m_client_cfg
end


function Projectile:get_sfx_path()
    return self.m_sfx_path
end

function Projectile:get_caster_unit()
    return self.m_caster_unit
end

function Projectile:on_hit()
    local on_hit = self:get_on_hit() 
    assert(type(on_hit) == "function")
    on_hit()  
    self:emit_event("destroy_view")
end


return Projectile
