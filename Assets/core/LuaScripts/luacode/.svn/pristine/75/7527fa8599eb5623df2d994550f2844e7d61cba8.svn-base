local M = {}

-- Attribute.decl(M, "target", nil)
-- Attribute.decl(M, "target_name", nil)
Event.decl(M, "change_battle_state")
Event.decl(M, "join_dungeon")
Event.decl(M, "out_dungeon")


Attribute.decl(M, "skill_setting_is_created", false)    -- rjy   2017.10.26  技能配置

function M:doInit(owner)
    self.m_owner = owner
    -- self.m_role = role

    -- self:subscribe(role:on_event_target_set(true), function(value)
    -- 	if value ~= nil then
    -- 		-- print("------------------new target ", value:get_name())
    -- 		self:set_target(value)
    -- 	end
    -- end)
    self.ui_manager = app:get_ui_manager()
    self.m_quest_bar = nil
    self.m_mini_map = nil
    self.m_hint = {}
end

function M:create_subsystem()
    local param_quest_bar = nil
    local param_mini_map = {owner = self.m_owner}
    self.m_quest_bar = self:createChild("quest_bar", "%subsystem.quest.quest_bar.quest_bar", param_quest_bar)
    self.m_mini_map = self:createChild("mini_map", "%subsystem.map.mini_map.mini_map", param_mini_map)
end

function M:create_player_buff_container(unit)

    local buff_container = self:createChild("player_buff_container", "buff_container", { unit = unit,special = 0 })

    self:createChild("player_special_buff_container", "buff_container", { unit = unit,special = 1 })

    return buff_container
end

function M:create_target_buff_container(unit)
    local buff_container = self:createChild("target_buff_container", "buff_container", { unit = unit,special = 0 })
    return buff_container
end

function M:on_inventory()
    self:logDebug("UIMain:on_inventory")

    if self:getChild("ui_inventory") then
        self:destroyChild("ui_inventory")
    else
        self:createChild("ui_inventory")
    end
end

function M:on_equipment()
    self:logDebug("UIMain:on_equipment")
end

function M:on_skills()
    self:logDebug("UIMain:on_skills")
end

function M:on_character_info()
    self:logDebug("UIMain:on_character_info")

    --if self:getChild("ui_character_info") then
    --	self:destroyChild("ui_character_info")
    --else
    --self:createChild("ui_character_info")
    -- 使用ui_manager创建character_info frame

    --end
end

function M:on_quests()
    self:logDebug("UIMain:on_quests")
end

function M:on_quit()
    self:logDebug("UIMain:on_quit")
    app:doReturnLogin()
end
function M:on_change_battle_state(state)
    if (state == 1) then
        self:emit_event("change_battle_state", true)
    else
        self:emit_event("change_battle_state", false)
    end
end

--对话泡泡
function M:set_bubble(dialog_id)
    self:emit_event("popup_bubble", dialog_id)
end

--副本进入页面    ke
function M:create_dungeon_join(open_diff_list)
    self.ui_manager:CreateUI("dungeon_join", "%subsystem.dungeon.dungeon_join", open_diff_list, self.ui_manager.UI_Depth.NORMAL)
end

function M:create_dungeon_confirm_progress()
    self.ui_manager:CreateUI("dungeon_confirm_progress", "%subsystem.dungeon.dungeon_confirm_progress", nil, self.ui_manager.UI_Depth.NORMAL)
end

function M:create_dungeon_stop_time(prepare_time)
    self.ui_manager:CreateUI("dungeon_stop_time", "%subsystem.dungeon.dungeon_stop_time", prepare_time, self.ui_manager.UI_Depth.NORMAL)
end

function M:notice_join_dungeon(prepare_time)
    self:emit_event("join_dungeon", prepare_time)
end

function M:notice_out_dungeon()
    self:emit_event("out_dungeon")
end

----技能进入页面   ke
function M:create_skill_ui_main()
    self.ui_manager:CreateUI("skill_ui_main", "%subsystem.skill_system_ui.skill_ui_main", nil, self.ui_manager.UI_Depth.NORMAL)
end


--创建浮动提示文字
function M:creat_hint_item(string)
    local param = { string = string }
    for i = 1, 3 do
        if self.m_hint[i] == nil then
            local aa = self:createChild("hint_c" .. i, "hint_show", param)
            self.m_hint[i] = aa
            break
        end
    end
end
function M:hint()
    return self.m_hint
end

return M