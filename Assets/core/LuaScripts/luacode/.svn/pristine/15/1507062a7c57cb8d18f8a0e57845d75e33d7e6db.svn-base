local ObserverHost = require "system.observer_host"

local M = class("ModelMgr")

M:include(ObserverHost)

M.Enum_Model_Type = {
    Role = 0, -- 角色
    Interact_Obj = 1, -- 物件
    Creature = 2, -- 怪物
    BigBoss = 3, -- 大型Boss
}

-- 通过id获取Prefab
function M.GetPrefabPathById(id)
    local m = dbc.model_path[id]
    
    assert(m ~= nil, "没有找到prefab:id=" .. tostring(id))
    
    local prefab_name = m.prefab_name
    
    if (prefab_name == nil or #prefab_name < 1) then
        return nil
    end
    
    return M.GetPrefabPath(m.model_type, m.prefab_name)
end


-- 通过type,name获取Prefab
function M.GetPrefabPath(type, name)
    return string.format("actors/Prefab/%s.prefab", name)
end


-- 获取武器
function M.GetUnitWeapon(specialization)
    local weapon_path = nil
    local weapon_point = nil
    
    -- 猴子(复仇)
    if (specialization == SharedEnum.TalentSpecialization.DEMON_HUNTER_VENGEANCE) then
        weapon_path = {"models/Role/weapon/linghou/dabangzi.prefab"}
        weapon_point = {"weapon_hand_r_1"}
    -- 猴子(浩劫)
    elseif (specialization == SharedEnum.TalentSpecialization.DEMON_HUNTER_HAVOC) then
        weapon_path = {"models/Role/weapon/linghou/kuanglie_weapon_01.prefab"}
        weapon_point = {"weapon_hand_r_1"}
    -- 罗刹(火法)
    elseif (specialization == SharedEnum.TalentSpecialization.MAGE_FIRE) then
        weapon_path = {"models/Role/weapon/luocha/huofa_weapon_01.prefab", "models/Role/weapon/luocha/huofa_weapon_01.prefab"}
        weapon_point = {"weapon_hand_l_1", "weapon_hand_r_1"}
    end
    
    return weapon_path, weapon_point
end


-- 获取动画机地址  clz
function M.GetAnimatorControllerPath(specialization)
    
    M.PreloadBySpecialization(specialization)
    
    -- 猴子(复仇)
    if (specialization == SharedEnum.TalentSpecialization.DEMON_HUNTER_VENGEANCE) then
        return "actors/motion/linghou_fuchou_motion.controller"
    -- 猴子(浩劫)
    elseif (specialization == SharedEnum.TalentSpecialization.DEMON_HUNTER_HAVOC) then
        return "actors/motion/linghou_haojie_motion.controller"
    -- 罗刹(火法)
    elseif (specialization == SharedEnum.TalentSpecialization.MAGE_FIRE) then
        return "actors/motion/luocha_motion.controller"
    end
    
    
    
    return nil
end

function M.GetAnimationPathById(model_id, anim_name)
    local data = dbc.model_path[model_id]
    local m = string.format("models/Role/%s/animation/%s.anim", dbc.model_path[model_id].model_path, anim_name)
    return m
end

-- 预加载特殊动作资源
function M.PreloadBySpecialization(specialization)    
    local anima_assest = {"sing_anim_a", "sing_anim_b", "instant_anim", "hit_anim"}
    local sfx_assest = Enum_Battle.Skill_Sfx_Type
    local spell_client_id_list = {}
    local model_id = 0
    -- 猴子(复仇)
    if (specialization == SharedEnum.TalentSpecialization.DEMON_HUNTER_VENGEANCE) then
        
    -- 猴子(浩劫)
    elseif (specialization == SharedEnum.TalentSpecialization.DEMON_HUNTER_HAVOC) then
        
    -- 罗刹(火法)
    elseif (specialization == SharedEnum.TalentSpecialization.MAGE_FIRE) then
        spell_client_id_list = {903001, 903002, 903003, 903004, 903005, 903006, 903007, 903008, 903009, 903012, 903019, 903022}
        model_id = 1003
    end

        for dbc_index = 1, #spell_client_id_list do
            local dbc_data = dbc.spell_client[spell_client_id_list[dbc_index]]            
            for k, v in pairs(anima_assest) do
                if (type(dbc_data[v]) == "table") then
                    for index = 1, #v do
                        local anim_name = dbc_data[v][index]
                        if (anim_name ~= nil and #anim_name > 0) then
                            local path = M.GetAnimationPathById(model_id, dbc_data[v][index])
                            CacheMgr:AddAnimaCache(path)
                        --Debug.LogError("预加载动作资源：" .. path)
                        end
                    end
                else
                    local anim_name = dbc_data[v]
                    if (anim_name ~= nil and #anim_name > 0) then
                        local path = M.GetAnimationPathById(model_id, dbc_data[v])
                        CacheMgr:AddAnimaCache(path)
                    --Debug.LogError("预加载动作资源：" .. path)
                    end
                end
            end
            
            for k, v in pairs(sfx_assest) do
                if (type(dbc_data[v]) == "table") then
                    for index = 1, #v do
                        local anim_name = dbc_data[v][index]
                        if (anim_name ~= nil and #anim_name > 0) then
                            local path = anim_name
                            --Debug.LogError("预加载特效资源：" .. path)
                            CacheMgr:AddSfxCache(path)                        
                        end
                    end
                else
                    local anim_name = dbc_data[v]
                    if (anim_name ~= nil and #anim_name > 0) then
                        local path = anim_name
                        --Debug.LogError("预加载特效资源：" .. path)
                        CacheMgr:AddSfxCache(path)
                    end
                end
            end
        end
end

-- 获取普攻动作
function M.GetAtkAnim(specialization, is_player)
    if (is_player == true) then
        -- 猴子(复仇)
        if (specialization == SharedEnum.TalentSpecialization.DEMON_HUNTER_VENGEANCE) then
            return 1000001
        -- 猴子(浩劫)
        elseif (specialization == SharedEnum.TalentSpecialization.DEMON_HUNTER_HAVOC) then
            return 1000003
        -- 罗刹(火法)
        elseif (specialization == SharedEnum.TalentSpecialization.MAGE_FIRE) then
            return 1000005
        end
    else
        local atk_anim = dbc.model_path[specialization].atk_anim
        
        if (atk_anim == 0) then return nil end
        
        local spell_client = dbc.spell_client[atk_anim]
        
        if (spell_client == nil) then return nil end
        
        return atk_anim
    
    end
    return nil
end

-- 加载表现型特效 生带来死带去
function M.LoadAppearanceSfx(id, go)
    local m = dbc.model_path[id]
    local sfx = m.appearance_sfx
    local sfx_mount = m.appearance_sfx_mount
    if (sfx == nil or #sfx < 1) then
        return
    end
    
    local index = 1
    repeat
        M:load_sfx(sfx[index], sfx_mount[index], go)
        index = index + 1
    until (index > #sfx)

end

function M:load_sfx(sfx_path, sfx_mount_path, go)
    -- 加载特效
    M:subscribe(app:getResMgr():rxLoad(sfx_path), function(asset_ref)
        if (asset_ref.asset ~= nil) then
            local prefab = asset_ref.asset
            local gameObject = Object.Instantiate(prefab)
            if (sfx_mount_path == nil) then
                sfx_mount_path = ""
            end
            gameObject.transform.parent = go:GetComponent(KTBoneManager):GetBoneByName(sfx_mount_path)
            gameObject.transform.localPosition = prefab.transform.localPosition
            gameObject.transform.localEulerAngles = prefab.transform.localEulerAngles
            gameObject.transform.localScale = prefab.transform.localScale
        end
    end)
end

function M:load_dead_sfx(id, pos, dir)
    local path = dbc.model_path[id].after_dead_sfx
    if (path == nil or #path == 0) then
        return
    end
    local frame_mgr = app:getFrameMgr()
    local world = frame_mgr:getFrame("world")
    world:add_space_sfx(path, pos, Vector3(0, dir, 0))
end
return M
