local View = require("system.view")
local dungeon_confirm_progress_view = class("dungeon_confirm_progress_view", View)

function dungeon_confirm_progress_view:doInit(param)
    local dungeon_progress = param
    self.m_pro_dic = {}
    self.m_ui_manager = app:get_ui_manager()
    self:load("ui/Confirmdungeonprogress.prefab", function(go)
        self.m_ui_manager:AdaptResolution(self:getFrame():getFrameName(), go)
        local accept_btn = go.transform:Find("confirm_dungeon_progress/accept_btn"):GetComponent(UI.Button)
        self.tip_text = go.transform:Find("confirm_dungeon_progress/Scroll View/Viewport/Content"):GetComponent(UI.Text)

        accept_btn.onClick:AddListener(function()
            self.m_ui_manager:DestroyUI("dungeon_confirm_progress")
        end)

        local id = self:get_inst_id()
        -----当前副本的需要显示的进度节点   这是一个列表   一个进度点在instance_progress中对应一个boss表
        --Debug.LogError("dungeon_confirm_progress_view..dungeon_id" .. tostring(id))
        local progress_point = dbc.instances[id].progresses
        -------用一个字典来记载进度点，以及每一个进度点表示的boss的id组
        for k, v in pairs(progress_point) do
            local id = dbc.instances_progress[v].boss_id
            local progress_point_id = v
            local boss_data = {}
            ----1代表存活状态   0代表死亡，如果收到服务器的进度消息中有
            for key, value in pairs(id) do
                local boss_name = dbc.creature[value].name
                local state = 1
                boss_data[key] = { ["boss_name"] = boss_name, ["boss_state"] = state }
            end
            self.m_pro_dic[progress_point_id] = { ["boss_id"] = id, ["boss_data"] = boss_data }
        end
        ----判断收到服务器进度消息的处理  如果已经通过boss进度，则修改其存活状态
        for k, v in pairs(dungeon_progress) do
            if self.m_pro_dic[v] ~= nil then
                for key, value in pairs(self.m_pro_dic[v]["boss_data"]) do
                    value["boss_state"] = 0
                end
            end
        end
        self.tip_text.text = ""
        ------接下来做对应的英雄名字状态的显示   temp处理
        for k, v in pairs(self.m_pro_dic) do
            for key, value in pairs(v["boss_data"]) do
                if value["boss_state"] == 1 then
                    self.tip_text.text = self.tip_text.text .. "\n" .. value["boss_name"] .. "\t\t\t\t\t\t\t\t\t\t\t\t" .. "存活"
                elseif value["boss_state"] == 0 then
                    self.tip_text.text = self.tip_text.text .. "\n" .. value["boss_name"] .. "\t\t\t\t\t\t\t\t\t\t\t\t" .. "已击杀"
                end
            end
        end
    end)
end

------获取主角的所在副本的id或者说判断是否在副本   日后可能会在一个manager中来调用
function dungeon_confirm_progress_view:get_inst_id()
    local kbe_mgr = self:getFrame("kbe.kbe_mgr")
    local sdk = app:getKBESDK()
    local role_id = sdk:get_player_id()
    local role = kbe_mgr:get_entity(role_id)
    local id = role:get_inst_id()
    return id
end

return dungeon_confirm_progress_view