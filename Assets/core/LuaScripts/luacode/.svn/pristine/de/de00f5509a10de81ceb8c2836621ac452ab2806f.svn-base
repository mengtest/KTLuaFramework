-- Unit行为状态机
-- 帮助Unit的行为状态管理
-- 但本身并不是frame
local require_relative = REQUIRE_BASE(...)
local UnitActStateBase = require_relative("ua_state_base")-- 状态 基类
local M = class("UnitActFsm", UnitActStateBase)

-- 兼namespace
M.StateMove = require_relative("ua_state_move")-- 状态 移动
M.StateSkillSing = require_relative("ua_state_skill_sing")-- 状态 施法吟唱
M.StateAutoMove = require_relative("ua_state_auto_move")-- 状态 自动移动
M.StateSkillChannel = require_relative("ua_state_skill_channel")-- 状态 施法引导
M.StateSkillJump = require_relative("ua_state_skill_jump")-- 状态 技能跳跃



-- 技能子状态
M.SKILL_STATE =
    {
        CHANNEL = 1,
    }


function M:initialize(fsm, unit)
    UnitActStateBase.initialize(self, fsm, unit)

    self.m_state_list[M.MAIN_ACT.MOVE] = M.StateMove(self, unit)
    self.m_state_list[M.MAIN_ACT.SKILL_SING] = M.StateSkillSing(self, unit)
    self.m_state_list[M.MAIN_ACT.SKILL_CHANNEL] = M.StateSkillChannel(self, unit)
    self.m_state_list[M.MAIN_ACT.SKILL_JUMP] = M.StateSkillJump(self, unit)
	self.m_state_list[M.MAIN_ACT.Auto_Move] = M.StateAutoMove(self,unit)
   
end



function M:change_move_state(move_state)
    if self.m_cur_state ~= nil then
        self.m_cur_state:change_move_state(move_state)
    end
end


return M
