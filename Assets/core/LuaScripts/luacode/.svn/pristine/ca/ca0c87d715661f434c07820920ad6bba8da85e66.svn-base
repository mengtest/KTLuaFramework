-- 角色行为状态 着地移动
local require_relative = REQUIRE_BASE(...)
local UnitActStateBase = require_relative("ua_state_base")

-- 在initialize中初始化，避免交叉require死循环
local UAFsm = nil
local Unit = nil

local M = class("UnitActStateMove", UnitActStateBase)

local y_gravity_offset = nil

function M:initialize(fsm, unit)
    UnitActStateBase.initialize(self, fsm, unit)

    UAFsm = require_relative("ua_state_machine")
    Unit = require "frame.unit"
end

function M:enter()
    -- print("UnitActStateMove:enter")
    UnitActStateBase.enter(self)

    self.m_unit:set_main_act(UAFsm.MAIN_ACT.MOVE)
end

function M:exit()
    -- print("UnitActStateMove:exit")
    UnitActStateBase.exit(self)
end

function M:update()
    --print(">>>>>>>>>>>>>>>>>UnitActStateMove:update")
    UnitActStateBase.update(self)
    local cc = self.m_unit:get_cc()
    if cc == nil then
        return
    end

    local delta_time = app.get_delta_time()

    -------------------
    -- 检查状态切换 --

    -- 起跳
    if self.m_unit:get_to_jump() then
        -- print("----------- to jumpe~")
        self.m_unit:set_to_jump(false)
        self.m_unit:set_gravity_speed(Unit.START_JUMP_SPEED)
        -- print(">>>>>>>>>>>>>>>", self.m_unit:get_gravity_speed())
        self.m_fsm:change_state(UAFsm.MAIN_ACT.JUMP)
        return
    end


    -- 跌落  先给主角加上  怪物加上会有问题
    -- if not cc.isGrounded and self.m_unit:get_is_main_player()==true then
       
    --     if (y_gravity_offset == nil) then
    --         y_gravity_offset = self.m_unit:get_pos().y
    --     elseif (self.m_unit:get_pos().y - y_gravity_offset > Unit.FALL_DISTANCE) then
    --         y_gravity_offset = nil
    --         self.m_fsm:change_state(UAFsm.MAIN_ACT.JUMP)
    --         return
    --     --[[else
    --         Debug.LogError(self.m_unit:get_pos().y - y_gravity_offset)]]--
    --     end
    -- end

    --------------------
    -- 方位计算---

    -- 同步朝向
    self.m_unit:update_dir()

    -- 移动处理 ---
    local angle_8d = Unit.get_angle8d_from_move_state(self.m_unit:get_move_state())
    if angle_8d ~= nil then
        local move_speed_xz = self.m_unit:get_move_speed()

        if self.m_unit:get_back() then
            move_speed_xz = move_speed_xz * Unit.BACK_SPEED_SCALE
        end
        -- print(move_speed_xz)

        local move_dir = self.m_unit:get_dir() + angle_8d

        -- 重力速度
        -- 不用关心是否着地，都设置gravity_speed，以便在起伏的地形上移动
        -- 因为本状态下，角色处于着地状态，所以gravity_speed设为 -Unit.GRAVITY，即每次都是重新开始下落
        -- self.m_unit:set_gravity_speed(-Unit.GRAVITY * delta_time)    --这个变化幅度值太小了
        self.m_unit:set_gravity_speed(-Unit.GRAVITY)

        -- 位移
        local movespeed = Quaternion.AngleAxis(move_dir, Vector3.up) * Vector3.forward * move_speed_xz
        movespeed.y = self.m_unit:get_gravity_speed()
        local movement = movespeed * delta_time
        cc:Move(movement)
        self.m_unit:set_pos(cc.transform.position)
        self.m_unit:set_move_dir(move_dir)
    end
end

function M:change_move_state(move_state)
    self.m_unit:set_move_state(move_state)
end

return M
