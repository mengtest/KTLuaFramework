local ObserverHost = require "system.observer_host"

local M = class("SkillMgr")
M:include(ObserverHost)


function M:initialize()
    Event.init(self)
    
    self.m_aoe_list = {}

    -- 角色标准高度 2.0米(灵猴) 用于适配buff高度修正
    self.m_standard_height = 2.0
    -- 角色标准宽度 0.5米(灵猴) 用于适配buff x、z缩放
    self.m_stardard_radius = 0.5
end

function M:get_standard_height_radius()
    return self.m_standard_height,self.m_stardard_radius
end

function M:destroy()
    self:unsubscribeAll()
end

function M:update()

end

-- 在world中添加显示skill_eft
function M:add_skill_eft_at_pos(skill_id, skill_client_id, sfx_type, target_pos, target_dir)
    local skill_client_cfg = dbc.spell_client[skill_client_id]
    if (skill_client_cfg == nil) then
        Debug.LogError("add_skill_eft_at_pos do not find spell_client ---> skill_id:" .. skill_id .. "  skill_client_id --->" .. skill_client_id)
    end
    local sfx_path = skill_client_cfg[sfx_type]
    
    -- 没有配置特效则返回 --
    if type(sfx_path) == "table" then
        if #sfx_path == 0 then
            return
        end
    else
        if sfx_path == nil or sfx_path == "" or sfx_path == "n" then
            return
        else
            local t = {}
            table.insert(t, sfx_path)
            sfx_path = t
        end
    end
    
    -- 创建特效
    for i, v in ipairs(sfx_path) do
        local sfx_path = v
        local frame_mgr = app:getFrameMgr()
        local world = frame_mgr:getFrame("world")
        local sfx = world:add_skl_sfx(skill_id, skill_client_id, sfx_path, target_pos, Vector3(0, target_dir, 0))
    end

end


---@param skill_id 技能id
---@param caster_unit 施法者unit
-- 这里假设吟唱特效总是要添加为unit的子对象，或者说，跟随unit一起移动
function M:add_skill_sing_eft(skill_id, caster_unit,sfx_type, mount_point_type)
    local skill_client_cfg = dbc.spell_client[skill_id]
    local sing_sfx_path = skill_client_cfg[sfx_type]

    -- 没有配置特效则返回 --
    if type(sing_sfx_path) == "table" then
        if #sing_sfx_path == 0 then
            return
        end
    else
        if sing_sfx_path == nil or sing_sfx_path == "" or sing_sfx_path == "n" then
            return
        else
            local t = {}
            table.insert(t, sing_sfx_path)
            sing_sfx_path = t
        end
    end
    
    -- 特效挂点列表
    local sing_mount_point = skill_client_cfg[mount_point_type]
    if type(sing_mount_point) ~= "table" then
        local t = {}
        table.insert(t, sing_mount_point)
        sing_mount_point = t
    end
    
    -- 创建特效
    for i, v in ipairs(sing_sfx_path) do
        
        local sfx_path = v
        local mount_point = sing_mount_point[i]
        if mount_point == nil then
            -- todo 使用正确的缺省挂载点
            mount_point = "bottom"
        end
        
        caster_unit:createChild(string.format("%s_%s_%s_%s_%s", "unit_sfx_sing", skill_id, i, os.time(), math.random()), "skill_sing_sfx",
            {
                unit = caster_unit,
                sfx_path = sfx_path,
                mount_point = mount_point,
            })
    end

end
---@param buff_data buff数据
-- buff特效应该总是要添加为unit的子对象，跟随unit一起移动
function M:add_buff_eft(buff_data, unit)
    local skill_id = buff_data:get_spell_id()
    local spell_cfg = dbc.spell[skill_id]
    local skill_client_cfg = dbc.spell_buff_client[buff_data:get_buff_id()]
    
    app:logInfo("添加buff:-->" .. spell_cfg.name.."  层数:"..buff_data:get_stack_num()) 

    if (skill_client_cfg == nil) then
        if (spell_cfg.is_passive == false) then app:logError("spell_buff_client == nil id-->" .. buff_data:get_spell_id().."  "..buff_data:get_stack_num()) end 
        return
    end
    local buff_sfx_path = skill_client_cfg.buff_sfx
    -- 没有配置特效则返回 --
    if type(buff_sfx_path) == "table" then
        if #buff_sfx_path == 0 then
            return
        end
    else
        if buff_sfx_path == nil or buff_sfx_path == "" or buff_sfx_path == "n" then
            return
        else
            local t = {}
            table.insert(t, buff_sfx_path)
            buff_sfx_path = t
        end
    end
    
    -- 特效挂点列表
    local mount_point = skill_client_cfg.buff_mount_point
    if type(mount_point) ~= "table" then
        local t = {}
        table.insert(t, mount_point)
        mount_point = t
    end
    
    -- 创建特效
    for i, v in ipairs(buff_sfx_path) do
        --print("the mount point for buff ", skill_id, mount_point[i])
        local sfx_path = v
        local mount_point = mount_point[i]
        if mount_point == nil then
            -- todo 使用正确的缺省挂载点
            mount_point = "bottom"
        end
        
        unit:createChild(string.format("%s_%s_%s_%s_%s_%s", "skill_buff_sfx", skill_client_cfg.id, buff_data:get_slot(),
            unit:get_id(), os.time(), i), "skill_buff_sfx",
        {
            unit = unit,
            sfx_path = sfx_path,
            mount_point = mount_point,
            buff_data = buff_data,
        })
    end

end

-- 增加充能特效 常驻在身上的特效 随着技能的使用或者更换来显示或隐藏
function M:add_charge_sfx(sfx_path, mount_point, unit, skill_data)
    local frame_list = {}
    -- 没有配置特效则返回 --
    if type(sfx_path) == "table" then
        if #sfx_path == 0 then
            return
        end
    else
        if sfx_path == nil or sfx_path == "" or sfx_path == "n" then
            return
        else
            local t = {}
            table.insert(t, sfx_path)
            sfx_path = t
        end
    end
    
    -- 特效挂点列表
    if type(mount_point) ~= "table" then
        local t = {}
        table.insert(t, mount_point)
        mount_point = t
    end
    
    -- 创建特效
    for i, v in ipairs(sfx_path) do
        local path = v
        local mount_point = mount_point[i]
        if mount_point == nil then
            -- todo 使用正确的缺省挂载点
            mount_point = "bottom"
        end
        
        local frame = unit:createChild(string.format("%s_%s_%s", "skill_charge_sfx", skill_data:get_id(), os.time()),
            "skill_charge_sfx",
            {
                unit = unit,
                sfx_path = path,
                mount_point = mount_point,
                skill_data = skill_data,
            })
        
        table.insert(frame_list, frame)
    end
    
    return frame_list
end

-- 在角色中添加自动销毁技能特效
function M:add_autodestory_sklsfx_in_unit(skill_id, skill_client_id, sfx_type, mount_point_type, unit, time,skill_queue_object)
    local skill_client_cfg = dbc.spell_client[skill_client_id]
    local sfx_path = skill_client_cfg[sfx_type]
    local mount_point = skill_client_cfg[mount_point_type]

    -- 没有配置特效则返回 --
    if type(sfx_path) == "table" then
        if #sfx_path == 0 then
            return
        end
    else
        if sfx_path == nil or sfx_path == "" or sfx_path == "n" then
            return
        else
            local t = {}
            table.insert(t, sfx_path)
            sfx_path = t
        end
    end

    -- 特效挂点列表
    if type(mount_point) ~= "table" then
        local t = {}
        table.insert(t, mount_point)
        mount_point = t
    end

    -- 创建特效
    for i, v in ipairs(sfx_path) do
        local path = v
        local mount_point = mount_point[i]
        if mount_point == nil then
            -- todo 使用正确的缺省挂载点
            mount_point = "bottom"
        end

        if mount_point == "world" then
            -- 对地狱火撞击特效进行特殊处理，释放位置在目标点，不跟随unit位置 by:wdd
            if skill_client_cfg.move_effect == enum.battle.Move_Type_4_Client.HELL_FIRE_STRIKE then
                if skill_queue_object then
                    local world = app:getFrameMgr():getFrame("world")
                    local sfx = world:add_skl_sfx(skill_id, skill_client_id, path, skill_queue_object.target_pos, Vector3(0, unit:get_dir(), 0))
                else
                    app:logError("地狱火撞击的目标点为nil")
                end

            else
                local world = app:getFrameMgr():getFrame("world")
                local sfx = world:add_skl_sfx(skill_id, skill_client_id, path, unit:get_pos(), Vector3(0, unit:get_dir(), 0))
            end
        else
            unit:createChild(string.format("%s_%s_%s_%s_%s_%s", "unit_sfx", sfx_type, skill_client_id, i, os.time(), math.random()),
            "unit_auto_destroy_sfx",
            {
                unit = unit,
                sfx_path = path,
                mount_point = mount_point,
                time = time,
            })
        end
    end
end

function M:add_aim_sfx_in_unit(skill_id, unit)
    local skill_client_cfg = dbc.spell_client[skill_id]
    local sfx_path = skill_client_cfg[enum.battle.Skill_Sfx_Type.AIM]

    -- 没有配置特效则返回 --
    if type(sfx_path) == "table" then
        if #sfx_path == 0 then
            return
        end
    else
        if sfx_path == nil or sfx_path == "" or sfx_path == "n" then
            return
        else
            local t = {}
            table.insert(t, sfx_path)
            sfx_path = t
        end
    end

    -- 特效挂点列表
    local mount_point = skill_client_cfg[enum.battle.Skill_Mount_Point_Type.AIM]
    if type(mount_point) ~= "table" then
        local t = {}
        table.insert(t, mount_point)
        mount_point = t
    end

    local all_sfx = {}
    -- 创建特效
    for i, v in ipairs(sfx_path) do
        local path = v
        local mount_point = mount_point[i]
        if mount_point == nil then
            -- todo 使用正确的缺省挂载点
            mount_point = "bottom"
        end

        local sfx_frame = unit:createChild(string.format("%s_%s_%s_%s_%s_%s", "aim_sfx", enum.battle.Skill_Sfx_Type.AIM, skill_id, i, os.time(), math.random()),
        "unit_auto_destroy_sfx",
        {
            unit = unit,
            sfx_path = path,
            mount_point = mount_point,
        })
        table.insert(all_sfx, sfx_frame)
    end

    return all_sfx
end

function M:add_autodestory_sfx_in_unit(sfx_path, mount_point, unit, time)
    -- 没有配置特效则返回 --
    if type(sfx_path) == "table" then
        if #sfx_path == 0 then
            return
        end
    else
        if sfx_path == nil or sfx_path == "" or sfx_path == "n" then
            return
        else
            local t = {}
            table.insert(t, sfx_path)
            sfx_path = t
        end
    end

    -- 特效挂点列表
    if type(mount_point) ~= "table" then
        local t = {}
        table.insert(t, mount_point)
        mount_point = t
    end

    -- 创建特效
    for i, v in ipairs(sfx_path) do
        local path = v
        local mount_point = mount_point[i]
        if mount_point == nil then
            -- todo 使用正确的缺省挂载点
            mount_point = "bottom"
        end

        if mount_point == "world" then
            local world = app:getFrameMgr():getFrame("world")
            local sfx = world:add_space_sfx(path, unit:get_pos(), Vector3(0, unit:get_dir(), 0))
        else
            unit:createChild(string.format("%s_%s_%s_%s_%s", "unit_sfx", i,v, os.time(), math.random()),
            "unit_auto_destroy_sfx",
            {
                unit = unit,
                sfx_path = path,
                mount_point = mount_point,
                time = time,
            })
        end
    end
end


-- 预加载某技能的有关资源
function M:preload_skill_asset(model_id, skill_id)
    local skill_client_cfg = dbc.spell_client[skill_id]
    local anima_assest = {"sing_anim_a", "sing_anim_b", "instant_anim", "hit_anim"}
    local sfx_assest = enum.battle.Skill_Sfx_Type
    if (skill_client_cfg == nil) then
        Debug.LogError("预加载某技能的有关资源失败，model_id：" .. tostring(model_id) .. " skill_id: " .. tostring(skill_id))
        return
    end
    for k, v in pairs(anima_assest) do
        local asset_path = app:get_model_mgr().GetAnimationPathById(model_id, skill_client_cfg[v])
        if asset_path == nil or asset_path == "" or asset_path == "n" then
            -- do nothing
        elseif (type(asset_path) == "table") then
            for i, j in pairs(asset_path) do
                self:subscribe(app:getResMgr():rxLoad(j), function(asset)
                    --print("-------预加载动作:", asset)
                end)
            end
        else
            self:subscribe(app:getResMgr():rxLoad(asset_path), function(asset)
                --print("-------预加载动作:",asset)
            end)
        end
    end

    for k, v in pairs(sfx_assest) do
        if (v == enum.battle.Skill_Sfx_Type.BUFF) then
            --local asset_path = dbc.spell_client[skill_id][v]
        else
            local asset_path = skill_client_cfg[v]
        end


        if asset_path == nil or asset_path == "" or asset_path == "n" then
            -- do nothing
        elseif (type(asset_path) == "table") then
            for i, j in pairs(asset_path) do
                self:subscribe(app:getResMgr():rxLoad(j), function(asset)
                    --print("-------预加载特效:", asset)
                end)
            end
        else
            self:subscribe(app:getResMgr():rxLoad(asset_path), function(asset)
                --print("-------预加载特效:",asset)
            end)
        end
    end
end

function M:preload_atk_asset_by_path(model_id, path)
    self:subscribe(app:getResMgr():rxLoad(app:get_model_mgr().GetAnimationPathById(model_id, path)), function(asset)
        --print("-------预加载普通攻击:", asset)
    end)
end


function M:get_skill_effect_cfg(skill_id, index)
    local skill_effect_table = dbc.spell_effect

    for k, v in pairs(skill_effect_table) do
        if v.spell_id == skill_id and v.index == index then
            --print("-------get_skill_effect_cfg", v.spell_id, v.index, v.radius)
            return v
        end
    end

    return nil
end

-- 从某unit向另一个unit发射飞弹
function M:shoot_projectile_at_unit(skill_id, skill_client_id, caster_unit, target_unit, on_hit)
    local skill_client_cfg = dbc.spell_client[skill_client_id]
    local sfx_path = skill_client_cfg[enum.battle.Skill_Sfx_Type.CAST]

    -- 没有配置特效则返回 --
    if type(sfx_path) == "table" then
        if #sfx_path == 0 then
            return
        end
    else
        if sfx_path == nil or sfx_path == "" or sfx_path == "n" then
            return
        else
            local t = {}
            table.insert(t, sfx_path)
            sfx_path = t
        end
    end

    -- 飞弹起点挂点列表
    local start_mount_point = skill_client_cfg[enum.battle.Skill_Mount_Point_Type.CAST_START]
    if type(start_mount_point) ~= "table" then
        local t = {}
        table.insert(t, start_mount_point)
        start_mount_point = t
    end

    -- 飞弹终点挂点列表
    local end_mount_point = skill_client_cfg[enum.battle.Skill_Mount_Point_Type.CAST_END]
    if type(end_mount_point) ~= "table" then
        local t = {}
        table.insert(t, end_mount_point)
        end_mount_point = t
    end

    local frame_mgr = app:getFrameMgr()
    local world = frame_mgr:getFrame("world")

    -- 创建飞弹
    for i, v in ipairs(sfx_path) do

        -- 飞弹初始位置 角色发射挂点
        -- pacman 2017-12-02 日后可能要拓展一下，支持从任意位置，而不是总是从某unit开始发射
        local skill_client_cfg = dbc.spell_client[skill_client_id]
        local mount_point = start_mount_point[i]

        -- 起始位置
        local start_pos = caster_unit:get_pos()
        local parent = caster_unit:get_bone(mount_point)
        if parent ~= nil then
            --print("********* found a bone", mount_point)
            start_pos = parent.position
        end
        local projectile = world:add_projectile(skill_id, skill_client_id, v, caster_unit, start_pos, target_unit, end_mount_point[i], on_hit)

        local ProjectionAction = require("frame.projectile_action")
        projectile:set_action(ProjectionAction.FlyToUnit(projectile, target_unit, end_mount_point[i], on_hit))
    end

end


-- 从某unit向世界某位置发射飞弹
function M:shoot_projectile_at_pos(skill_id, skill_client_id, caster_unit, target_pos, on_hit)
    local skill_client_cfg = dbc.spell_client[skill_client_id]
    local sfx_path = skill_client_cfg[enum.battle.Skill_Sfx_Type.CAST]

    -- 没有配置特效则返回 --
    if type(sfx_path) == "table" then
        if #sfx_path == 0 then
            return
        end
    else
        if sfx_path == nil or sfx_path == "" or sfx_path == "n" then
            return
        else
            local t = {}
            table.insert(t, sfx_path)
            sfx_path = t
        end
    end

    -- 飞弹起点挂点列表
    local start_mount_point = skill_client_cfg[enum.battle.Skill_Mount_Point_Type.CAST_START]
    if type(start_mount_point) ~= "table" then
        local t = {}
        table.insert(t, start_mount_point)
        start_mount_point = t
    end

    local frame_mgr = app:getFrameMgr()
    local world = frame_mgr:getFrame("world")
    -- 创建飞弹
    for i, v in ipairs(sfx_path) do
        -- 飞弹初始位置 角色发射挂点
        local skill_client_cfg = dbc.spell_client[skill_client_id]
        local mount_point = start_mount_point[i]
        local start_pos = caster_unit:get_pos()

        local parent = caster_unit:get_bone(mount_point)
        if parent ~= nil then
            start_pos = parent.position
        end

        local projectile = world:add_projectile(skill_id, skill_client_id, v, caster_unit, start_pos, nil, nil, on_hit)
        local ProjectionAction = require("frame.projectile_action")
        projectile:set_action(ProjectionAction.FlyToPos(projectile, target_pos, on_hit))
    end
end




-- 技能作用目标类型判断 --
-- 是否无需手动选择一个目标
---@ skill_effect_list table 某技能的effect列表
function M:is_target_type_none(skill_effect_list)
    -- 有任一effect需要即为false
    for i, v in ipairs(skill_effect_list) do
        local target_type = v.target
        -- 如果目标类型为【无目标】或者【施法者】系列(不含CASTER_CONE_ENEMY),则无需手动选择一个目标
        if target_type == enum.shared.SpellEffectTarget.NONE or
        target_type == enum.shared.SpellEffectTarget.CASTER or
        target_type == enum.shared.SpellEffectTarget.CASTER_AREA or
        target_type == enum.shared.SpellEffectTarget.CASTER_AREA_ENEMY or
        target_type == enum.shared.SpellEffectTarget.CASTER_AREA_ALLY or
        target_type == enum.shared.SpellEffectTarget.CASTER_AREA_PARTY or
        target_type == enum.shared.SpellEffectTarget.CASTER_AREA_RAID or
        target_type == enum.shared.SpellEffectTarget.CASTER_RECT_ENEMY or
        target_type == enum.shared.SpellEffectTarget.CASTER_RECT_ALLY or
        target_type == enum.shared.SpellEffectTarget.CASTER_RECT_PARTY or
        target_type == enum.shared.SpellEffectTarget.CASTER_RECT_RAID
        then
            -- do nothing
        else
            return false
        end
    end
    return true
end


-- 是否需要手动指定目标对象
function M:is_target_type_target(skill_effect_list)
    -- 有任一effect需要即为true
    for i, v in ipairs(skill_effect_list) do
        local target_type = v.target
        -- 如果目标类型为【目标】系列,则需手动选择一个目标
        if target_type == enum.shared.SpellEffectTarget.TARGET or
        target_type == enum.shared.SpellEffectTarget.TARGET_ENEMY or
        target_type == enum.shared.SpellEffectTarget.TARGET_ALLY or
        target_type == enum.shared.SpellEffectTarget.TARGET_PARTY or
        target_type == enum.shared.SpellEffectTarget.TARGET_RAID or
        target_type == enum.shared.SpellEffectTarget.TARGET_AREA or
        target_type == enum.shared.SpellEffectTarget.TARGET_AREA_ENEMY or
        target_type == enum.shared.SpellEffectTarget.TARGET_AREA_ALLY or
        target_type == enum.shared.SpellEffectTarget.TARGET_AREA_PARTY or
        target_type == enum.shared.SpellEffectTarget.TARGET_AREA_RAID
        then
            return true
        end
    end
    return false
end


-- 是否需要手动指定目标点区域
---@ skill_effect_list table 某技能的effect列表
function M:is_target_type_dest_area(skill_effect_list)
    -- 有任一effect需要指定目标点区域即为true
    for i, v in ipairs(skill_effect_list) do
        local target_type = v.target
        if target_type == enum.shared.SpellEffectTarget.DEST_AREA or
        target_type == enum.shared.SpellEffectTarget.DEST_AREA_ENEMY or
        target_type == enum.shared.SpellEffectTarget.DEST_AREA_ALLY or
        target_type == enum.shared.SpellEffectTarget.DEST_AREA_RAID or
        target_type == enum.shared.SpellEffectTarget.CASTER_RECT_ENEMY or
        target_type == enum.shared.SpellEffectTarget.CASTER_RECT_ALLY or
        target_type == enum.shared.SpellEffectTarget.CASTER_RECT_PARTY or
        target_type == enum.shared.SpellEffectTarget.CASTER_RECT_RAID
        then
            return true
        end
    end
    return false
end

-- 是否为伤害(治疗)效果
function M:is_damage_effect(spell_id)
    local effects = self:get_effect_cfg_list(spell_id)

    for i, v in ipairs(effects) do
        local type = v.type
        if type == enum.battle.SpellEffectType.SP_DAMAGE or
        type == enum.battle.SpellEffectType.AP_DAMAGE or
        type == enum.battle.SpellEffectType.WD_DAMAGE or
        type == enum.battle.SpellEffectType.WDN_DAMAGE or
        type == enum.battle.SpellEffectType.HEAL or
        type == enum.battle.SpellEffectType.FIXED_DAMAGE
        then
            return true
        end
    end

    return false

end

-- 是否需要手动指定施法角度
---@ skill_effect_list table 某技能的effect列表
function M:is_target_type_dir(skill_effect_list)
    -- 有任一effect需要指定即为true
    for i, v in ipairs(skill_effect_list) do
        local target_type = v.target
        if target_type == enum.shared.SpellEffectTarget.CASTER_CONE_ENEMY then
            return true
        end
    end
    return false
end


-- 获得指定技能的effet列表
function M:get_effect_cfg_list(skill_id)
    local list = {}
    local skill_effect_table = dbc.spell_effect
    for i, v in pairs(skill_effect_table) do
        if v.spell_id == skill_id then
            table.insert(list, v)
        end
    end
    return list
end



-- 获取指定技能的最大作用范围
---@ param is_include_trigger_spell bool 是否(递归)包含触发技能
function M:get_skill_max_radius(skill_id, is_include_trigger_spell)
    local ret = 0
    local effect_list = M.get_effect_cfg_list(self, skill_id)
    for i, v in pairs(effect_list) do
        if is_include_trigger_spell then
            local trigger_spell_id = v.trigger_spell
            if trigger_spell_id ~= 0 or trigger_spell_id ~= nil or trigger_spell_id ~= "" then
                local trigger_spell_max_r = M.get_skill_max_radius(self, trigger_spell_id, is_include_trigger_spell)
                if trigger_spell_max_r > ret then
                    ret = trigger_spell_max_r
                end
            end
        end

        if v.radius > ret then
            --print("^^^^^^^^^^^^^^^^^^^^larger radius", skill_id, i, v.radius)
            ret = v.radius
        end
    end

    return ret
end

-- 获取指定技能的宽度
---@ param is_include_trigger_spell bool 是否(递归)包含触发技能
function M:get_skill_max_radius2(skill_id, is_include_trigger_spell)
    local ret = 0
    local effect_list = M.get_effect_cfg_list(self, skill_id)
    for i, v in pairs(effect_list) do
        if is_include_trigger_spell then
            local trigger_spell_id = v.trigger_spell
            if trigger_spell_id ~= 0 or trigger_spell_id ~= nil or trigger_spell_id ~= "" then
                local trigger_spell_max_r = M.get_skill_max_radius2(self, trigger_spell_id, is_include_trigger_spell)
                if trigger_spell_max_r > ret then
                    ret = trigger_spell_max_r
                end
            end
        end

        if v.radius2 > ret then
            --print("^^^^^^^^^^^^^^^^^^^^larger radius", skill_id, i, v.radius)
            ret = v.radius2
        end
    end

    return ret
end



-- 指定技能是否有吟唱环节?
function M:is_skill_has_to_sing_q(skill_queue_object)
    local spell_id = skill_queue_object.spell_id
    local spell_client_id = skill_queue_object.spell_client_id
    local cast_time = skill_queue_object.cast_time

    local skill_cfg = dbc.spell[spell_id]
    local spell_client_cfg = dbc.spell_client[spell_client_id]

    local channel_interval = skill_cfg.channel_interval -- 引导间隔
    --local is_prepare = spell_client_cfg.is_prepare

    -- 非引导技能，且吟唱时间不为0，则有吟唱环节`
    local result = (channel_interval == 0 and cast_time ~= 0)
    return result
end

function M:is_skill_has_to_sing_d(skill_data)
    local spell_id = skill_data:get_id()
    local spell_client_cfg = skill_data:get_client_cfg()
    local cast_time = skill_data:get_cast_time()

    local skill_cfg = dbc.spell[spell_id]
    local channel_interval = skill_cfg.channel_interval -- 引导间隔
    --local is_prepare= spell_client_cfg.is_prepare

    -- 非引导技能，且吟唱时间不为0，则有吟唱环节`
    local result = (channel_interval == 0 and cast_time ~= 0)
    return result
end

-- 指定技能是否有引导环节
function M:is_skill_has_to_channel(skill_id)
    local skill_cfg = dbc.spell[skill_id]
    local channel_interval = skill_cfg.channel_interval -- 引导间隔
    return channel_interval > 0
end

-- 返回变身技能 模型id  如果为0 则不变身
function M:get_trans_id(skill_effect_list)
    for i, v in ipairs(skill_effect_list) do
        local effect_aura = v.aura
        local effect_target = v.target
        -- 临时做法 以后会统一由服务器通知
        if effect_aura == 19 and effect_target == enum.shared.SpellEffectTarget.CASTER then
            return v.param1
        end
    end
    return 0
end

-- ↓↓↓↓↓↓↓↓↓↓↓↓ 位移技能 ↓↓↓↓↓↓↓↓↓↓↓↓ --
-- 是否为瞬移技能
function M:is_teleport_skill(skill_effect_list)
    -- 有任一effect为瞬移即为true
    for i, v in ipairs(skill_effect_list) do
        local effect_type = v.type
        if effect_type == 12 then
            return true, v.base_point
        end
    end
    return false
end

-- 是否为冲锋技能
function M:is_assault_skill(skill_effect_list)
    for i, v in ipairs(skill_effect_list) do
        local effect_type = v.type
        if effect_type == 24 then
            return true, v.base_point
        end
    end
    return false
end

function M:amend_target_pos(spell_id,self_unit,target_unit)
    local skill_effect_list = M:get_effect_cfg_list(spell_id)

    for i, v in ipairs(skill_effect_list) do
        local effect_type = v.type

        if effect_type == 11 or
        effect_type == 12 or
        effect_type == 24
        then
            local self_radius = self_unit:get_bounding_radius()
            local target_radius =  target_unit:get_bounding_radius()
            local min_dist = self_radius + target_radius
            local tar_pos = target_unit:get_pos()
            local real_dist = Vector3.Distance(self_unit:get_pos(),tar_pos)

            if(real_dist<=min_dist) then
                return self_unit:get_pos()
            else
                local difference = self_unit:get_pos() - tar_pos
                difference = difference.normalized * min_dist
                return Vector3(difference.x + tar_pos.x,tar_pos.y,difference.z + tar_pos.z)
            end
        end
    end

    return target_unit:get_pos()
end



-- ↓↓↓↓↓↓↓↓↓↓↓↓ 处理特殊技能的.CAST ↓↓↓↓↓↓↓↓↓↓↓↓ --
function M:check_special_skill_cast(unit, skill_queue_object)
    local func = self["special_skill_cast_" .. skill_queue_object.spell_client_id]
    if (func == nil) then
        return false
    else
        func(self, unit, skill_queue_object)
        return true
    end
end



-- 浩劫 恶魔变身
function M:special_skill_cast_913016(unit, skill_queue_object)

    local prepare_tran_id = unit:get_prepare_trans_id()

    if(prepare_tran_id ~= 0 and unit:get_display_id() == prepare_tran_id) then
        local client_cfg = dbc.spell_client[skill_queue_object.spell_client_id]
        local main_act = unit:get_main_act()
        unit:emit_event("run_function","transfiguration",unit:get_prepare_trans_id(),function()
            unit:emit_event("override_animator_clip", enum.unit.PCAnimStateName.AUTO_MOVE_A, client_cfg.move_anim[2])
            unit:emit_event("override_animator_clip", enum.unit.PCAnimStateName.AUTO_MOVE_B, client_cfg.instant_anim)
            unit:set_attr("main_act",main_act,true)
            unit:emit_event("anim_trigger", "auto_move")
            unit:emit_event("anim_param", "auto_move_type", "int", enum.battle.Move_Type_4_Client.DEVIL_TRANS)
        end)
    end
end

-- ↑↑↑↑↑↑↑↑↑↑↑↑ 处理特殊技能的.CAST ↑↑↑↑↑↑↑↑↑↑↑↑ --
return M
