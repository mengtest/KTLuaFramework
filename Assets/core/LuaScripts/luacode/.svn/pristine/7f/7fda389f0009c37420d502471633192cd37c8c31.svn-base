local View = require("system.view")
local Mini_map_view = class("Mini_map_view", View)

function Mini_map_view:doInit()

    --Util_log:logError(Util_log.Mask.SJG_Map, string.format("parent.name = %s, parent.child0.name = %s", self:getParent():getGO().transform.name, self:getParent():getGO().transform:GetChild(0).name))
    local ui_main_entity_tr = self:getParent():getGO().transform:GetChild(0)
    local ctrl_node = ui_main_entity_tr:Find("MiniMap")

    self.m_world = self:getFrame("world")
    self.m_quest_manager = self:getFrame("quest_manager")
    self.m_scale_x = nil
    self.m_scale_y = nil
    self.m_moveable_rt = nil
    self.m_layer_quest_rt = nil

    --关注任务
    self.m_interest_quest_data = nil       --关注任务数据
    self.m_interest_quest_id = -1
    self.m_interest_pos = nil --关注任务在场景中的位置
    self.m_interest_status = -1 --关注任务的状态，用于通过npc来交任务

    --追踪任务
    self.m_map_id = self.m_world:get_map_id()
    self.m_is_show_trace_one = false
    self.m_is_show_trace_two = false
    self.m_trace_one_quest_id = -1   --  -1代表nil，即没有追踪任务时
    self.m_trace_two_quest_id = -1   --  同上
    self.m_trace_one_pos = nil  --追踪任务1在场景中的位置
    self.m_trace_two_pos = nil  --追踪任务2在场景中的位置

    --npc任务状态列表
    self.m_giver_map = {}

    self.m_quest_condition_aim_area_dict = {}
    self.m_quest_aim_area_dict = {}

    -- boss位置
    self.m_boss_rt = nil

    self:init_with_go(ctrl_node, ui_main_entity_tr)
end

function Mini_map_view:on_prepared()
    self:init()

    self:subscribe(self:getFrame():on_event("refresh_owner_pos"), function(pos)
        self:refresh_owner_pos(pos)
    end)
    self:subscribe(self:getFrame():on_event("refresh_owner_dir"), function(dir)
        self:refresh_owner_dir(dir)
    end)
    self:subscribe(self:getFrame():on_event("show_quest_condition_aim_area"), function(quest_id, index)
        self:show_quest_condition_aim_area(quest_id, index)
    end)
    self:subscribe(self:getFrame():on_event("hide_quest_condition_aim_area"), function(quest_id, index)
        self:hide_quest_condition_aim_area(quest_id, index)
    end)
    self:subscribe(self:getFrame():on_event("show_quest_aim_area"), function(quest_id)
        self:show_quest_aim_area(quest_id)
    end)
    self:subscribe(self:getFrame():on_event("hide_quest_aim_area"), function(quest_id)
        self:hide_quest_aim_area(quest_id)
    end)
    --关注任务
    self:subscribe(self:getFrame():on_event("interest_quest_data"), function(quest_id, quest_data)
        self:set_interest_quest_data(quest_id, quest_data)
    end)

    --追踪任务
    self:subscribe(self:getFrame():on_event("add_trace"), function(quest_id)
        self:add_trace(quest_id)
    end)
    self:subscribe(self:getFrame():on_event("del_trace"), function(quest_id)
        self:del_trace(quest_id)
    end)

    -- 是否在副本
    self:subscribe(self:getFrame():on_event("is_in_instance"), function(instance_id)
        self:get_is_in_instance(instance_id)
    end)

    --npc状态改变
    self:subscribe(self:getFrame():on_event("giver_status"), function(giver_id, quest_id, giver_pos, giver_status)
        self:set_giver_status(giver_id, quest_id, giver_pos, giver_status)
    end)

    --切换地图
    self:subscribe(self:getFrame("world"):on_event_attr_set("map_id", false), function(val)
        local temp_map_size = Vector2(2000, 2000)
        if #dbc.map[val].right_top == 0 or #dbc.map[val].left_bottom == 0 then
            Debug.LogError("Mini_map_view ----> map表中没有配置场景地图的左下角坐标和右上角坐标")
        else
            temp_map_size = Vector2(dbc.map[val].right_top[1] - dbc.map[val].left_bottom[1], dbc.map[val].right_top[2] - dbc.map[val].left_bottom[2])
        end

        self.m_scale_x = self.mini_map_size.x / temp_map_size.x
        self.m_scale_y = self.mini_map_size.y / temp_map_size.y
        self:getFrame():set_scale(self.m_scale_x, self.m_scale_y)

        local path = dbc.map[val].map_pic_path
        self:change_sprite(self.m_map, path)

    end )
end

function Mini_map_view:init()
    local map_id = self.m_world:get_map_id()
    --因为map表中有些地图没有配置左下角和右上角的坐标，所以temp_map_size暂时默认设置为Vector2(2000, 2000)
    local temp_map_size = Vector2(2000, 2000)
    if #dbc.map[map_id].right_top == 0 or #dbc.map[map_id].left_bottom == 0 then
        self.m_x = 0
        self.m_y = 0
        Debug.LogError("Mini_map_view ----> map表中没有配置场景地图的左下角坐标和右上角坐标")
    else
        temp_map_size = Vector2(dbc.map[map_id].right_top[1] - dbc.map[map_id].left_bottom[1], dbc.map[map_id].right_top[2] - dbc.map[map_id].left_bottom[2])
        -- map表中的左下角的坐标
        self.m_x = dbc.map[map_id].left_bottom[1]
        self.m_y = dbc.map[map_id].left_bottom[2]

    end

    local tr = self:getGO().transform
    self.mini_map_size = tr:Find("mask/moveable_items/bg_terrain"):GetComponent(UnityEngine.RectTransform).rect.size

    -- boss地图大小
    self.m_mini_map = tr:Find("mask/moveable_items/bg_terrain"):GetComponent(UnityEngine.RectTransform)
    self.m_scale_x = self.mini_map_size.x / temp_map_size.x
    self.m_scale_y = self.mini_map_size.y / temp_map_size.y
    self.m_moveable_rt = tr:Find("mask/moveable_items"):GetComponent(UnityEngine.RectTransform)
    self.m_owner_rt = tr:Find("owner"):GetComponent(UnityEngine.RectTransform)
    self.m_layer_quest_rt = tr:Find("mask/moveable_items/layer_quest"):GetComponent(UnityEngine.RectTransform)
    self:getFrame():set_scale(self.m_scale_x, self.m_scale_y)

    --加载小地图图片
    self.m_map = self.m_mini_map:GetComponent(UI.Image)
    local map_id = self.m_world:get_map_id()
    local path = dbc.map[map_id].map_pic_path
    self:change_sprite(self.m_map, path)

    --追踪任务
    self.m_trace_one_rt = tr:Find("icon/trace_one"):GetComponent(UnityEngine.RectTransform)
    self.m_trace_two_rt = tr:Find("icon/trace_two"):GetComponent(UnityEngine.RectTransform)

    --关注任务
    self.m_interest_point_rt = tr:Find("icon/interest_point"):GetComponent(UnityEngine.RectTransform)
    self.m_mask_rt = tr:Find("mask"):GetComponent(UnityEngine.RectTransform)
    self.m_minimap_radius = self.m_mask_rt.sizeDelta.x / 2--小地图半径
    self.m_border = self.m_minimap_radius - self.m_trace_one_rt.sizeDelta.x / 2

    --npc状态使用
    self.m_icon_tr = tr:Find("icon").transform
    self.m_mask_icon_rt = tr:Find("mask/moveable_items/icon"):GetComponent(UnityEngine.RectTransform)

    --关注任务，追踪任务特效
    self.m_is_play_interest_sfx = false
    self.m_is_play_trace_one_sfx = false
    self.m_is_play_trace_two_sfx = false
    self.m_interest_sfx = nil
    self.m_trace_one_sfx = nil
    self.m_trace_two_sfx = nil
    local interest_path = "sfx/skill/prefab/ui/ui_ditu_renwu_tishii_01.prefab"
    local trace_ont_path = "sfx/skill/prefab/ui/ui_ditu_renwu_tishii_cheng.prefab"
    local trace_two_path = "sfx/skill/prefab/ui/ui_ditu_renwu_tishii_lv.prefab"
    self:load_sfx(interest_path, self.m_interest_point_rt, "m_interest_sfx")
    self:load_sfx(trace_ont_path, self.m_trace_one_rt, "m_trace_one_sfx")
    self:load_sfx(trace_two_path, self.m_trace_two_rt, "m_trace_two_sfx")
end

function Mini_map_view:refresh_owner_pos(pos)
    --[[local map_pos = Vector2(-pos.x * self.m_scale_x, -pos.z * self.m_scale_y)
    self.m_moveable_rt.anchoredPosition = map_pos--]]
    self.m_moveable_rt.anchoredPosition3D = -self:project_3d_pos_to_map_pos(pos)

    --关注任务
    if self.m_interest_quest_data and self.m_interest_quest_data:get_interest() then
        self:set_quest_point_pos(self.m_interest_point_rt, self.m_interest_pos)
    end

    --追踪任务
    if self.m_trace_one_pos then
        self:set_quest_point_pos(self.m_trace_one_rt, self.m_trace_one_pos)
    end
    if self.m_trace_two_pos then
        self:set_quest_point_pos(self.m_trace_two_rt, self.m_trace_two_pos)
    end
end

function Mini_map_view:refresh_owner_dir(dir)
    self.m_owner_rt.localEulerAngles = Vector3(0, 0, -dir)
end

function Mini_map_view:show_quest_condition_aim_area(quest_id, index)
    local quest_layer = self.m_quest_condition_aim_area_dict[quest_id]
    if not quest_layer then
        quest_layer = {}
        self.m_quest_condition_aim_area_dict[quest_id] = quest_layer
    end
    local area_rt = quest_layer[index]
    if area_rt then
        --area_rt.gameObject:SetActive(true)
        return
    end

    local area_info = self.m_quest_manager:get_quest_list()[quest_id]:get_condition_aim_area(index)
    local area_data = self.m_world:get_area_data(area_info[1], area_info[2])
    if not area_data then
        return
    end

    quest_layer[index] = "locked"
    self:load("ui/map/aim_area.prefab", function(go)
        go.name = "quest_condition_aim_area_" .. area_info[2]
        area_rt = go:GetComponent(UnityEngine.RectTransform)
        area_rt.parent = self.m_layer_quest_rt
        area_rt.localScale = Vector3.one
        area_rt.anchoredPosition3D = self:project_3d_pos_to_map_pos(area_data.worldPosition)
        area_rt.sizeDelta = Vector2(2 * area_data.radius * self.m_scale_x, 2 * area_data.radius * self.m_scale_y)

        quest_layer[index] = area_rt
        Util_log:logError(Util_log.Mask.SJG_Map, string.format("quest_id = %d, index = %d, radius = %d\n area_data = \n%s", quest_id, index, 2 * area_data.radius, Util_string:get_string_by_tbl(area_data)))
    end)
end

function Mini_map_view:hide_quest_condition_aim_area(quest_id, index)
    local quest_layer = self.m_quest_condition_aim_area_dict[quest_id]
    if not quest_layer then
        return
    end
    local area_rt = quest_layer[index]
    if not area_rt then
        return
    end

    --关注任务
    --完成关注任务
    if self.m_interest_status == -1 then
        --说明该关注任务不是通过npc交付的
        self:cancel_or_finished_interest_quest()
    end

    Object.Destroy(area_rt.gameObject)
    table.remove(quest_layer, index)
    if #quest_layer == 0 then
        table.remove(self.m_quest_condition_aim_area_dict, quest_id)
    end
end

function Mini_map_view:show_quest_aim_area(quest_id)
    local area_rt = self.m_quest_aim_area_dict[quest_id]
    if area_rt then
        return
    end

    local area_info = self.m_quest_manager:get_quest_list()[quest_id]:get_aim_area()
    local area_data = self.m_world:get_area_data(area_info[1], area_info[2])
    if not area_data then
        return
    end

    self.m_quest_aim_area_dict[quest_id] = "locked"
    self:load("ui/map/aim_area.prefab", function(go)
        go.name = "quest_aim_area_" .. area_info[2]
        area_rt = go:GetComponent(UnityEngine.RectTransform)
        area_rt.parent = self.m_layer_quest_rt
        area_rt.localScale = Vector3.one
        area_rt.anchoredPosition3D = self:project_3d_pos_to_map_pos(area_data.worldPosition)
        area_rt.sizeDelta = Vector2(2 * area_data.radius * self.m_scale_x, 2 * area_data.radius * self.m_scale_y)

        self.m_quest_aim_area_dict[quest_id] = area_rt
    end)
end

function Mini_map_view:hide_quest_aim_area(quest_id)
    local area_rt = self.m_quest_aim_area_dict[quest_id]
    if not area_rt then
        return
    end

    Object.Destroy(area_rt.gameObject)
    self.m_quest_aim_area_dict[quest_id] = nil

end

function Mini_map_view:project_3d_pos_to_map_pos(pos)
    return Vector3((pos.x - self.m_x ) * self.m_scale_x, (pos.z - self.m_y ) * self.m_scale_y, 0)
end

--关注任务
--获取关注任务数据和关注任务区域的localPosition
function Mini_map_view:set_interest_quest_data(quest_id, quest_data)
    if quest_data:get_interest() then
        --关注任务
        --npc状态
        for _, giver in pairs(self.m_giver_map) do
            if giver["quest_id"] == quest_id then
                self.m_interest_quest_id = giver["quest_id"]
                self.m_interest_pos = giver["giver_pos"]
                self.m_interest_status = giver["giver_status"]
            end
        end

        self.m_interest_quest_data = quest_data
        self.m_interest_quest_id = quest_id
        if self.m_interest_status ~= Enum_Quest.Quest_State.Finished then
            local area_info = quest_data:get_all_active_aim_area()[1]
            local area_data = self.m_world:get_area_data(area_info[1], area_info[2])
            self.m_interest_pos = area_data.worldPosition
        end

        self.m_interest_point_rt.gameObject:SetActive(true)
        self.m_interest_point_rt:SetSiblingIndex(10)
        if self.m_interest_sfx and not self.m_is_play_interest_sfx then
            self.m_interest_sfx.gameObject:SetActive(true)
            self.m_interest_sfx:Play()
            self.m_is_play_interest_sfx = true
        end

        --追踪任务
        if self.m_trace_one_quest_id == quest_id then
            self.m_trace_one_rt.gameObject:SetActive(false)
            self.m_is_show_trace_one = false
        end
        if self.m_trace_two_quest_id == quest_id then
            self.m_trace_two_rt.gameObject:SetActive(false)
            self.m_is_show_trace_two = false
        end

        self:set_quest_point_pos(self.m_interest_point_rt, self.m_interest_pos)
    else --取消关注任务
        self:cancel_or_finished_interest_quest()

        --追踪任务
        if self.m_trace_one_quest_id == quest_id then
            self.m_trace_one_rt.gameObject:SetActive(true)
            self.m_is_show_trace_one = true
        end
        if self.m_trace_two_quest_id == quest_id then
            self.m_trace_two_rt.gameObject:SetActive(true)
            self.m_is_show_trace_two = true
        end
    end

end
--设置任务在小地图边缘的位置
function Mini_map_view:set_quest_point_pos(quest_point_rt, pos)
    local m_quest_area_reality_localPosition = self:project_3d_pos_to_map_pos(pos)
    local area_pos = m_quest_area_reality_localPosition + self.m_moveable_rt.localPosition

    local distance = math.sqrt(   math.pow(area_pos.x, 2) + math.pow(area_pos.y, 2)   )   --任务与owner的距离

    if distance < self.m_minimap_radius then
        --图标在小地图最上边和最右边时，将图标向小地图里略微调整
        local x = area_pos.x
        local y = area_pos.y
        if x >= self.m_border then
            x = self.m_border
        end
        if y >= self.m_border then
            y = self.m_border
        end
        quest_point_rt.localPosition = Vector3(x, y, 0)
    else
        local x, y = self:get_screen_pos(area_pos, self.m_minimap_radius)
        --图标在小地图最上边和最右边时，将图标向小地图里略微调整
        if x >= self.m_border then
            x = self.m_border
        end
        if y >= self.m_border then
            y = self.m_border
        end
        quest_point_rt.localPosition = Vector3(x, y, 0)
    end
end
--获取任务在小地图边缘的位置
--reality_localPosition : 任务区域在屏幕中的实际位置
function Mini_map_view:get_screen_pos(reality_localPosition, radius)

    --local owner_center_pos = self.m_owner_rt.localPosition
    local owner_center_pos = Vector3(0, 0, 0)   --由于owner层级改变，现由此代替原owner坐标
    local k = (reality_localPosition.y - owner_center_pos.y) / (reality_localPosition.x - owner_center_pos.x)
    local temp_x = radius / math.sqrt(1 + math.pow(k, 2))
    local temp_y = (radius * math.abs(k)) / math.sqrt(1 + math.pow(k, 2))
    local interest_x1 = temp_x + owner_center_pos.x
    local interest_x2 = -temp_x + owner_center_pos.x
    local interest_y1 = temp_y + owner_center_pos.y
    local interest_y2 = -temp_y + owner_center_pos.y

    if self:get_area_count(reality_localPosition.x, reality_localPosition.y) == 1 and self:get_area_count(interest_x1, interest_y1) == 1 then
        return interest_x1, interest_y1
    end

    if self:get_area_count(reality_localPosition.x, reality_localPosition.y) == 2 and self:get_area_count(interest_x2, interest_y1) == 2 then
        return interest_x2, interest_y1
    end

    if self:get_area_count(reality_localPosition.x, reality_localPosition.y) == 3 and self:get_area_count(interest_x2, interest_y2) == 3 then
        return interest_x2, interest_y2
    end

    if self:get_area_count(reality_localPosition.x, reality_localPosition.y) == 4 and self:get_area_count(interest_x1, interest_y2) == 4 then
        return interest_x1, interest_y2
    end

end
--以owner为圆心，获取关注任务所在象限
function Mini_map_view:get_area_count(x, y)
    if x > 0 and y > 0 then
        return 1
    end
    if x < 0 and y > 0 then
        return 2
    end
    if x < 0 and y < 0 then
        return 3
    end
    if x > 0 and y < 0 then
        return 4
    end
end
--取消关注任务或完成关注任务隐藏小黄点
function Mini_map_view:cancel_or_finished_interest_quest()
    self.m_interest_quest_data = nil
    self.m_interest_pos = nil
    self.m_interest_quest_id = -1
    self.m_interest_status = -1
    self.m_interest_point_rt.gameObject:SetActive(false)
end

-- 副本显示boss
function Mini_map_view:get_is_in_instance(instance_id)
    if instance_id ~= 0 then
        self.m_mini_map.localPosition = Vector3(0, 0, 0)
        self:load("ui/map/boss_point.prefab", function(go)
            go.name = "boss"
            self.m_boss_rt = go:GetComponent(UnityEngine.RectTransform)
            self.m_boss_rt.parent = self.m_layer_quest_rt
            self.m_boss_rt:SetSiblingIndex(9)
            self.m_boss_rt.localScale = Vector3.one
            self.m_boss_rt.anchoredPosition3D = self:project_3d_pos_to_map_pos(Vector3(130, 0, 100))
        end)
    else
        if self.m_boss_rt ~= nil then
            Object.Destroy(self.m_boss_rt.gameObject)
        end
    end
end

--追踪任务
function Mini_map_view:add_trace(quest_id)
    local traced_quest_list = self:getFrame("quest_bar"):get_traced_quest_list()
    for trace_id, v in pairs(traced_quest_list) do
        if v and v:get_quest_id() == quest_id then
            local area_info = v:get_all_active_aim_area()
            for j, k in pairs(area_info) do
                if area_info[j][1] == self.m_map_id then
                    local area_data = self.m_world:get_area_data(area_info[j][1], area_info[j][2])
                    if area_data then
                        if trace_id == 1 then
                            self.m_trace_one_pos = area_data.worldPosition
                            self.m_trace_one_rt.gameObject:SetActive(true)
                            if self.m_trace_one_sfx and not self.m_is_play_trace_one_sfx then
                                self.m_trace_one_sfx.gameObject:SetActive(true)
                                self.m_trace_one_sfx:Play()
                                self.m_is_play_trace_one_sfx = true
                            end
                            self:set_quest_point_pos(self.m_trace_one_rt, self.m_trace_one_pos)
                            self.m_is_show_trace_one = true
                            self.m_trace_one_quest_id = quest_id
                        end
                        if trace_id == 2 then
                            self.m_trace_two_pos = area_data.worldPosition
                            self.m_trace_two_rt.gameObject:SetActive(true)
                            if self.m_trace_two_sfx and not self.m_is_play_trace_two_sfx then
                                self.m_trace_two_sfx.gameObject:SetActive(true)
                                self.m_trace_two_sfx:Play()
                                self.m_is_play_trace_two_sfx = true
                            end
                            self:set_quest_point_pos(self.m_trace_two_rt, self.m_trace_two_pos)
                            self.m_is_show_trace_two = true
                            self.m_trace_two_quest_id = quest_id
                        end
                    end
                end
            end
        end
    end
end
function Mini_map_view:del_trace(quest_id)
    if self.m_trace_one_quest_id == quest_id then
        self.m_trace_one_pos = nil
        self.m_trace_one_rt.gameObject:SetActive(false)
        self.m_is_show_trace_one = false
        self.m_trace_one_quest_id = -1
    end
    if self.m_trace_two_quest_id == quest_id then
        self.m_trace_two_pos = nil
        self.m_trace_two_rt.gameObject:SetActive(false)
        self.m_is_show_trace_two = false
        self.m_trace_two_quest_id = -1
    end
    self:cancel_or_finished_interest_quest()
end

--npc
function Mini_map_view:set_giver_status(giver_id, quest_id, giver_pos, giver_status)

    local giver = {}
    giver["quest_id"] = quest_id
    giver["giver_status"] = giver_status
    giver["giver_pos"] = giver_pos
    self.m_giver_map[giver_id] = giver

    local npc_status = self.m_mask_icon_rt:Find("NpcStatus_" .. giver_id)

    if not npc_status then
        self:load("ui/map/NpcStatus.prefab", function(go)
            go.name = "NpcStatus_" .. giver_id
            area_rt = go:GetComponent(UnityEngine.RectTransform)
            area_rt.parent = self.m_mask_icon_rt
            area_rt.localScale = Vector3.one
            area_rt.anchoredPosition3D = self:project_3d_pos_to_map_pos(giver_pos)

            for i = 0, go.transform.childCount - 1 do
                if giver_status == i + 1 then
                    go.transform:GetChild(i).gameObject:SetActive(true)
                else
                    go.transform:GetChild(i).gameObject:SetActive(false)
                end
            end
        end)

        return
    end

    if giver_status == Enum_Quest.Quest_State.Invalid or giver_status == Enum_Quest.Quest_State.Received then
        for i = 0, npc_status.transform.childCount - 1 do
            npc_status.transform:GetChild(i).gameObject:SetActive(false)
        end
        return
    end

    --完成任务时，如果该任务是追踪任务，将追踪任务图标设置在npc处
    if giver_status == Enum_Quest.Quest_State.Finished then
        if self.m_trace_one_quest_id ~= -1 and self.m_trace_one_quest_id == quest_id then
            self.m_trace_one_pos = giver_pos
            self:set_quest_point_pos(self.m_trace_one_rt, self.m_trace_one_pos)
        end
        if self.m_trace_two_quest_id ~= -1 and self.m_trace_two_quest_id == quest_id then
            self.m_trace_two_pos = giver_pos
            self:set_quest_point_pos(self.m_trace_two_rt, self.m_trace_two_pos)
        end
        if self.m_interest_quest_id ~= -1 and self.m_interest_quest_id == quest_id then
            self.m_interest_quest_id = quest_id
            self.m_interest_status = giver_status
            self.m_interest_pos = giver_pos
            self:set_quest_point_pos(self.m_interest_point_rt, self.m_interest_pos)
        end
    end

    for i = 0, npc_status.transform.childCount - 1 do
        if giver_status == i + 1 then
            npc_status.transform:GetChild(i).gameObject:SetActive(true)
        else
            npc_status.transform:GetChild(i).gameObject:SetActive(false)
        end
    end

end

--加载地图
function Mini_map_view:change_sprite(obj, icon_path)
    self:subscribe(app:getResMgr():rxLoad(icon_path), function(asset_ref)
        local tex = asset_ref.asset
        if (tex == nil) then
            Debug.LogError("Mini_map_view ----> map表中没有配置地图路径或地图路径配置错误， path：" .. icon_path)
        else
            obj.sprite = Sprite.Create(tex, Rect(0, 0, tex.width, tex.height), Vector2(0.5, 0.5))
        end
    end)
end

--加载特效
function Mini_map_view:load_sfx(path, parent, cache)
    self:load(path, function(go)
        local component = go:GetComponent(ParticleSystem)
        go.transform:SetParent(parent)
        go.transform.localPosition = Vector3.zero
        go.transform.localScale = Vector3.one
        go:SetActive(false)
        component:Stop()

        local ui_manager = app:get_ui_manager()
        local depth = ui_manager:GetDepth(ui_manager:GetDepthName("ui_main"))

        local ps = go:GetComponentsInChildren(ParticleSystem)
        if (ps ~= nil) then
            for info in foreach(ps) do
                info.gameObject.layer = LayerMask.NameToLayer("UI")
                info:GetComponent(Renderer).sortingOrder = depth + 1
            end
        end

        if (cache == nil) then
            return
        end
        self[cache] = component
    end)
end

return Mini_map_view