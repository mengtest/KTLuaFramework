local AsyncAction = class("AsyncAction")

function AsyncAction:initialize()
	self.m_closed = nil
	self.m_co_run = nil
	self.m_cb_enter = nil
	self.m_cb_exit = nil
	self.m_cb_precondition = nil
end

function AsyncAction:coExecAndWait()
	assert(coroutine.running())
	self:start()
	while self:update() do
		coroutine.yield()
	end
	self:close()
end

function AsyncAction:start()
	if self.m_cb_enter then
		self.m_cb_enter()
	end
end

function AsyncAction:close()
	if not self.m_closed then
		self.m_closed = true
		if self.m_cb_exit then
			self.m_cb_exit()
		end
	end
end

function AsyncAction:update()
	if self.m_closed then
		return false
	end

	if self.m_cb_precondition then
		if not self.m_cb_precondition() then
			self:close()
			return false
		end
	end

	if self.m_co_run then
		coroutine.resume(self.m_co_run)

		if coroutine.status(self.m_co_run) ~= "dead" then
			return true
		end
	end

	self:close()
	return false
end

function AsyncAction:onPrecondition(cb)
	assert(type(cb) == "function")
	self.m_cb_precondition = cb
end

function AsyncAction:onEnter(cb)
	assert(type(cb) == "function")
	self.m_cb_enter = cb
end

function AsyncAction:onRun(cb)
	assert(type(cb) == "function")
	self.m_co_run = coroutine.create(cb)
end

function AsyncAction:onExit(cb)
	assert(type(cb) == "function")
	self.m_cb_exit = cb
end

return AsyncAction