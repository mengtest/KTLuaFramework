local View = require("system.view")
local skill_ui_main_view = class("skill_ui_main_view", View)


function skill_ui_main_view:doInit(param)
    self.m_ui_manager = app:get_ui_manager()

    ----是否需要移动
    self.m_need_move = false
    ----移动速度
    self.m_move_speed = 0
    ----移动时间
    self.m_move_time = 0.2
    ---滑动条的值
    self.m_scroll_bar_target_value = 0

    self.m_target_btn = nil

    self.m_btn_list = {}

    self:load("ui/SkillSystemShow.prefab", function(go)
        local frame = self:getFrame()
        self.m_ui_manager:AdaptResolution(self:getFrame():getFrameName(), go)
        local return_btn = go.transform:Find("skillshow_bg/return_btn"):GetComponent(UI.Button)
        local skill_down_bg = go.transform:Find("skillshow_bg/skill_down_bg").transform
        self.m_scroll_bar = skill_down_bg:Find("scrollbar"):GetComponent(UI.Scrollbar)
        self.m_drag_area_container = go.transform:Find("skillshow_bg/drag_panel").gameObject:GetComponent("DragSkill")
        ----------三个按钮下的选中和未选中需要显示的内容
        --技能配置
        self.m_skill_setting_root = go.transform:Find("skillshow_bg/drag_panel/drag_area_container/skill_setting_container")
        --技能列表
        self.m_skill_list_root = go.transform:Find("skillshow_bg/drag_panel/drag_area_container/skill_show_container/skill_left")
        --技能信息
        self.m_skill_show_root = go.transform:Find("skillshow_bg/drag_panel/drag_area_container/skill_show_container/skill_right")

        -------未选中   技能
        self.m_skill_root = skill_down_bg:Find("btn_container/skill").transform
        self.m_skill_image = self.m_skill_root:Find("skill_image").transform
        self.m_skill_text_btn = self.m_skill_image:Find("skill_text_btn"):GetComponent(UI.Button)
        -----选中
        self.m_skill_selected = skill_down_bg:Find("btn_container/skill/selected").transform
        self:add_btn_list(self.m_skill_root, self.m_skill_image, self.m_skill_text_btn, self.m_skill_selected)
        -----天赋
        self.m_talent_root = skill_down_bg:Find("btn_container/talent").transform
        self.m_talent_image = self.m_talent_root:Find("talent_image").transform
        self.m_talent_text_btn = self.m_talent_image:Find("talent_text_btn"):GetComponent(UI.Button)
        self.m_talent_selected = skill_down_bg:Find("btn_container/talent/selected").transform
        self:add_btn_list(self.m_talent_root, self.m_talent_image, self.m_talent_text_btn, self.m_talent_selected)
        -----设置
        self.m_setting_root = skill_down_bg:Find("btn_container/setting").transform
        self.m_setting_image = self.m_setting_root:Find("setting_image").transform
        self.m_setting_text_btn = self.m_setting_image:Find("setting_text_btn"):GetComponent(UI.Button)
        self.m_setting_selected = skill_down_bg:Find("btn_container/setting/selected").transform
        self:add_btn_list(self.m_setting_root, self.m_setting_image, self.m_setting_text_btn, self.m_setting_selected)

        self.m_drag_area_container.onBeginDrag = DragSkill_OnBeginDragHandler()
        self.m_drag_area_container.onBeginDrag:AddListener(function()
            self.m_need_move = false
        end)

        self.m_drag_area_container.onEndDrag = DragSkill_OnEndDragHandler()
        self.m_drag_area_container.onEndDrag:AddListener(function()
            self:end_drag_callback()
        end)

        self.m_drag_area_container.onClick = DragSkill_OnPointerClickHandler()
        self.m_drag_area_container.onClick:AddListener(function()
            local skill_setting_view = self.m_mgr:getView("skill_ui_setting")
            skill_setting_view:close_skill_setting_list()
        end)

        self.m_skill_text_btn.onClick:AddListener(function()
            self.m_scroll_bar_target_value = 0
            self:click_btn_callback(self.m_skill_text_btn)
        end)

        self.m_talent_text_btn.onClick:AddListener(function()
            self.m_scroll_bar_target_value = 0.5
            self:click_btn_callback(self.m_talent_text_btn)
        end)

        self.m_setting_text_btn.onClick:AddListener(function()
            self.m_scroll_bar_target_value = 1
            self:click_btn_callback(self.m_setting_text_btn)
        end)

        --技能界面关闭按钮   目前先显示隐藏来进行处理  temp   之后调优的话可以做一些记录   ke
        return_btn.onClick:AddListener(function()
            self.m_mgr:getView("skill_ui_main"):getGO():SetActive(false)
        end)

        --创建技能的子界面 配置，列表，信息
        self:subscribe(self:getFrame():on_event("child_created"), function(child_frame)
            local name = child_frame:getFrameName()
            --技能配置
            if string.find(name, "skill_ui_setting") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_skill_setting_root.transform
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end
            --技能列表
            if string.find(name, "skill_ui_list") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_skill_list_root.transform
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end
            --技能信息
            if  string.find(name,  "skill_ui_show") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_skill_show_root.transform
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end
        end)
        ----temp
        self:change_btn_to_big(self.m_skill_text_btn)
        frame:on_loaded()
    end)
end

function skill_ui_main_view:doUpdate()
    if self.m_need_move then
        if (math.abs(self.m_scroll_bar.value - self.m_scroll_bar_target_value) < 0.01) then
            self.m_scroll_bar.value = self.m_scroll_bar_target_value
            self.m_need_move = false
            return
        end
        ----在unity中有一个返回值，但是函数的参数有应用类型的参数，所以将引用类型的那个参数作为返回值返回，故有两个参数
        local smoothed_val, move_speed = Mathf.SmoothDamp(self.m_scroll_bar.value, self.m_scroll_bar_target_value, self.m_move_speed, self.m_move_time)
        self.m_scroll_bar.value = smoothed_val
        self.m_move_speed = move_speed
    end
end

------结束拖拽的回调
function skill_ui_main_view:end_drag_callback()
    if self.m_scroll_bar.value <= 0.25 then
        self.m_scroll_bar_target_value = 0
        self.m_target_btn = self.m_skill_text_btn
    elseif self.m_scroll_bar.value <= 0.75 then
        self.m_scroll_bar_target_value = 0.5
        self.m_target_btn = self.m_talent_text_btn
    else
        self.m_scroll_bar_target_value = 1
        self.m_target_btn = self.m_setting_text_btn
    end
    self:click_btn_callback(self.m_target_btn)
end

---确定了目标位置的回调
function skill_ui_main_view:click_btn_callback(press_btn)
    self:change_btn_to_big(press_btn)
    self.m_need_move = true
    self.m_move_speed = 0
end

-----按钮变大
function skill_ui_main_view:change_btn_to_big(press_btn)
    for k, v in pairs(self.m_btn_list) do
        if v["btn_and_text"] == press_btn then
            v["root"].transform:GetComponent(RectTransform).sizeDelta = Vector2(200, 95)
            v["selected_show"].transform.gameObject:SetActive(true)
            v["btn_no_selected"].transform.gameObject:SetActive(false)
        else
            v["root"].transform:GetComponent(RectTransform).sizeDelta = Vector2(85, 95)
            v["selected_show"].transform.gameObject:SetActive(false)
            v["btn_no_selected"].transform.gameObject:SetActive(true)
        end
    end
end

-----向按钮列表中添加内容
function skill_ui_main_view:add_btn_list(root, btn_no_selected, btn_and_text, selected_show)
    self.m_btn_list[#self.m_btn_list + 1] = { ["root"] = root, ["btn_no_selected"] = btn_no_selected, ["btn_and_text"] = btn_and_text, ["selected_show"] = selected_show }
end

function skill_ui_main_view:local_log(...)
    --app:logError(string.format(...))
end

return skill_ui_main_view