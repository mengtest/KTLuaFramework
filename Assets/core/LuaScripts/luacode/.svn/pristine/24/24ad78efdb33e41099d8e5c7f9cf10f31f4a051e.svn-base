local View = require("system.view")
local spirit_main_view = class("spirit_main_view", View)

function spirit_main_view:doInit()
    self.m_ui_manager = app:get_ui_manager()
    self.m_frame = self:getFrame()
    ----是否需要移动
    self.m_need_move = false
    ----移动速度
    self.m_move_speed = 0
    ----移动时间
    self.m_move_time = 0.2
    ---滑动条的值
    self.m_scroll_bar_target_value = 0
    self.m_mouse_X = 0
    self.m_dragging_mouse_X = 0
    self.m_target_btn = nil
    self.m_btn_list = {}
    self:load(app:getAssetPathMgr().get_ui_view_asset("SpiritBeastMain"), function(go)
        self.m_ui_manager:AdaptResolution(self:getFrame():getFrameName(), go)
        go.transform.localPosition = Vector3.zero
        go.transform.localScale = Vector3.one
        self.m_scroll_bar = self["scrollbar_GUIScrollbar"]
        self.m_drag_area_container = self["drag_panel_gameObject"]:GetComponent("DragSkill")
        -- 背包
        self.m_spirit_bag_root = self["spirit_bag_root_gameObject"].transform
        -- 灵兽槽位
        self.m_spirit_select_root = self["spirit_slot_root_gameObject"].transform
        -- 信息/更换/培养中的技能
        self.m_spirit_right_root = self["spirit_right_root_gameObject"].transform
        -- 模型/培养信息
        self.m_spirit_left_root = self["spirit_left_root_gameObject"].transform
        -- 综合属性
        self.m_spirit_property_root = self["spirit_property_root_gameObject"].transform
        -- 综合属性技能列表
        self.m_spirit_property_skill_list_root = self["spirit_property_skill_list_root_gameObject"].transform
        -----灵兽
        self.m_spirit_root = self["spirit_btn_down_gameObject"].transform
        self.m_spirit_image = self["spirit_down_img_gameObject"].transform
        self.m_spirit_text_btn = self["spirit_down_btn_GUIButton"]
        self.m_spirit_selected = self["spirit_down_select_gameObject"].transform
        --local spirit_target_pos_x = -12
        local spirit_target_pos_x = -12

        self:add_btn_list(self.m_spirit_root, self.m_spirit_image, self.m_spirit_text_btn, self.m_spirit_selected, spirit_target_pos_x)
        self.m_btn_selected_bg = self["spirit_select_bg_gameObject"].transform
        -----综合属性
        self.m_property_root = self["property_btn_down_gameObject"].transform
        self.m_property_image = self["property_down_img_gameObject"].transform
        self.m_property_text_btn = self["property_down_btn_GUIButton"]
        self.m_property_selected = self["property_down_select_gameObject"].transform
        --local property_target_pos_x = 210
        local property_target_pos_x = -213

        self:add_btn_list(self.m_property_root, self.m_property_image, self.m_property_text_btn, self.m_property_selected, property_target_pos_x)
        -----灵兽背包
        self.m_bag_root = self["bag_btn_down_gameObject"].transform
        self.m_bag_image = self["bag_down_img_gameObject"].transform
        self.m_bag_text_btn = self["bag_down_btn_GUIButton"]
        self.m_bag_selected = self["bag_down_select_gameObject"].transform
        --local bag_target_pos_x = 335
        local bag_target_pos_x = 213

        self:add_btn_list(self.m_bag_root, self.m_bag_image, self.m_bag_text_btn, self.m_bag_selected, bag_target_pos_x)

        self.m_drag_area_container.onBeginDrag = DragSkill_OnBeginDragHandler()
        self.m_drag_area_container.onBeginDrag:AddListener(function(event_data)
            self.m_need_move = false
            self.m_mouse_X = event_data.position.x
        end)

        self.m_drag_area_container.onDrag = DragSkill_OnDragHandler()
        self.m_drag_area_container.onDrag:AddListener(function(event_data)
            self.m_dragging_mouse_X = event_data.position.x
        end)


        self.m_drag_area_container.onEndDrag = DragSkill_OnEndDragHandler()
        self.m_drag_area_container.onEndDrag:AddListener(function()
            self:end_drag_callback()
            self.m_mouse_X = 0
            self.m_dragging_mouse_X = 0
        end)

        self.m_drag_area_container.onClick = DragSkill_OnPointerClickHandler()
        self.m_drag_area_container.onClick:AddListener(function()

        end)

        -- 返回按钮
        self:subscribe(self.m_frame:on_event("on_return_btn"), function()
            -- 返回的时候删除模型
            local show_model_dict = self:getFrame("spirit_model_show"):get_model_dict()
            local handbook_model_dict = self:getFrame("spirit_handbook_model_show"):get_model_dict()
            -- 返回的时候删除场景
            local scene_name = "spirit_model_show_temp"
            self:getView("world"):unloadScene(scene_name)
            local scene_name_2 = "spirit_handbook_model_show_temp"
            self:getView("world"):unloadScene(scene_name_2)
            for i, v in pairs(show_model_dict) do
                Object.Destroy(v)
                show_model_dict[i] = nil
            end
            for i, v in pairs(handbook_model_dict) do
                Object.Destroy(v)
                handbook_model_dict[i] = nil
            end

            self:hide()
        end)
        -- 下边的灵兽按钮
        self:subscribe(self.m_frame:on_event("on_spirit_down_btn"), function()
            --self.m_scroll_bar_target_value = 0
            self.m_scroll_bar_target_value = 0.5
            self.m_mgr:getView("spirit_handbook"):click_btn_callback(0)
            self:click_btn_callback(self.m_spirit_text_btn)
        end)
        -- 下边的综合属性按钮
        self:subscribe(self.m_frame:on_event("on_property_down_btn"), function()
            --self.m_scroll_bar_target_value = 0.5
            self.m_scroll_bar_target_value = 0
            self.m_mgr:getView("spirit_handbook"):click_btn_callback(0)
            self:click_btn_callback(self.m_property_text_btn)
        end)
        -- 下边的灵兽背包按钮
        self:subscribe(self.m_frame:on_event("on_bag_down_btn"), function()
            self.m_scroll_bar_target_value = 1
            self.m_mgr:getView("spirit_handbook"):click_btn_callback(0)
            self:click_btn_callback(self.m_bag_text_btn)
        end)

        -- 显示
        self:subscribe(self.m_frame:on_event("show"), function()
            self:show()
        end)
        -- 隐藏
        self:subscribe(self.m_frame:on_event("hide"), function()
            self:hide()
        end )
        self:subscribe(self.m_frame:on_event("show_which_return_btn"), function(type)
            self:show_which_return_btn(type)
        end )
        self:change_btn_to_big(self.m_property_text_btn)


        self:subscribe(self:getFrame():on_event("child_created"), function(child_frame)
            local name = child_frame:getFrameName()
            -- 槽位
            if string.find(name, "spirit_slot") then
                local slot = tonumber(string.match(name, "%d+"))
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_spirit_select_root:Find(tostring(slot))
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end

            -- 可选择列表
            if string.find(name, "spirit_list") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_spirit_right_root
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end

            -- 模型
            if string.find(name, "spirit_model_show") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_spirit_left_root
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end

            -- 信息
            if string.find(name, "spirit_info") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_spirit_right_root
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end

            -- 强化
            if string.find(name, "spirit_strengthen") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_spirit_right_root
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3(-106, -371, 0)
                view_go.transform.localScale = Vector3.one
            end

            -- 图鉴
            if string.find(name, "spirit_handbook") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_spirit_bag_root
                view_go.transform.parent = parent_transform
                view_go.transform.anchoredPosition3D = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end

            -- 总览/综合属性
            if string.find(name, "spirit_property") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_spirit_property_root
                view_go.transform.parent = parent_transform
                view_go.transform.anchoredPosition3D = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end

            -- 总览/综合属性  技能列表
            if string.find(name, "spirit_property_skill_list") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                --选择创建挂点以及设置位置和大小
                local parent_transform = self.m_spirit_property_skill_list_root
                view_go.transform.parent = parent_transform
                view_go.transform.anchoredPosition3D = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end


        end)
        self.m_frame:on_loaded()

        self:hide()
    end )
end


function spirit_main_view:doUpdate()
    if self.m_need_move then
        if (math.abs(self.m_scroll_bar.value - self.m_scroll_bar_target_value) < 0.01) then
            self.m_scroll_bar.value = self.m_scroll_bar_target_value
            self.m_need_move = false
            return
        end
        ----在unity中有一个返回值，但是函数的参数有应用类型的参数，所以将引用类型的那个参数作为返回值返回，故有两个参数
        local smoothed_val, move_speed = Mathf.SmoothDamp(self.m_scroll_bar.value, self.m_scroll_bar_target_value, self.m_move_speed, self.m_move_time)
        self.m_scroll_bar.value = smoothed_val
        self.m_move_speed = move_speed
    end

    -- TODO 临时加一个这个  控制图鉴的滑动
    if self.m_mgr:getView("spirit_handbook") then
        if self.m_scroll_bar.value >= 0.5 then
            if self.m_mouse_X > self.m_dragging_mouse_X then
                self.m_mgr:getView("spirit_handbook"):can_drag(true)
            end
        end
    end

end

------结束拖拽的回调
function spirit_main_view:end_drag_callback()
    if self.m_scroll_bar.value <= 0.25 then
        self.m_scroll_bar_target_value = 0
        --self.m_target_btn = self.m_spirit_text_btn
        self.m_target_btn = self.m_property_text_btn
    elseif self.m_scroll_bar.value <= 0.75 then
        self.m_scroll_bar_target_value = 0.5
        --self.m_target_btn = self.m_property_text_btn
        self.m_target_btn = self.m_spirit_text_btn
    else
        self.m_scroll_bar_target_value = 1
        self.m_target_btn = self.m_bag_text_btn
    end
    self:click_btn_callback(self.m_target_btn)
end

---确定了目标位置的回调
function spirit_main_view:click_btn_callback(press_btn)
    self:change_btn_to_big(press_btn)
    self.m_need_move = true
    self.m_move_speed = 0
end

-----按钮变大
function spirit_main_view:change_btn_to_big(press_btn)
    for k, v in pairs(self.m_btn_list) do
        if v["btn_and_text"] == press_btn then
            v["root"].transform:GetComponent(RectTransform).sizeDelta = Vector2(259.4, 95)
            v["selected_show"].transform.gameObject:SetActive(true)
            v["btn_no_selected"].transform.gameObject:SetActive(false)
            self:btn_selected_bg_move(v["target"])
        else
            v["root"].transform:GetComponent(RectTransform).sizeDelta = Vector2(85, 95)
            v["selected_show"].transform.gameObject:SetActive(false)
            v["btn_no_selected"].transform.gameObject:SetActive(true)
        end
    end
end

-----向按钮列表中添加内容
function spirit_main_view:add_btn_list(root, btn_no_selected, btn_and_text, selected_show, target)
    self.m_btn_list[#self.m_btn_list + 1] = { ["root"] = root, ["btn_no_selected"] = btn_no_selected, ["btn_and_text"] = btn_and_text, ["selected_show"] = selected_show, ["target"] = target }
end
---- 显示自己
function spirit_main_view:show()
    self:getGO():SetActive(true)
end
---- 隐藏自己
function spirit_main_view:hide()
    self:getGO():SetActive(false)
end
-- 决定右下角显示那种类型按钮
function spirit_main_view:show_which_return_btn(type)
    if type == self.m_frame.Return_Btn_Type.CLOSE then
        self["return_btn_GUIButton"].gameObject:SetActive(true)
        self["return_to_default_GUIButton"].gameObject:SetActive(false)
    else
        self["return_btn_GUIButton"].gameObject:SetActive(false)
        self["return_to_default_GUIButton"].gameObject:SetActive(true)
    end
end
function spirit_main_view:local_log(...)
    --app:logError(string.format(...))
end
function spirit_main_view:btn_selected_bg_move(target)
    ShortcutExtensions.DOLocalMoveX(self.m_btn_selected_bg.gameObject.transform, target, 0.6, false)
end

return spirit_main_view