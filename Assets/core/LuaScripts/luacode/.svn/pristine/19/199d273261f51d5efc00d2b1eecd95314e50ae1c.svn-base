---
--- Created by PC.
--- DateTime: 2018/3/3 19:52
---
local View = require("system.view")
local team_mgr_bar_view = class("team_mgr_bar_view", View)

function team_mgr_bar_view:doInit()

    self.m_frame = self:getFrame()
    self.m_target_unit = nil

    self:load(app:getAssetPathMgr().get_ui_view_asset("TeamBar"), function(go)

        self:subscribe(self.m_frame:on_event("child_created"), function(child_frame)
            local name = child_frame:getFrameName()
            local view = self:getView(name)
            local view_go = view:getGO()
            local parent_trs = self["grid_gameObject"].transform
            view_go.transform.parent = parent_trs
            view_go.transform.localPosition = Vector3.zero

            self.m_frame:set_toggle_group(self["grid_gameObject"].transform:GetComponent("UnityEngine.UI.ToggleGroup"))
        end)

        self:subscribe(self.m_frame:on_event("set_target"), function(target)
            if target == nil then
                self.m_target_unit = nil
                self["search_GUIToggle"].gameObject:SetActive(false)
                self["bg_gameObject"]:SetActive(false)
                self["leave_btn_GUIButton"].gameObject:SetActive(false)
                self["invate_btn_GUIButton"].gameObject:SetActive(false)
            else
                self.m_target_unit = target
                local is_in_team = app:get_team_mgr():is_has_member(self.m_target_unit:get_id())
                local is_owner = self.m_target_unit == self:getFrame("world"):get_main_player()

                self["bg_gameObject"]:SetActive(false)
                self["leave_btn_GUIButton"].gameObject:SetActive(false)
                self["invate_btn_GUIButton"].gameObject:SetActive(false)

                if is_owner then
                    if is_in_team then
                        self["search_GUIToggle"].gameObject:SetActive(true)
                        self["search_GUIToggle"].isOn = false
                    else
                        self["search_GUIToggle"].gameObject:SetActive(false)
                        return
                    end
                else
                    if is_in_team then
                        self["search_GUIToggle"].gameObject:SetActive(false)
                        return
                    else
                        self["search_GUIToggle"].gameObject:SetActive(true)
                        self["search_GUIToggle"].isOn = false
                    end
                end
            end
        end)

        self:subscribe(self.m_frame:on_event("on_search"), function(is_on)
            if self.m_target_unit == nil then
                return
            end

            local is_in_team = app:get_team_mgr():is_has_member(self.m_target_unit:get_id())
            local is_owner = self.m_target_unit == self:getFrame("world"):get_main_player()

            if is_on then
                if is_in_team then
                    if is_owner then
                        self["bg_gameObject"]:SetActive(true)
                        self["leave_btn_GUIButton"].gameObject:SetActive(true)
                    else
                        return
                    end
                else
                    if is_owner then
                        return
                    else
                        self["bg_gameObject"]:SetActive(true)
                        self["invate_btn_GUIButton"].gameObject:SetActive(true)
                    end
                end
            else
                self["bg_gameObject"]:SetActive(false)
                self["leave_btn_GUIButton"].gameObject:SetActive(false)
                self["invate_btn_GUIButton"].gameObject:SetActive(false)
            end
        end)

        self:subscribe(self.m_frame:on_event("on_invate_btn"), function()
            if self.m_target_unit == nil then
                self["search_GUIToggle"].isOn = false
                return
            end
            self["search_GUIToggle"].isOn = false
            self["search_GUIToggle"].gameObject:SetActive(false)
            app:get_team_mgr():req_invitation(self.m_target_unit:get_id(), self.m_target_unit:get_dbid())
        end)

        self:subscribe(self.m_frame:on_event("on_leave_btn"), function()
            app:get_team_mgr():req_leave()
            self["search_GUIToggle"].isOn = false
            self["search_GUIToggle"].gameObject:SetActive(false)
        end)

        self:subscribe(self.m_frame:on_event("is_show_head"), function(is_show)
            self["head_gameObject"]:SetActive(is_show)
        end)

        app:get_team_mgr():req_team_info()
    end)

end

return team_mgr_bar_view