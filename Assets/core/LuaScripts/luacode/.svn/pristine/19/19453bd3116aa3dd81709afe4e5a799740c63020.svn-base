local Frame = require("system.frame")
local inventory_manager = class("inventory_manager", Frame)

-----增加了新的装备
Event.decl(inventory_manager, "add_equipment")
----增加了新的物品（非装备）
Event.decl(inventory_manager, "add_unequipment")
Event.decl(inventory_manager, "equipped")
Event.decl(inventory_manager, "unequipped")
Event.decl(inventory_manager, "quick_equipment")

function inventory_manager:doInit(param)
    -----装备的表
    self.m_equipment_list = {}
    -----可叠加物品的表（非装备）
    self.m_unequipment_list = {}
    -----装备栏格位数据
    self.m_equipping_dic = {}
    self:base_call("inventory_list")
end

function inventory_manager:init()
    self:local_log("inventory_manager  初始化")
end

function inventory_manager:inventory_all(countable_info, wearable_info, equipped_inventory)
    for i, v in pairs(countable_info) do
        self:local_log("countable_info..i>>" .. tostring(i))
        self:local_log("countable_info..unique>>" .. tostring(v["unique"]))
        self:local_log("countable_info..tmpl>>" .. tostring(v["tmpl"]))
        self:local_log("countable_info..qty>>" .. tostring(v["qty"]))
    end

    for i, v in pairs(countable_info) do
        self.m_unequipment_list[i] = v
    end

    for i, v in pairs(wearable_info) do
        self:local_log("wearable_info..i>>" .. tostring(i))
        self:local_log("wearable_info..unique>>" .. tostring(v["unique"]))
        self:local_log("wearable_info..tmpl>>" .. tostring(v["tmpl"]))
        self:local_log("wearable_info..level>>" .. tostring(v["level"]))
        self:local_log("wearable_info..bound>>" .. tostring(v["bound"]))
        --Debug.LogError("wearable_info..enhanced_level" .. tostring(v["enhanced_level"]))
    end

    for i, v in pairs(wearable_info) do
        self.m_equipment_list[i] = v
    end

    for i, v in pairs(equipped_inventory) do
        self:local_log("equipped_inventory..key>>" .. tostring(i))
        self:local_log("equipped_inventory..wearable_info..unique>>" .. tostring(v["unique"]))
        self:local_log("equipped_inventory..wearable_info..tmpl>>" .. tostring(v["tmpl"]))
        self:local_log("wearable_info..tmpl>>" .. tostring(v["level"]))
    end

    for i, v in pairs(equipped_inventory) do
        self.m_equipping_dic[i] = v
    end
end

function inventory_manager:inventory_countables(countable_info)
    for i, v in pairs(countable_info) do
        self.m_unequipment_list[#self.m_unequipment_list + 1] = v
    end
    self:emit_event("add_unequipment", countable_info)
end

function inventory_manager:inventory_wearables(wearable_info)
    for i, v in pairs(wearable_info) do
        self.m_equipment_list[#self.m_equipment_list + 1] = v
        self:quick_equipped(v)
    end
    self:emit_event("add_equipment", wearable_info)
end

-----佩戴头盔
function inventory_manager:inventory_equipped_head(wearable_info)
    self.m_equipping_dic["head"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.HEAD)
end

----卸下头盔
function inventory_manager:inventory_unequipped_head()
    self.m_equipping_dic["head"]["unique"] = 0
    self.m_equipping_dic["head"]["tmpl"] = 0
    self.m_equipping_dic["head"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.HEAD)
end

----佩戴肩甲
function inventory_manager:inventory_equipped_shoulder(wearable_info)
    self.m_equipping_dic["shoulder"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.SHOULDER)
end

----卸下肩甲
function inventory_manager:inventory_unequipped_shoulder()
    self.m_equipping_dic["shoulder"]["unique"] = 0
    self.m_equipping_dic["shoulder"]["tmpl"] = 0
    self.m_equipping_dic["shoulder"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.SHOULDER)
end

----佩戴胸甲
function inventory_manager:inventory_equipped_chest(wearable_info)
    self.m_equipping_dic["chest"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.CHEST)
end

----卸下胸甲
function inventory_manager:inventory_unequipped_chest()
    self.m_equipping_dic["chest"]["unique"] = 0
    self.m_equipping_dic["chest"]["tmpl"] = 0
    self.m_equipping_dic["chest"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.CHEST)
end

----佩戴护腕
function inventory_manager:inventory_equipped_wrist(wearable_info)
    self.m_equipping_dic["wrist"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.WRIST)
end

----卸下护腕
function inventory_manager:inventory_unequipped_wrist()
    self.m_equipping_dic["wrist"]["unique"] = 0
    self.m_equipping_dic["wrist"]["tmpl"] = 0
    self.m_equipping_dic["wrist"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.WRIST)
end

---佩戴手套
function inventory_manager:inventory_equipped_hands(wearable_info)
    self.m_equipping_dic["hands"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.HANDS)
end

----卸下手套
function inventory_manager:inventory_unequipped_hands()
    self.m_equipping_dic["hands"]["unique"] = 0
    self.m_equipping_dic["hands"]["tmpl"] = 0
    self.m_equipping_dic["hands"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.HANDS)
end

----佩戴腰带
function inventory_manager:inventory_equipped_waist(wearable_info)
    self.m_equipping_dic["waist"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.WAIST)
end

----卸下腰带
function inventory_manager:inventory_unequipped_waist()
    self.m_equipping_dic["waist"]["unique"] = 0
    self.m_equipping_dic["waist"]["tmpl"] = 0
    self.m_equipping_dic["waist"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.WAIST)
end

----佩戴腿甲
function inventory_manager:inventory_equipped_legs(wearable_info)
    self.m_equipping_dic["legs"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.LEGS)
end

---卸下腿甲
function inventory_manager:inventory_unequipped_legs()
    self.m_equipping_dic["legs"]["unique"] = 0
    self.m_equipping_dic["legs"]["tmpl"] = 0
    self.m_equipping_dic["legs"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.LEGS)
end

----佩戴战靴
function inventory_manager:inventory_equipped_feet(wearable_info)
    self.m_equipping_dic["feet"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.FEET)
end

----卸下战靴
function inventory_manager:inventory_unequipped_feet()
    self.m_equipping_dic["feet"]["unique"] = 0
    self.m_equipping_dic["feet"]["tmpl"] = 0
    self.m_equipping_dic["feet"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.FEET)
end

----佩戴项链
function inventory_manager:inventory_equipped_neck(wearable_info)
    self.m_equipping_dic["neck"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.NECK)
end

----卸下项链
function inventory_manager:inventory_unequipped_neck()
    self.m_equipping_dic["neck"]["unique"] = 0
    self.m_equipping_dic["neck"]["tmpl"] = 0
    self.m_equipping_dic["neck"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.NECK)
end

-----佩戴披风
function inventory_manager:inventory_equipped_back(wearable_info)
    self.m_equipping_dic["back"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.BACK)
end

----卸下披风
function inventory_manager:inventory_unequipped_back()
    self.m_equipping_dic["back"]["unique"] = 0
    self.m_equipping_dic["back"]["tmpl"] = 0
    self.m_equipping_dic["back"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.BACK)
end

----佩戴戒指1
function inventory_manager:inventory_equipped_finger1(wearable_info)
    self.m_equipping_dic["finger1"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.FINGER1)
end

---卸下戒指1
function inventory_manager:inventory_unequipped_finger1()
    self.m_equipping_dic["finger1"]["unique"] = 0
    self.m_equipping_dic["finger1"]["tmpl"] = 0
    self.m_equipping_dic["back"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.FINGER1)
end

-----佩戴戒指2
function inventory_manager:inventory_equipped_finger2(wearable_info)
    self.m_equipping_dic["finger2"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.FINGER2)
end

-----卸下戒指2
function inventory_manager:inventory_unequipped_finger2()
    self.m_equipping_dic["finger2"]["unique"] = 0
    self.m_equipping_dic["finger2"]["tmpl"] = 0
    self.m_equipping_dic["finger2"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.FINGER2)
end

----佩戴配饰1
function inventory_manager:inventory_equipped_accessory1(wearable_info)
    self.m_equipping_dic["accessory1"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.ACCESSORY1)
end

----卸下配饰1
function inventory_manager:inventory_unequipped_accessory1()
    self.m_equipping_dic["accessory1"]["unique"] = 0
    self.m_equipping_dic["accessory1"]["tmpl"] = 0
    self.m_equipping_dic["accessory1"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.ACCESSORY1)
end

----佩戴配饰2
function inventory_manager:inventory_equipped_accessory2(wearable_info)
    self.m_equipping_dic["accessory2"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.ACCESSORY2)
end

---卸下配饰2
function inventory_manager:inventory_unequipped_accessory2()
    self.m_equipping_dic["accessory2"]["unique"] = 0
    self.m_equipping_dic["accessory2"]["tmpl"] = 0
    self.m_equipping_dic["accessory2"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.ACCESSORY2)
end

----佩戴主手武器
function inventory_manager:inventory_equipped_mainhand_weapon(wearable_info)
    self.m_equipping_dic["mainhand_weapon"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.MAINHAND_WEAPON)
end

---卸下主手武器
function inventory_manager:inventory_unequipped_mainhand_weapon()
    self.m_equipping_dic["mainhand_weapon"]["unique"] = 0
    self.m_equipping_dic["mainhand_weapon"]["tmpl"] = 0
    self.m_equipping_dic["mainhand_weapon"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.MAINHAND_WEAPON)
end

----佩戴副手武器
function inventory_manager:inventory_equipped_offhand_weapon(wearable_info)
    self.m_equipping_dic["offhand_weapon"] = wearable_info
    self:emit_event("equipped", wearable_info, SharedEnum.WearableTarget.OFFHAND_WEAPON)
end

----卸下副手武器
function inventory_manager:inventory_unequipped_offhand_weapon()
    self.m_equipping_dic["offhand_weapon"]["unique"] = 0
    self.m_equipping_dic["offhand_weapon"]["tmpl"] = 0
    self.m_equipping_dic["offhand_weapon"]["level"] = 0
    self:emit_event("unequipped", SharedEnum.WearableTarget.OFFHAND_WEAPON)
end

----快速穿装备 目前以装等为替换的准则 有些规则还没有完全确定，所以后续还要改动  temp
function inventory_manager:quick_equipped(wearable_info)
    if dbc.item[wearable_info["tmpl"]].derived_params[2] == 0 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["head"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["head"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        ---头盔
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["head"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.HEAD)
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 1 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["shoulder"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["shoulder"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["shoulder"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.SHOULDER)
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 2 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["chest"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["chest"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["chest"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.CHEST)
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 3 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["wrist"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["wrist"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["wrist"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.WRIST)
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 4 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["hands"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["hands"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["hands"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.HANDS)
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 5 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["waist"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["waist"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["waist"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.WAIST)
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 6 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["legs"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["legs"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["legs"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.LEGS)
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 7 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["feet"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["feet"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["feet"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.FEET)
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 8 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["neck"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["neck"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["neck"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.NECK)
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 9 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["back"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["back"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["back"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.BACK)
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 10 then
        ----获取装备栏装备的等级
        local equip_id1 = self.m_equipping_dic["finger1"]["tmpl"]
        local equip_level_label1 = 0
        if equip_id1 ~= 0 then
            equip_level_label1 = dbc.item[equip_id1].level_label
        end
        local equip_enhanced_level1 = self.m_equipping_dic["finger1"]["enhanced_level"]
        local equip_level1 = equip_level_label1 + equip_enhanced_level1

        local equip_id2 = self.m_equipping_dic["finger2"]["tmpl"]
        local equip_level_label2 = 0
        if equip_id2 ~= 0 then
            equip_level_label2 = dbc.item[equip_id2].level_label
        end
        local equip_enhanced_level2 = self.m_equipping_dic["finger2"]["enhanced_level"]
        local equip_level2 = equip_level_label2 + equip_enhanced_level2
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        -----戒指有两个特殊处理
        if equip_level1 <= equip_level2 then
            if equip_level1 < item_level and can_equip == 1 then
                self.m_equipping_dic["finger1"] = wearable_info
                self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.FINGER1)
            end
        elseif equip_level2 < equip_level1 then
            if equip_level2 < item_level and can_equip == 1 then
                self.m_equipping_dic["finger2"] = wearable_info
                self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.FINGER2)
            end
        elseif equip_level2 == equip_level1 then
            if equip_level1 < item_level and can_equip == 1 then
                self.m_equipping_dic["finger1"] = wearable_info
                self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.FINGER1)
            end
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 11 then
        ----获取装备栏装备的等级
        local equip_id1 = self.m_equipping_dic["accessory1"]["tmpl"]
        local equip_level_label1 = 0
        if equip_id1 ~= 0 then
            equip_level_label1 = dbc.item[equip_id1].level_label
        end
        local equip_enhanced_level1 = self.m_equipping_dic["accessory1"]["enhanced_level"]
        local equip_level1 = equip_level_label1 + equip_enhanced_level1

        local equip_id2 = self.m_equipping_dic["accessory2"]["tmpl"]
        local equip_level_label2 = 0
        if equip_id2 ~= 0 then
            equip_level_label2 = dbc.item[equip_id2].level_label
        end
        local equip_enhanced_level2 = self.m_equipping_dic["accessory2"]["enhanced_level"]
        local equip_level2 = equip_level_label2 + equip_enhanced_level2
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        -----配饰有2个特殊处理
        if equip_level1 <= equip_level2 then
            if equip_level1 < item_level and can_equip == 1 then
                self.m_equipping_dic["accessory1"] = wearable_info
                self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.ACCESSORY1)
            end
        elseif equip_level2 < equip_level1 then
            if equip_level2 < item_level and can_equip == 1 then
                self.m_equipping_dic["accessory2"] = wearable_info
                self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.ACCESSORY2)
            end
        elseif equip_level2 == equip_level1 then
            if equip_level1 < item_level and can_equip == 1 then
                self.m_equipping_dic["accessory1"] = wearable_info
                self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.ACCESSORY1)
            end
        end
    elseif dbc.item[wearable_info["tmpl"]].derived_params[2] == 12 then
        ----获取装备栏装备的等级
        local equip_id = self.m_equipping_dic["mainhand_weapon"]["tmpl"]
        local equip_level_label = 0
        if equip_id ~= 0 then
            equip_level_label = dbc.item[equip_id].level_label
        end
        local equip_enhanced_level = self.m_equipping_dic["mainhand_weapon"]["enhanced_level"]
        local equip_level = equip_level_label + equip_enhanced_level
        ----获取获得的装备的等级
        local item_level_label = dbc.item[wearable_info['tmpl']].level_label
        local item_enhanced_level = wearable_info['enhanced_level']
        local item_level = item_level_label + item_enhanced_level
        local can_equip = self:gain_equip_or_unequip(wearable_info['tmpl'], item_level)
        if equip_level < item_level and can_equip == 1 then
            self.m_equipping_dic["mainhand_weapon"] = wearable_info
            self:emit_event("quick_equipment", wearable_info, SharedEnum.WearableTarget.MAINHAND_WEAPON)
        end
    end
end

----获取到装备的列表
function inventory_manager:gain_equipment_list()
    return self.m_equipment_list
end

----获取到非装备的列表
function inventory_manager:gain_unequipment_list()
    return self.m_unequipment_list
end

----获取到装备位的数据
function inventory_manager:gain_equiping_dic()
    return self.m_equipping_dic
end

function inventory_manager:base_call(method_name, ...)
    local kbesdk = app:getKBESDK()
    local player_id = kbesdk:get_player_id()
    kbesdk:entity_base_call(player_id, method_name, ...)
end

function inventory_manager:cell_call(method_name, ...)
    local kbesdk = app:getKBESDK()
    local player_id = kbesdk:get_player_id()
    kbesdk:entity_cell_call(player_id, method_name, ...)
end

------穿装备时向服务器请求的方法
function inventory_manager:put_on_equipment_request_server(equipment_type, unique, id)
    if equipment_type == SharedEnum.WearableTarget.HEAD then
        self:base_call("inventory_equipping_head", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.SHOULDER then
        self:base_call("inventory_equipping_shoulder", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.CHEST then
        self:base_call("inventory_equipping_chest", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.WRIST then
        self:base_call("inventory_equipping_wrist", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.HANDS then
        self:base_call("inventory_equipping_hands", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.WAIST then
        self:base_call("inventory_equipping_waist", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.LEGS then
        self:base_call("inventory_equipping_legs", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.FEET then
        self:base_call("inventory_equipping_feet", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.NECK then
        self:base_call("inventory_equipping_neck", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.BACK then
        self:base_call("inventory_equipping_back", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.FINGER1 then
        self:base_call("inventory_equipping_finger1", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.FINGER2 then
        self:base_call("inventory_equipping_finger2", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.ACCESSORY1 then
        self:base_call("inventory_equipping_accessory1", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.ACCESSORY2 then
        self:base_call("inventory_equipping_accessory2", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.MAINHAND_WEAPON then
        self:base_call("inventory_equipping_mainhand_weapon", unique, id)
    elseif equipment_type == SharedEnum.WearableTarget.OFFHAND_WEAPON then
        self:base_call("inventory_equipping_offhand_weapon", unique, id)
    end
end

function inventory_manager:get_off_equipment_request_server(equipment_type)
    if equipment_type == SharedEnum.WearableTarget.HEAD then
        self:base_call("inventory_unequipping_head")
    elseif equipment_type == SharedEnum.WearableTarget.SHOULDER then
        self:base_call("inventory_unequipping_shoulder")
    elseif equipment_type == SharedEnum.WearableTarget.CHEST then
        self:base_call("inventory_unequipping_chest")
    elseif equipment_type == SharedEnum.WearableTarget.WRIST then
        self:base_call("inventory_unequipping_wrist")
    elseif equipment_type == SharedEnum.WearableTarget.HANDS then
        self:base_call("inventory_unequipping_hands")
    elseif equipment_type == SharedEnum.WearableTarget.WAIST then
        self:base_call("inventory_unequipping_waist")
    elseif equipment_type == SharedEnum.WearableTarget.LEGS then
        self:base_call("inventory_unequipping_legs")
    elseif equipment_type == SharedEnum.WearableTarget.FEET then
        self:base_call("inventory_unequipping_feet")
    elseif equipment_type == SharedEnum.WearableTarget.NECK then
        self:base_call("inventory_unequipping_neck")
    elseif equipment_type == SharedEnum.WearableTarget.BACK then
        self:base_call("inventory_unequipping_back")
    elseif equipment_type == SharedEnum.WearableTarget.FINGER1 then
        self:base_call("inventory_unequipping_finger1")
    elseif equipment_type == SharedEnum.WearableTarget.FINGER2 then
        self:base_call("inventory_unequipping_finger2")
    elseif equipment_type == SharedEnum.WearableTarget.ACCESSORY1 then
        self:base_call("inventory_unequipping_accessory1")
    elseif equipment_type == SharedEnum.WearableTarget.ACCESSORY2 then
        self:base_call("inventory_unequipping_accessory2")
    elseif equipment_type == SharedEnum.WearableTarget.MAINHAND_WEAPON then
        self:base_call("inventory_unequipping_mainhand_weapon")
    elseif equipment_type == SharedEnum.WearableTarget.OFFHAND_WEAPON then
        self:base_call("inventory_unequipping_offhand_weapon")
    end
end

-------穿入参数为物品的id    物品的等级
function inventory_manager:gain_equipment_quality(id, level)
    local list = dbc.item[id].qualities
    for i = 1, #list - 2, 2 do
        if level >= list[i] then
            if i == #list - 1 then
                return list[i + 1]
            end
            if level < list[i + 2] then
                return list[i + 1]
            end
        end
    end
    Debug.LogError("表中未索引到此品质装备，检查表结构" .. tostring(id) .. tostring(level))
    return 999
end

----穿入的参数为物品的id  物品的等级
function inventory_manager:gain_equip_or_unequip(id, level)
    local list = dbc.item[id].levels
    local player_level = self:gain_player_level()
    for i = 2, #list, 2 do
        if level <= list[i] then
            if player_level >= list[i - 1] then
                return 1
            else
                return 0
            end
        end
    end
    Debug.LogError("表中未索引到此装备是否可穿戴，检查表结构")
    return 999
end

------根据装备等级获取装备名称  参数为装备等级
function inventory_manager:gain_equipment_name(id, level)
    local list = dbc.item[id].name
    for i = #list - 1, 1, -2 do
        if level >= tonumber(list[i]) then
            return list[i + 1]
        end
    end
    Debug.LogError("表中未索引到此名称装备，检查表结构" .. tostring(level))
    return '不知名的装备'
end

----获取当前的主角的等级
function inventory_manager:gain_player_level()
    local kbe_mgr = self:getFrame("kbe.kbe_mgr")
    local sdk = app:getKBESDK()
    local role_id = sdk:get_player_id()
    local role = kbe_mgr:get_entity(role_id)
    local player_level = role:get_attr("level")
    return player_level
end

function inventory_manager:local_log(...)
    --app:logError(string.format(...))
end

return inventory_manager