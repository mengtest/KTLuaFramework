local View = require("system.view")
local matching_done_view = class("matching_done_view", View)

function matching_done_view:doInit(param)
    self.m_ui_manager = app:get_ui_manager()
    local frame = self:getFrame()
    self.m_matching_manager = self:getFrame("matching_manager")
    local id = param[2]
    local type = param[1]
    self.m_show_time = 11
    self.m_choose_duty = nil

    self.m_attack = false
    self.m_cure = false
    self.m_defense = false

    self:load(app:getAssetPathMgr().get_ui_view_asset("MatchingDone"), function(go)
        self.m_ui_manager:AdaptResolution(frame:getFrameName(), go)
        self.m_name_text = go.transform:Find("panel/bg/line/show_text"):GetComponent(UI.Text)
        self.m_time_text = go.transform:Find("panel/bg/line/time_text"):GetComponent(UI.Text)

        if id ~= 0 then
            local name = dbc.instances[id].name
            self.m_name_text.text = name
        else
            if type == enum.shared.InstanceDiffcultyType.HEROIC then
                self.m_name_text.text = "英雄"
            elseif type == enum.shared.InstanceDiffcultyType.EPIC then
                self.m_name_text.text = "史诗"
            elseif type == enum.shared.InstanceDiffcultyType.NORMAL then
                self.m_name_text.text = "普通"
            end
        end

        self:subscribe(frame:on_event("attack_down"), function(val)
            self:on_attack_down()
        end)

        self:subscribe(frame:on_event("cure_down"), function(val)
            self:on_cure_down()
        end)

        self:subscribe(frame:on_event("defense_down"), function(val)
            self:on_defense_down()
        end)

        self:subscribe(frame:on_event("sure_down"), function(val)
            self:on_sure_down()
        end)

        self:subscribe(frame:on_event("cancle_down"), function(val)
            self:on_cancle_down()
        end)

        self:init_duty()
    end)
end

function matching_done_view:doUpdate()
    if self.m_time_text ~= nil then
        self.m_show_time = self.m_show_time - app:get_delta_time()
        local result = math.floor(self.m_show_time)
        if result <= 0 then
            self:on_cancle_down()
        end
        self.m_time_text.text = tostring(result) .. "秒自动拒绝"
    end
end

function matching_done_view:on_cancle_down()
    self.m_matching_manager:make_sure_to_match(0, 0)
    self.m_ui_manager:ShowLowUIRootByName(self.m_ui_manager.UI_Depth.HIGH)
    local frame = self:getFrame()
    frame:destroySelf()
end

function matching_done_view:on_sure_down()
    if not self.m_choose_duty then
        self:getFrame("float_hint_manager"):add_float("请选择职责", self.m_ui_manager.UI_Depth.ALERT)
        return
    end
    self.m_matching_manager:make_sure_to_match(1, self.m_choose_duty)
    self.m_ui_manager:ShowLowUIRootByName(self.m_ui_manager.UI_Depth.HIGH)
    local frame = self:getFrame()
    frame:destroySelf()
end

function matching_done_view:on_attack_down()
    if not self.m_attack then
        self:getFrame("float_hint_manager"):add_float("无法选择此职业", self.m_ui_manager.UI_Depth.ALERT)
        return
    end
    self.m_choose_duty = enum.shared.InstanceMactchRoleDuty.DAMAGE
    self["attack_sel_GUIImage"].gameObject:SetActive(true)
    self["cure_sel_GUIImage"].gameObject:SetActive(false)
    self["defense_sel_GUIImage"].gameObject:SetActive(false)
end

function matching_done_view:on_cure_down()
    if not self.m_cure then
        self:getFrame("float_hint_manager"):add_float("无法选择此职业", self.m_ui_manager.UI_Depth.ALERT)
        return
    end
    self.m_choose_duty = enum.shared.InstanceMactchRoleDuty.HEALER
    self["attack_sel_GUIImage"].gameObject:SetActive(false)
    self["cure_sel_GUIImage"].gameObject:SetActive(true)
    self["defense_sel_GUIImage"].gameObject:SetActive(false)
end

function matching_done_view:on_defense_down()
    if not self.m_defense then
        self:getFrame("float_hint_manager"):add_float("无法选择此职业", self.m_ui_manager.UI_Depth.ALERT)
        return
    end
    self.m_choose_duty = enum.shared.InstanceMactchRoleDuty.TANK
    self["attack_sel_GUIImage"].gameObject:SetActive(false)
    self["cure_sel_GUIImage"].gameObject:SetActive(false)
    self["defense_sel_GUIImage"].gameObject:SetActive(true)
end

-----初始化的时候处理一些职责相关的事情
function matching_done_view:init_duty()
    local ret = self.m_matching_manager:deal_player_duty()
    for i, v in ipairs(ret) do
        if v == 1 then
            self.m_defense = true
        elseif v == 2 then
            self.m_attack = true
        elseif v == 3 then
            self.m_cure = true
        end
    end
    if not self.m_defense then
        self["defense_img_GUIImage"].gameObject:SetActive(true)
    end
    if not self.m_attack then
        self["attack_img_GUIImage"].gameObject:SetActive(true)
    end
    if not self.m_cure then
        self["cure_img_GUIImage"].gameObject:SetActive(true)
    end

    local kbe_mgr = self:getFrame("kbe.kbe_mgr")
    local sdk = app:getKBESDK()
    local role_id = sdk:get_player_id()
    local role = kbe_mgr:get_entity(role_id)
    local special = role:get_specialization()
    local duty = dbc.specialization[special].duty
    if duty == 1 then
        self:on_defense_down()
    elseif duty == 2 then
        self:on_attack_down()
    elseif duty == 3 then
        self:on_cure_down()
    end
end

return matching_done_view