-- 角色行为状态 技能
local require_relative = REQUIRE_BASE(...)
local UnitActStateBase = require_relative("ua_state_base")
-- 在initialize中初始化，避免交叉require死循环
local UAFsm = nil
local Unit = nil
local Enum_Unit = require "common.Enum.Enum_Unit"

local M = class("UnitActStateSkillSing", UnitActStateBase)

function M:initialize(fsm, unit)
    UnitActStateBase.initialize(self, fsm, unit)    
    UAFsm = require_relative("ua_state_machine")
    Unit = require "frame.unit"
end

function M:enter()
    UnitActStateBase.enter(self)   
    self.m_unit:set_main_act(UAFsm.MAIN_ACT.Auto_Move)

    self.m_move_param = {
    startPos = self.m_unit:get_pos(),
    endPos = self.m_param.target.position,
    startTime = Time.time,
    time = 1}

    self.m_update_func = nil

    -- 暂时先只考虑跳跃 而且是抛物线跳跃 之后按照需求扩展
    if(self.m_param.type == "jump") then
        self.m_update_func = self["jump_update"]
    else
        
    end
end


function M:exit()
    UnitActStateBase.exit(self)

end


function M:update()
    UnitActStateBase.update(self)
    
    if(self.m_update_func~=nil) then
        self:m_update_func()
    end
end


function M:change_move_state(move_state)
    
end

function M:jump_update()

    local fracComplete = (Time.time - self.m_move_param.startTime) / self.m_move_param.time


    local center = (self.m_move_param.startPos + self.m_move_param.endPos) * 0.5

    center = center - Vector3(0, 1, 0)

    local riseRelCenter = self.m_move_param.startPos - center

    local setRelCenter = self.m_move_param.endPos - center

    

    local next_pos = Vector3.Slerp(riseRelCenter, setRelCenter, fracComplete)

    next_pos = next_pos + center

    self.m_unit:lookAt(next_pos)

    self.m_unit:set_pos(next_pos)

    self.m_unit:emit_event("set_position", next_pos)


    
    if(fracComplete > self.m_move_param.time) then
        self.m_fsm:change_state(Enum_Battle.Unit_Main_Act.MOVE)
        return
    end
end

return M
