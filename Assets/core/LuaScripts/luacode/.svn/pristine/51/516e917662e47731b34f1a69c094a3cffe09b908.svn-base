local View = require("system.view")
local quest_ui_main_view = class("quest_ui_main_view", View)

function quest_ui_main_view:doInit()

    self.m_frame = self:getFrame()
    self.m_ui_manager = app:get_ui_manager()
    -- 是否需要移动
    self.m_need_move = false
    -- 移动速度
    self.m_move_speed = 0
    -- 移动时间
    self.m_move_time = 0.2
    -- 滑动条的值
    self.m_scroll_bar_target_value = 0
    -- 记录开始滑动时select_bg的位置
    self.m_select_bg_start_x = -110

    self.m_target_btn = nil

    self.m_btn_list = {}

    self:load(app:getAssetPathMgr().get_ui_view_asset("Quest"), function(go)
        local frame = self:getFrame()
        self.m_ui_manager:AdaptResolution(self:getFrame():getFrameName(), go)
        self.m_scroll_bar = self["scrollbar_GUIScrollbar"]
        self.m_drag_area_container = go.transform:Find("quest_bg/drag_panel").gameObject:GetComponent("DragSkill")

        -- 任务
        self:add_btn_list(self["quest_gameObject"].transform, self["quest_img_GUIImage"], self["quest_btn_GUIButton"], self["quest_selected_GUIImage"], -110)
        -- 日常
        self:add_btn_list(self["daily_gameObject"].transform, self["daily_img_GUIImage"], self["daily_btn_GUIButton"], self["daily_selected_GUIImage"], 3)
        -- 成就
        self:add_btn_list(self["achi_gameObject"].transform, self["achi_img_GUIImage"], self["achi_btn_GUIButton"], self["achi_selected_GUIImage"], 115)

        self:subscribe(self.m_frame:on_event("quest_down"), function()
            self:on_quest_down()
        end)
        self:subscribe(self.m_frame:on_event("daily_down"), function()
            self:on_daily_down()
        end)
        self:subscribe(self.m_frame:on_event("achi_down"), function()
            self:on_achi_down()
        end)

        -- 子frame布局
        self:subscribe(self:getFrame():on_event("child_created"), function(child_frame)
            local name = child_frame:getFrameName()
            -- 任务列表
            if string.find(name, "quest_ui_list") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                local parent_transform = self["list_gameObject"].transform
                view_go.transform.parent = parent_transform
                view_go.transform.anchoredPosition3D = Vector3(-420, 340, 0)
                view_go.transform.localScale = Vector3.one
            end
            -- 任务信息
            if string.find(name, "quest_ui_show") then
                local view = self.m_mgr:getView(name)
                local view_go = view:getGO()
                local parent_transform = self["info_gameObject"].transform
                view_go.transform.parent = parent_transform
                view_go.transform.localPosition = Vector3.zero
                view_go.transform.localScale = Vector3.one
            end
        end)

        self.m_drag_area_container.onBeginDrag = DragSkill_OnBeginDragHandler()
        self.m_drag_area_container.onBeginDrag:AddListener(function()
            self.m_need_move = false
            self.m_select_bg_start_x = self["selected_img_GUIImage"].gameObject.transform.localPosition.x
        end)

        self.m_drag_area_container.onDrag = DragSkill_OnDragHandler()
        self.m_drag_area_container.onDrag:AddListener(function()
            self:on_drag_select_bg_move()
        end)

        self.m_drag_area_container.onEndDrag = DragSkill_OnEndDragHandler()
        self.m_drag_area_container.onEndDrag:AddListener(function()
            self:end_drag_callback()
        end)

        -- 创建子物体
        frame:on_loaded()
        -- 初始化选中按钮
        self:change_btn_to_big(self["quest_btn_GUIButton"])
    end)
end

function quest_ui_main_view:doUpdate()
    if self.m_need_move then
        if (math.abs(self.m_scroll_bar.value - self.m_scroll_bar_target_value) < 0.01) then
            self.m_scroll_bar.value = self.m_scroll_bar_target_value
            self.m_need_move = false
            return
        end
        -- 在unity中有一个返回值，但是函数的参数有应用类型的参数，所以将引用类型的那个参数作为返回值返回，故有两个参数
        local smoothed_val, move_speed = Mathf.SmoothDamp(self.m_scroll_bar.value, self.m_scroll_bar_target_value, self.m_move_speed, self.m_move_time)
        self.m_scroll_bar.value = smoothed_val
        self.m_move_speed = move_speed
    end
end

-- 结束拖拽的回调
function quest_ui_main_view:end_drag_callback()
    if self.m_scroll_bar.value <= 0.25 then
        self.m_scroll_bar_target_value = 0
        self.m_target_btn = self["quest_btn_GUIButton"]
    elseif self.m_scroll_bar.value <= 0.75 then
        self.m_scroll_bar_target_value = 0.5
        self.m_target_btn = self["daily_btn_GUIButton"]
    else
        self.m_scroll_bar_target_value = 1
        self.m_target_btn = self["achi_btn_GUIButton"]
    end
    self:click_btn_callback(self.m_target_btn)
end

-- 确定了目标位置的回调
function quest_ui_main_view:click_btn_callback(press_btn)
    self.m_target_btn = press_btn
    self:change_btn_to_big(press_btn)
    self.m_need_move = true
    self.m_move_speed = 0
end

-- 按钮变大
function quest_ui_main_view:change_btn_to_big(press_btn)
    for k, v in pairs(self.m_btn_list) do
        if v["btn_and_text"] == press_btn then
            v["root"].transform:GetComponent(RectTransform).sizeDelta = Vector2(230, 95)
            v["selected_show"].transform.gameObject:SetActive(true)
            v["btn_no_selected"].transform.gameObject:SetActive(false)
            self:btn_selected_bg_move(v["target"])
            if press_btn == self["quest_btn_GUIButton"] then
                self["left_GUIImage"].gameObject:SetActive(false)
                self["right_GUIImage"].gameObject:SetActive(true)
            elseif press_btn == self["daily_btn_GUIButton"] then
                self["left_GUIImage"].gameObject:SetActive(true)
                self["right_GUIImage"].gameObject:SetActive(true)
            elseif press_btn == self["achi_btn_GUIButton"] then
                self["left_GUIImage"].gameObject:SetActive(true)
                self["right_GUIImage"].gameObject:SetActive(false)
            end
        else
            v["root"].transform:GetComponent(RectTransform).sizeDelta = Vector2(109, 95)
            v["selected_show"].transform.gameObject:SetActive(false)
            v["btn_no_selected"].transform.gameObject:SetActive(true)
        end
    end
end

function quest_ui_main_view:on_drag_select_bg_move()
    if self.m_scroll_bar then
        local target_distance = self.m_scroll_bar.value - self.m_scroll_bar_target_value
        local pos = self["selected_img_GUIImage"].gameObject.transform.localPosition
        self["selected_img_GUIImage"].gameObject.transform.localPosition = Vector3(self.m_select_bg_start_x + 169.5 * target_distance, pos.y, pos.z)
    end
end

-- 向按钮列表中添加内容
function quest_ui_main_view:add_btn_list(root, btn_no_selected, btn_and_text, selected_show, pos)
    self.m_btn_list[#self.m_btn_list + 1] = { ["root"] = root, ["btn_no_selected"] = btn_no_selected, ["btn_and_text"] = btn_and_text, ["selected_show"] = selected_show, ["target"] = pos }
end

function quest_ui_main_view:on_quest_down()
    self.m_scroll_bar_target_value = 0
    self:click_btn_callback(self["quest_btn_GUIButton"])
end

function quest_ui_main_view:on_daily_down()
    self.m_scroll_bar_target_value = 0.5
    self:click_btn_callback(self["daily_btn_GUIButton"])
end

function quest_ui_main_view:on_achi_down()
    self.m_scroll_bar_target_value = 1
    self:click_btn_callback(self["achi_btn_GUIButton"])
end

function quest_ui_main_view:btn_selected_bg_move(target)
    ShortcutExtensions.DOLocalMoveX(self["selected_img_GUIImage"].gameObject.transform, target, 0.6, false)
end

return quest_ui_main_view