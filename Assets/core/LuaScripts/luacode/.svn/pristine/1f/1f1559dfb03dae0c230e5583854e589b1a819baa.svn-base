local View = require("system.view")
local equipment_tips_view = class("equipment_tips_view", View)

function equipment_tips_view:doInit()
    self.m_ui_manager = app:get_ui_manager()
    --当装备位戒指或者饰品时用于存储装备位
    self.m_put_on_equipment_index = 0

    local frame = self:getFrame()

    self.m_inventory_mgr = self:getFrame("inventory_manager")

    self.m_tips_parent_view = self.m_mgr:getView("equipment_tips_parent")
    self:load_prefab("ui/EquipmentTipsParent.prefab", function(loaded_go)
        local template_go = loaded_go.transform:Find("equipment_tips_parent_bg/equipment_tips_parent/equipment_tips_bg").gameObject
        local tipsGo = Object.Instantiate(template_go)
        self:getGO():AddComponent(RectTransform)
        tipsGo.transform:SetParent(self:getGO().transform)
        tipsGo.transform.localPosition = Vector3.zero
        tipsGo.transform.localScale = Vector3.one
        tipsGo:SetActive(true)

        ------装备Tips头信息区域
        self.m_equipment_top = tipsGo.transform:Find("equipment_tips_top")
        self.m_equipment_icon = self.m_equipment_top:Find("equipment_tips_top_area/equipment_icon_bg/equipment_icon").gameObject:GetComponent(UnityEngine.UI.Image)
        --装备品质底纹
        self.m_equipment_quality_icon = self.m_equipment_top:Find("equipment_tips_top_area/equipment_icon_bg/equipment_quality").gameObject:GetComponent(UnityEngine.UI.Image)
        self.m_equipment_top_level = self.m_equipment_top:Find("equipment_tips_top_area/equipment_icon_bg/equipment_level_bg/equipment_level").gameObject:GetComponent(UnityEngine.UI.Text)
        self.m_equipment_name = self.m_equipment_top:Find("equipment_tips_top_area/equipment_normaal_info/equipment_name").gameObject:GetComponent(UnityEngine.UI.Text)
        self.m_equipment_state = self.m_equipment_name.transform:Find("equipment_state").gameObject--:GetComponent(UnityEngine.UI.Text)
        self.m_equipment_type = self.m_equipment_top:Find("equipment_tips_top_area/equipment_normaal_info/equipment_type").gameObject:GetComponent(UnityEngine.UI.Text)
        self.m_equipment_source = self.m_equipment_type.transform:Find("equipment_qiju").gameObject:GetComponent(UnityEngine.UI.Text)
        self.m_equipment_normal_info_level = self.m_equipment_top:Find("equipment_tips_top_area/equipment_normaal_info/equipment_level").gameObject:GetComponent(UnityEngine.UI.Text)
        self.m_equipment_lock = self.m_equipment_top:Find("equipment_tips_top_area/equipment_icon_bg/equipment_lock_bg")
        --以下暂未显示，待做
        self.m_equipment_quality = self.m_equipment_top:Find("equipment_tips_top_area/equipment_normaal_info/equipment_quality").gameObject:GetComponent(UnityEngine.UI.Text)
        self.m_equipment_way = self.m_equipment_top:Find("equipment_tips_top_area/equipment_normaal_info/equipment_way").gameObject:GetComponent(UnityEngine.UI.Text)
        self.m_equipment_occu = self.m_equipment_top:Find("equipment_tips_top_area/equipment_normaal_info/equipment_occu").gameObject:GetComponent(UnityEngine.UI.Text)
        ------装备Tips信息滑动区域
        self.m_equip_info_scroll_view = tipsGo.transform:Find("equipment_tips_info")
        --显示基础属性值的模板
        self.equipment_normal_attr_item = tipsGo.transform:Find("equipment_normal_attr_item").gameObject
        --显示进阶属性值的模板
        self.equipment_advance_attr_item = tipsGo.transform:Find("equipment_advance_attr_item").gameObject
        ------装备属性部分
        self.m_equipment_attr = self.m_equip_info_scroll_view:Find("Viewport/Content/equipment_attr")
        ----武器信息
        self.m_weapon_info_area = self.m_equipment_attr:Find("weapon_info_area")
        --伤害最小值
        self.m_weapon_attack_min = self.m_weapon_info_area:Find("weapon_info/equipment_attack_info/attack_min").gameObject:GetComponent(UnityEngine.UI.Text)
        --伤害最大值
        self.m_weapon_attack_max = self.m_weapon_info_area:Find("weapon_info/equipment_attack_info/attack_max").gameObject:GetComponent(UnityEngine.UI.Text)
        --攻速
        self.m_weapon_attack_speed = self.m_weapon_info_area:Find("weapon_info/attack_speed").gameObject:GetComponent(UnityEngine.UI.Text)
        --每秒伤害
        self.m_attack_per_second = self.m_weapon_info_area:Find("attack_per_second").gameObject:GetComponent(UnityEngine.UI.Text)

        self.m_equipment_level_info = self.m_equip_info_scroll_view:Find("Viewport/Content/equipment_level/equipment_level_info").gameObject:GetComponent(UnityEngine.UI.Text)
        self.m_equipment_level_up = self.m_equip_info_scroll_view:Find("Viewport/Content/equipment_level/level_up").gameObject
        self.m_equipment_level_down = self.m_equip_info_scroll_view:Find("Viewport/Content/equipment_level/level_down").gameObject
        self.m_equipment_third_attr = self.m_equip_info_scroll_view:Find("Viewport/Content/equipment_third_attr")
        --未获取
        self.m_equipment_des = self.m_equip_info_scroll_view:Find("Viewport/Content/equipment_des/equipment_des_value").gameObject:GetComponent(UnityEngine.UI.Text)
        ------装备Tips按钮区域
        self.m_btn_area = tipsGo.transform:Find("button_area")
        self.m_sell_btn = self.m_btn_area:Find("sell_btn").gameObject
        self.m_inset_btn = self.m_btn_area:Find("inset_btn").gameObject
        self.m_put_on_btn = self.m_btn_area:Find("put_on_btn").gameObject
        self.m_get_off_btn = self.m_btn_area:Find("get_off_btn").gameObject
        ------切换显示装备按钮区域的显示位置
        self.m_equipment_choice = self.m_equip_info_scroll_view:Find("equipment_chioce")

        self:subscribe(self.m_frame:on_event("child_created"), function(child_frame)
            local name = child_frame:getFrameName()
            local view = self.m_mgr:getView(name)
            local view_go = view:getGO()
            view_go.transform.parent = self.m_equipment_choice
            view_go.transform.localPosition = Vector3.zero
            view_go.transform.localScale = Vector3.one
        end)

        ------为按钮添加点击事件
        self.m_sell_btn:GetComponent(UnityEngine.UI.Button).onClick:AddListener(function()
            --出售按钮点击事件
        end)

        self.m_inset_btn:GetComponent(UnityEngine.UI.Button).onClick:AddListener(function()
            --镶嵌按钮点击事件
        end)

        self.m_put_on_btn:GetComponent(UnityEngine.UI.Button).onClick:AddListener(function()
            --装备按钮点击事件,请求服务器
            local equip_type = self.m_equipment_msg.derived_params[2]
            if equip_type == SharedEnum.WearableTarget.FINGER then
                self:put_on_equipment_index(1)
                self.m_inventory_mgr:put_on_equipment_request_server(self.m_put_on_equipment_index, self.m_equip_unique, self.m_equip_id)

            elseif equip_type == SharedEnum.WearableTarget.ACCESSORY then
                self:put_on_equipment_index(2)
                self.m_inventory_mgr:put_on_equipment_request_server(self.m_put_on_equipment_index, self.m_equip_unique, self.m_equip_id)
            else
                self.m_inventory_mgr:put_on_equipment_request_server(equip_type, self.m_equip_unique, self.m_equip_id)
            end
            self.m_tips_parent_view:close_tips()
        end)

        self.m_get_off_btn:GetComponent(UnityEngine.UI.Button).onClick:AddListener(function()
            --卸下按钮点击事件,请求服务器
            local equip_type = self.m_equipment_msg.derived_params[2]
            if self.m_type then
                equip_type = self.m_type
            end
            self.m_inventory_mgr:get_off_equipment_request_server(equip_type)
            self.m_tips_parent_view:close_tips()
        end)
    end)

    self:subscribe(frame:on_event("refresh_view"), function(params, equipment_type)
        self:refresh(params, equipment_type)
    end)
end

------Tips采用激活和隐藏的形式，用来在每次显示Tips时初始化信息
function equipment_tips_view:refresh(param, equipment_type)
    if equipment_type then
        self.m_type = equipment_type
    end
    --装备的序号id和物品id
    self.m_equip_unique = param.wearable['unique']
    self.m_equip_id = param.wearable['tmpl']
    --tips的最大限制高度
    local max_height = param['max_height']
    local show_btn_area = param['need_show_button']
    --装备的信息
    self.m_equipment_msg = dbc.item[self.m_equip_id]
    if self.m_equipment_msg.derived_params[2] == SharedEnum.WearableTarget.FINGER then
        self.m_tips_parent_view:set_bag_tips_equipment_index(SharedEnum.WearableTarget.FINGER1)
    elseif self.m_equipment_msg.derived_params[2] == SharedEnum.WearableTarget.ACCESSORY then
        self.m_tips_parent_view:set_bag_tips_equipment_index(SharedEnum.WearableTarget.ACCESSORY1)
    end

    ------判断是否需要显示下方按钮区域
    if show_btn_area == 1 then
        self.m_btn_area.gameObject:SetActive(true)
        self.m_sell_btn.gameObject:SetActive(true)
        self.m_put_on_btn.gameObject:SetActive(true)
        self.m_inset_btn.gameObject:SetActive(false)
        self.m_get_off_btn.gameObject:SetActive(false)
    elseif show_btn_area == 2 then
        self.m_btn_area.gameObject:SetActive(true)
        self.m_sell_btn.gameObject:SetActive(false)
        self.m_put_on_btn.gameObject:SetActive(false)
        self.m_inset_btn.gameObject:SetActive(true)
        self.m_get_off_btn.gameObject:SetActive(true)
    else
        self.m_btn_area.gameObject:SetActive(false)
    end

    ------填充装备的信息
    self:change_sprite(self.m_equipment_icon, self.m_equipment_msg['bag_icon'])
    --获取并更换装备品质的底纹
    --local equipment_quality_icon_id = self.m_equipment_msg['quality']
    --local equipment_quality_icon_path = dbc.equip_quality_client[equipment_quality_icon_id]['backpack_icon']
    --self:change_sprite(self.m_equipment_quality_icon, equipment_quality_icon_path)

    self.m_equipment_top_level.text = param.wearable['level']
    self.m_equipment_name.text = self.m_equipment_msg['name']
    if param['is_equip'] then
        self.m_equipment_state:SetActive(true)
    else
        self.m_equipment_state:SetActive(false)
    end
    self.m_equipment_type.text = self:get_equipment_type(self.m_equipment_msg['derived_params'][2])
    self.m_equipment_source.text = self:get_equipment_source(self.m_equipment_msg['derived_params'][1])
    self.m_equipment_normal_info_level.text = param.wearable['level'] .. "级"
    self.m_equipment_level_info.text = param.wearable['level']

    --判断是否显示绑定状态
    if param['not_show_lock'] then
        self.m_equipment_lock.gameObject:SetActive(false)
    else
        self.m_equipment_lock.gameObject:SetActive(true)
    end

    ------对比信息
    if param['level_high'] then
        if param['level_high'] == 0 then
            self.m_equipment_level_up:SetActive(false)
            self.m_equipment_level_down:SetActive(false)
        elseif param['level_high'] == 1 then
            self.m_equipment_level_up:SetActive(true)
            self.m_equipment_level_down:SetActive(false)
        else
            self.m_equipment_level_up:SetActive(false)
            self.m_equipment_level_down:SetActive(true)
        end
    else
        self.m_equipment_level_up:SetActive(false)
        self.m_equipment_level_down:SetActive(false)
    end

    ------设置滑动区域的高度
    local equip_info_view = self.m_equip_info_scroll_view.gameObject:GetComponent(UnityEngine.RectTransform)
    local content_rect_transform = self.m_equip_info_scroll_view.transform:GetChild(0):GetChild(0).gameObject:GetComponent(UnityEngine.RectTransform)
    local equip_top_height = self.m_equipment_top.gameObject:GetComponent(UnityEngine.RectTransform).rect.height
    local button_area_height = self.m_btn_area.gameObject:GetComponent(UnityEngine.RectTransform).rect.height
    --当按钮区域没有显示，则不计算高度
    if not self.m_btn_area.gameObject.activeSelf then
        button_area_height = 0
    end
    UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(content_rect_transform)

    equip_info_view.sizeDelta = Vector2(self:GetContentPreferredSize(content_rect_transform, 0), self:GetContentPreferredSize(content_rect_transform, 1))
    --当高度超过最大限制高度时，设置其高度为最大限制高度，并可以滑动
    if equip_info_view.rect.height > max_height - equip_top_height - button_area_height then
        equip_info_view.sizeDelta = Vector2(equip_info_view.rect.width, max_height - equip_top_height - button_area_height)
        self.m_equip_info_scroll_view:GetChild(0).gameObject:GetComponent(UnityEngine.UI.Image).raycastTarget = true
        self.m_equip_info_scroll_view.gameObject:GetComponent(UnityEngine.UI.ScrollRect).enabled = true
    end
end

------获取实时的RectTransform的宽高  axis 0-宽度，1-高度
function equipment_tips_view:GetContentPreferredSize(rectTransform, axis)
    return UnityEngine.UI.LayoutUtility.GetPreferredSize(rectTransform, axis)
end

------当装备为戒指或饰品时，获取需要穿上此装备的装备位  index 1-戒指  2-饰品
function equipment_tips_view:put_on_equipment_index(index)
    --获取装备位数据
    local equipping_dic = self.m_inventory_mgr:gain_equiping_dic()
    if index == 1 then
        if equipping_dic["finger1"]["level"] == 0 then
            self.m_put_on_equipment_index = SharedEnum.WearableTarget.FINGER1
        elseif equipping_dic["finger2"]["level"] == 0 then
            self.m_put_on_equipment_index = SharedEnum.WearableTarget.FINGER2
        end
    else
        if equipping_dic["accessory1"]["level"] == 0 then
            self.m_put_on_equipment_index = SharedEnum.WearableTarget.ACCESSORY1
        elseif equipping_dic["accessory2"]["level"] == 0 then
            self.m_put_on_equipment_index = SharedEnum.WearableTarget.ACCESSORY2
        end
    end
end

------获取装备的基础属性
function equipment_tips_view:get_equipment_normal_attr(normal_attr_list)

end

------获取装备的部位
function equipment_tips_view:get_equipment_type(type)
    local equip_type = ""
    if type == SharedEnum.WearableTarget.HEAD then
        equip_type = "头盔"
    elseif type == SharedEnum.WearableTarget.SHOULDER then
        equip_type = "肩甲"
    elseif type == SharedEnum.WearableTarget.CHEST then
        equip_type = "胸甲"
    elseif type == SharedEnum.WearableTarget.WRIST then
        equip_type = "护腕"
    elseif type == SharedEnum.WearableTarget.HANDS then
        equip_type = "手套"
    elseif type == SharedEnum.WearableTarget.WAIST then
        equip_type = "腰带"
    elseif type == SharedEnum.WearableTarget.LEGS then
        equip_type = "腿甲"
    elseif type == SharedEnum.WearableTarget.FEET then
        equip_type = "战靴"
    elseif type == SharedEnum.WearableTarget.NECK then
        equip_type = "项链"
    elseif type == SharedEnum.WearableTarget.BACK then
        equip_type = "披风"
    elseif type == SharedEnum.WearableTarget.FINGER then
        equip_type = "戒指"
    elseif type == SharedEnum.WearableTarget.ACCESSORY then
        equip_type = "饰品"
    elseif type == SharedEnum.WearableTarget.MAINHAND_WEAPON then
        equip_type = "主手武器"
    elseif type == SharedEnum.WearableTarget.OFFHAND_WEAPON then
        equip_type = "副手武器"
    elseif type == SharedEnum.WearableTarget.ONEHAND_WEAPON then
        equip_type = "单手武器"
    elseif type == SharedEnum.WearableTarget.TWOHAND_WEAPON then
        equip_type = "双手武器"
    end
    return equip_type
end

------获取装备材质
function equipment_tips_view:get_equipment_source(source)
    local equip_source = ""
    if source == SharedEnum.WearableSource.OTHER then
        equip_source = "(其他)"
    elseif source == SharedEnum.WearableSource.CLOTH then
        equip_source = "(布)"
    elseif source == SharedEnum.WearableSource.LEATHER then
        equip_source = "(皮)"
    elseif source == SharedEnum.WearableSource.MAIL then
        equip_source = "(锁)"
    elseif source == SharedEnum.WearableSource.PLATE then
        equip_source = "(板)"
    elseif source == SharedEnum.WearableSource.SWORD then
        equip_source = "(剑)"
    elseif source == SharedEnum.WearableSource.DAGGER then
        equip_source = "(匕首)"
    elseif source == SharedEnum.WearableSource.MACE then
        equip_source = "(锤)"
    elseif source == SharedEnum.WearableSource.AXE then
        equip_source = "(斧)"
    elseif source == SharedEnum.WearableSource.WAND then
        equip_source = "(杖)"
    elseif source == SharedEnum.WearableSource.SHIELD then
        equip_source = "(盾)"
    elseif source == SharedEnum.WearableSource.STAFF then
        equip_source = "(棍)"
    elseif source == SharedEnum.WearableSource.FAN then
        equip_source = "(扇)"
    elseif source == SharedEnum.WearableSource.GUN then
        equip_source = "(枪)"
    elseif source == SharedEnum.WearableSource.BOW then
        equip_source = "(弓)"
    elseif source == SharedEnum.WearableSource.CROSSBOW then
        equip_source = "(弩)"
    elseif source == SharedEnum.WearableSource.MORTAR then
        equip_source = "(炮)"
    end
    return equip_source
end

------获取对应的icon的图片
function equipment_tips_view:change_sprite(image, icon_path)
    local equipment_icon
    self:subscribe(app:getResMgr():rxLoad(icon_path), function(asset_ref)
        local tex = asset_ref.asset
        if (tex == nil) then
            Debug.LogError("找不到这个icon啊---->" .. icon_path)
        else
            image.sprite = Sprite.Create(tex, Rect(0, 0, tex.width, tex.height), Vector2(0.5, 0.5))
        end
    end)
    return equipment_icon
end

------根据计算公式计算装备的属性值
--param1 参数1
--param2 参数2
--param3 参数3
--level  物品等级
--coefficient 修正系数
function equipment_tips_view:get_equipment_attr_value(param1, param2, param3, level, coefficient)
    local result = param1 * math.exp(param2 / param3 * level) * coefficient
    result = (result % 1 >= 0.5 and math.ceil(result)) or math.floor(result)
    return result
end

return equipment_tips_view