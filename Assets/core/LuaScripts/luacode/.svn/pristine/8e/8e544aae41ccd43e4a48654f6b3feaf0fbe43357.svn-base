-- 角色行为状态 技能引导
local require_relative = REQUIRE_BASE(...)
local UnitActStateBase = require_relative("ua_state_base")
-- 在initialize中初始化，避免交叉require死循环
local UAFsm = nil
local Unit = nil

local M = class("UnitActStateSkillChannel", UnitActStateBase)

function M:initialize(fsm, unit)
    UnitActStateBase.initialize(self, fsm, unit)

    UAFsm = require_relative("ua_state_machine")
    Unit = require "frame.unit"
    
end

function M:enter()  
    UnitActStateBase.enter(self)

    -- cast_time 是释放技能时从服务器获取的
    local cast_time = self.m_param.skill_queue_object.cast_time

    --print("UnitActStateSkillSing:enter and cast_time = "..cast_time)

    self.m_unit:set_main_act(enum.battle.Unit_Main_Act.SKILL_CHANNEL)

    -- 计算状态剩余时间，日后会改从服务器获取
    local duration = cast_time

    assert(duration ~= nil, string.format("fail to get sing time of %d", self.m_unit:get_skill_id()))

    local server_time = app:get_server_time()

    self.m_end_time = server_time + duration

    self.m_unit:set_skill_sing_start_time(server_time)

    self.m_unit:set_skill_sing_end_time(self.m_end_time)

    self.m_world = app:getFrameMgr():getFrame("world")

    local skill_data = self.m_unit:get_skill(self.m_unit:get_skill_id())

    self.m_skill_cfg = skill_data:get_cfg()


    self.m_skill_finish = true -- 暂时用来判断引导技能是打断还是完成 by:wdd

    self:check_special_start(self.m_param.skill_queue_object.spell_client_id)
end


function M:exit()
    --print("UnitActStateSkillSing:exit")

    self:check_special_exit(self.m_param.skill_queue_object.spell_client_id)
    
    self.m_unit:emit_event("skill_channel_stop",self.m_skill_finish)

    UnitActStateBase.exit(self)
end


function M:update()

    --print("UnitActStateSkill:update")
    UnitActStateBase.update(self)

    local cc = self.m_unit:get_cc()
    if cc == nil then
        return
    end

    local skill_queue_object = self.m_param.skill_queue_object
    local server_time = app:get_server_time()

    --------------------
    -- 结束施法
    if self.m_end_time <= server_time then    
        self.m_unit:on_skill_channel_state_exit(skill_queue_object)   
        self.m_fsm:change_state(enum.battle.Unit_Main_Act.MOVE)
        self.m_skill_finish = true
        return
    end

    local delta_time = app:get_delta_time()
    -- 同步朝向
    self.m_unit:turn_to_target()    -- By pacman 2018-03-08
    self.m_unit:update_dir()

    -- 起跳处理
    if self.m_unit:get_to_jump() then
        -- print("----------- to jumpe~")
        self.m_unit:set_to_jump(false)
        self.m_unit:set_gravity_speed(Unit.START_JUMP_SPEED)
        -- print(">>>>>>>>>>>>>>>", self.m_unit:get_gravity_speed())

        -- pacman 2018-01-26 吟唱中跳跃会打断施法
        self.m_unit:cancel_cast()

        self.m_fsm:change_state(enum.battle.Unit_Main_Act.JUMP)
        return
    end

    -- 移动处理 以下代码全部复制于吟唱---
    local move_state = self.m_unit:get_move_state()

    if move_state ~= Unit.MOVE_STATE.IDLE then
        local can_move = self.m_skill_cfg.can_cast_while_moving
        if can_move == true then
            local move_speed_xz = self.m_unit:get_actural_move_speed()
            local move_dir = self.m_unit:get_move_dir()
            self.m_unit:set_gravity_speed(-Unit.GRAVITY)
            local movespeed = Quaternion.AngleAxis(move_dir, Vector3.up) * Vector3.forward * move_speed_xz
            movespeed.y = self.m_unit:get_gravity_speed()
            local movement = movespeed * delta_time
            cc:Move(movement)
            self.m_unit:set_pos(cc.transform.position)
        else
            self.m_skill_finish = false
            self.m_fsm:change_state(enum.battle.Unit_Main_Act.MOVE)
        end
    end
 
     self:check_special_update(skill_queue_object.spell_client_id)
end

function M:change_move_state(move_state)
    self.m_unit:set_move_state(move_state)
end



function M:check_special_start(spell_client_id)
    local func = self["special_start_"..spell_client_id]
    if(func ~= nil and type(func) == "function") then
        func(self)
    end
end

function M:check_special_update(spell_client_id)
    local func = self["special_update_"..spell_client_id]
    if(func ~= nil and type(func) == "function") then
        func(self)
    end
end


function M:check_special_exit(spell_client_id)
    local func = self["special_end_"..spell_client_id]
    if(func ~= nil and type(func) == "function") then
        func(self)
    end
end



-- 原刃舞
-- function M:special_start_913005()
--     self.m_unit:emit_event("run_function","show_hide_avatar",false)
    
-- end
-- function M:special_end_913005()
--     self.m_unit:emit_event("run_function","show_hide_avatar",true)

-- end




-- 火焰追击
function M:special_start_6()
    local client_cfg = dbc.spell_client[self.m_param.skill_queue_object.spell_client_id]
    self.m_special_start_6_start = 0
    self.m_special_start_6_bone = client_cfg.cast_start_mount_point[1]
    self.m_unit:emit_event("run_function","create_laser",client_cfg.cast_sfx[1])
end

function M:special_update_6()
    if(self.m_special_start_6_start == 0) then self.m_special_start_6_start = Time.time + 2 end
    local target_unit = self.m_world:getFirstUnitByType(200005)
    if(target_unit ~= nil) then

        local percent = Time.time / self.m_special_start_6_start

        local ori = self.m_unit:get_bone(self.m_special_start_6_bone).position

        local tar = target_unit:get_pos() 

        self.m_unit:emit_event("run_function","shoot_laser",ori,Vector3.Lerp(ori,tar,percent))
    end
end

function M:special_end_6()
    self.m_unit:emit_event("run_function","shoot_laser",nil,nil)
    self.m_special_start_6_start = nil
    self.m_special_start_6_bone = nil
end

return M
