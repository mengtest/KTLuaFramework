
local Quest_detail = require "subsystem.quest.quest_bar.quest_detail"


local View = require("system.view")
local Quest_bar_view = class("Quest_bar_view", View)


function Quest_bar_view:doInit()
    self.m_main_player = self:getFrame("world"):get_main_player()
    self.m_quest_manager = self:getFrame("quest_manager")
    self.m_first_quest = Quest_detail:new()
    self.m_second_quest = Quest_detail:new()
    self.m_quest_list = {}
    
    local this = self
    self:load("ui/sidebar/tab_quest.prefab", function (tab_quest_go)
        local parent_node = self:getParent():getGO().transform:GetChild(0):Find("quest_bar")

        self:load("ui/sidebar/item_quest/sidebar_quest_item.prefab", function (quest_detail_go)
            local quest_detail_go_copy = Object.Instantiate(quest_detail_go)
            this.m_first_quest:set_go(quest_detail_go, this)
            this.m_second_quest:set_go(quest_detail_go_copy, this)
            
            this:init_with_go(tab_quest_go, parent_node)
        end)
    end)
end

function Quest_bar_view:on_prepared()
    Event_system:add_event_listener(EVENT_QUEST_ADD_QUEST, event_binder(self, self.add_quest))
    Event_system:add_event_listener(EVENT_QUEST_DEL_QUEST, event_binder(self, self.del_quest))
    Event_system:add_event_listener(EVENT_QUEST_ADD_NEW_QUEST, event_binder(self, self.add_new_quest))
    Event_system:add_event_listener(EVENT_QUEST_UPDATE_QUEST, event_binder(self, self.refresh_schdule))
    
    self.m_rect = self.m_go:GetComponent(RectTransform)
    self.m_rect.sizeDelta = Vector2(0, 0)
    self.m_quest_item_node = self.m_rect:Find("viewport/vertical_group_quest")
    self.m_line_pref_go = self.m_rect:Find("viewport/vertical_group_quest/line").gameObject
    self.m_first_quest:set_parent(self.m_quest_item_node)
    self.m_second_quest:set_parent(self.m_quest_item_node)
    
    self:subscribe(self.m_frame:on_event("show"), function ()
        self.m_go:SetActive(true)
    end)
    self:subscribe(self.m_frame:on_event("hide"), function ()
        self.m_go:SetActive(false)
    end)
    self:subscribe(self.m_frame:on_event("get_traced_quest_list"), function (cb)
        cb(self:get_traced_quest_list())
    end)
    self:refresh_all()
end

function Quest_bar_view:doDestroy()
    Event_system:del_event_listener(EVENT_QUEST_ADD_QUEST, event_binder(self, self.add_quest))
    Event_system:del_event_listener(EVENT_QUEST_DEL_QUEST, event_binder(self, self.del_quest))
    Event_system:del_event_listener(EVENT_QUEST_ADD_NEW_QUEST, event_binder(self, self.add_new_quest))
    Event_system:del_event_listener(EVENT_QUEST_UPDATE_QUEST, event_binder(self, self.refresh_schdule))
end

function Quest_bar_view:show()
    self.m_go:SetActive(true)
end

function Quest_bar_view:hide()
    self.m_go:SetActive(false)
end

function Quest_bar_view:refresh_all()
    local quest_list = self.m_quest_manager:get_quest_list()
    for quest_id, quest_data in pairs(quest_list) do
        if quest_id ~= 911 then
            self:add_quest(quest_id, quest_data)
        end
    end
end

function Quest_bar_view:add_quest(quest_id, quest_data)
    local cur_detail_count = Util_table:count(self.m_quest_list)
    if cur_detail_count == 0 then
        self.m_first_quest:set_const_info(dbc.quest[quest_id])
        self.m_first_quest:set_quest_data(quest_data)
        self.m_first_quest:refresh_schdule()
        self.m_first_quest:show()
        self.m_quest_list[quest_id] = self.m_first_quest
    elseif cur_detail_count == 1 then
        self.m_second_quest:set_const_info(dbc.quest[quest_id])
        self.m_second_quest:set_quest_data(quest_data)
        self.m_second_quest:refresh_schdule()
        self.m_second_quest:show()
        self.m_quest_list[quest_id] = self.m_second_quest
    elseif cur_detail_count == 2 then
        if not quest_data:is_begin_with_enter_area() then
            return
        end
        local old_quest_id = self.m_first_quest:get_quest_id()
        self.m_quest_list[old_quest_id] = nil
        self.m_first_quest:set_const_info(dbc.quest[quest_id])
        self.m_first_quest:set_quest_data(quest_data)
--        self.m_first_quest:set_main_btn_cb(event_binder(self, self.open_quest_ui_main))
        self.m_first_quest:refresh_schdule()
        self.m_quest_list[quest_id] = self.m_first_quest
    end
end

function Quest_bar_view:del_quest(quest_id)
    self.m_quest_list[quest_id]:destroy()
    local scroll_text = app:get_ui_manager():create_scroll_text({["offset_y"] = 80, ["end_y"] = 180, ["duration"] = 3})
    scroll_text:set_attr("msg", string.format("【%d】任务已完成", quest_id))

    local aim_quest = self.m_quest_list[quest_id]
    if aim_quest == self.m_first_quest then
        local replace_quest_data = self:get_replace_quest()
        if replace_quest_data then
            local replace_quest_id = replace_quest_data:get_quest_id()
            self.m_quest_list[quest_id] = nil
            self.m_first_quest:set_const_info(dbc.quest[quest_id])
            self.m_first_quest:set_quest_data(replace_quest_data)
            self.m_first_quest:refresh_schdule()
            self.m_quest_list[replace_quest_id] = self.m_first_quest
        else
            if self.m_second_quest:get_is_show() then
                self.m_first_quest, self.m_second_quest = self.m_second_quest, self.m_first_quest
                Util_log:logError(Util_log.Mask.SJG_Temp, "将第二个追踪栏与第一个追踪栏交换地址，并重置各自的位置。")
            else
                self.m_quest_list[quest_id] = nil
                self.m_first_quest:hide()
            end
        end
        
    elseif aim_quest == self.m_second_quest then
        local replace_quest_data = self:get_replace_quest()
        if replace_quest_data then
            local replace_quest_id = replace_quest_data:get_quest_id()
            self.m_quest_list[quest_id] = nil
            self.m_second_quest:set_const_info(dbc.quest[quest_id])
            self.m_second_quest:set_quest_data(replace_quest_data)
            self.m_second_quest:refresh_schdule()
            self.m_quest_list[replace_quest_id] = self.m_second_quest
        else
            self.m_quest_list[quest_id] = nil
            self.m_second_quest:hide()
        end
    end
end

function Quest_bar_view:add_new_quest(quest_id)
    local scroll_text = app:get_ui_manager():create_scroll_text({["offset_y"] = 50, ["end_y"] = 150, ["duration"] = 3})
    scroll_text:set_attr("msg", string.format("【%d】任务已接取", quest_id))
end

function Quest_bar_view:refresh_schdule(id)
    self.m_quest_list[id]:refresh_schdule()
end

function Quest_bar_view:get_traced_quest_list()
    local rst_tbl = {}
    local cur_quest_data = self.m_first_quest:get_quest_data()
    if cur_quest_data then
        table.insert(rst_tbl, cur_quest_data)
    end
    cur_quest_data = self.m_second_quest:get_quest_data()
    if cur_quest_data then
        table.insert(rst_tbl, cur_quest_data)
    end
    return rst_tbl
end

function Quest_bar_view:get_replace_quest()
    local primary_quest_data = nil
    local quest_data_dict = self.m_quest_manager:get_quest_list()
    if Util_table:count(quest_data_dict) >= 2 then
        local quest_infos = dbc.quest
        local quest_tp_dict = {
            [Enum_Quest.Quest_Type.Main] = {},
            [Enum_Quest.Quest_Type.Side] = {},
            [Enum_Quest.Quest_Type.Area] = {},
        }
        
        for quest_id, quest_data in pairs(quest_data_dict) do
            local is_passable = true
            for pass_quest_id, _ in pairs(self.m_quest_list) do
                if pass_quest_id == quest_id then
                    is_passable = false
                    break
                end
            end
            if is_passable then
                table.insert(quest_tp_dict[quest_infos[quest_id].type], quest_data)
            end
        end
        
        while true do
            local cur_tp_quest_list = quest_tp_dict[Enum_Quest.Quest_Type.Main]
            if #cur_tp_quest_list > 0 then
                self:sort_quest_by_timestamp(cur_tp_quest_list)
                primary_quest_data = cur_tp_quest_list[1]
                break
            end
            cur_tp_quest_list = quest_tp_dict[Enum_Quest.Quest_Type.Side]
            if #cur_tp_quest_list > 0 then
                self:sort_quest_by_timestamp(cur_tp_quest_list)
                primary_quest_data = cur_tp_quest_list[1]
                break
            end
            cur_tp_quest_list = quest_tp_dict[Enum_Quest.Quest_Type.Area]
            if #cur_tp_quest_list > 0 then
                self:sort_quest_by_timestamp(cur_tp_quest_list)
                primary_quest_data = cur_tp_quest_list[1]
                break
            end
            break
        end
    end
    return primary_quest_data
end

function Quest_bar_view:sort_quest_by_timestamp(quest_list)
    table.sort(quest_list, function (former, later)
        return former:get_timestamp() < later:get_timestamp()
    end)
end

function Quest_bar_view:doUpdate()
    for quest_id, quest_detail in pairs(self.m_quest_list) do
        local quest_data = self.m_quest_manager:get_quest_list()[quest_id]
        local dis_aim, dir_aim = quest_data:get_closest_aim_info()
        local dir_self = self.m_main_player:get_dir()
        quest_detail:refresh_aim_info(dis_aim, dir_aim, dir_self)
    end
end

return Quest_bar_view