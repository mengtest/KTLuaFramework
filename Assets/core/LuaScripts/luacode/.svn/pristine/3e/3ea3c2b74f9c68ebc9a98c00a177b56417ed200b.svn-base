local M = {}

-- Attribute.decl(M, "target", nil)
-- Attribute.decl(M, "target_name", nil)
Event.decl(M, "change_battle_state")


function M:doInit(role)
    -- self.m_role = role

    -- self:subscribe(role:on_event_target_set(true), function(value)
    -- 	if value ~= nil then
    -- 		-- print("------------------new target ", value:get_name())
    -- 		self:set_target(value)
    -- 	end
    -- end)
    self.m_quest_bar_frame = nil
    self.ui_manager = app:get_ui_manager()
end

function M:create_quest_bar()
    local param_quest_bar = nil
    self.m_quest_bar_frame = self:createChild("quest_bar", "%subsystem.quest.quest_bar.quest_bar", param_quest_bar)
end

function M:create_player_buff_container(unit)
    local param = { unit = unit }
    print(">>>>>>>>>>>>>>>>>>>>>create_player_buff_container", param.unit:get_id())
    local buff_container = self:createChild("player_buff_container", "buff_container", param)
    return buff_container
end

function M:create_target_buff_container(unit)
    local param = { unit = unit }
    print("++++++++++++++++++++++create_player_buff_container", param.unit:get_id())
    local buff_container = self:createChild("target_buff_container", "buff_container", param)
    return buff_container
end

function M:on_inventory()
    self:logDebug("UIMain:on_inventory")

    if self:getChild("ui_inventory") then
        self:destroyChild("ui_inventory")
    else
        self:createChild("ui_inventory")
    end
end

function M:on_equipment()
    self:logDebug("UIMain:on_equipment")
end

function M:on_skills()
    self:logDebug("UIMain:on_skills")
end

function M:on_character_info()
    self:logDebug("UIMain:on_character_info")

    --if self:getChild("ui_character_info") then
    --	self:destroyChild("ui_character_info")
    --else
    --self:createChild("ui_character_info")
    -- 使用ui_manager创建character_info frame

    --end
end

function M:on_quests()
    self:logDebug("UIMain:on_quests")
end

function M:on_quit()
    self:logDebug("UIMain:on_quit")
    app:doReturnLogin()
end
function M:on_change_battle_state(state)
    if (state == 1) then
        self:emit_event("change_battle_state", true)
    else
        self:emit_event("change_battle_state", false)
    end
end

--对话泡泡
function M:set_bubble(dialog_id)
    self:emit_event("popup_bubble", dialog_id)
end

--副本进入页面    ke
function M:create_dungeon_join(open_diff_list)
    self.ui_manager:CreateUI("dungeon_join", "%subsystem.dungeon.dungeon_join", open_diff_list, self.ui_manager.UI_Depth.NORMAL)
end

function M:create_dungeon_confirm_progress()
    self.ui_manager:CreateUI("dungeon_confirm_progress", "%subsystem.dungeon.dungeon_confirm_progress", nil, self.ui_manager.UI_Depth.HIGH)
end

return M