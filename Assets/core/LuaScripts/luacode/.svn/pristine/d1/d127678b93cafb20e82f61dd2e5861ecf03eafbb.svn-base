
local Quest_condition_class_dir = {
	[SharedEnum.QuestCond.TREASURE] = require("subsystem.quest.condition.quest_condition_collect"),
	[SharedEnum.QuestCond.POSITION] = require("subsystem.quest.condition.quest_condition_enter_area"),
	[SharedEnum.QuestCond.CREATURE] = require("subsystem.quest.condition.quest_condition_hunt"),
    [SharedEnum.QuestCond.SKILL] = require("subsystem.quest.condition.quest_condition_skill")
	--[SharedEnum.QuestCond.] = require("subsystem.quest.condition.quest_condition_talk"),
}


local Quest_data = class("Quest_data")

function Quest_data:initialize(quest_id, quest_manager)
    self.m_quest_id = quest_id	--任务ID
    self.m_quest_manager = quest_manager
    --self.m_precondition_
    self.m_condition_dict = {}	--通过条件列表
    self.m_passed_quest_list = {}
    self.m_aim_weights = 0
    local quest_info = dbc.quest[self.m_quest_id]
    --self.m_giver = quest_info.giver
    self.m_giver = (dbc.interact[quest_info.giver] and dbc.interact[quest_info.giver].obj_tp == Enum_Scene.Interact_Obj_Tp.Npc) and dbc.interact[quest_info.giver].obj_id or 0
    self.m_receiver = (quest_info.begin == 1 and dbc.interact[quest_info.begin_params[1]].obj_tp == Enum_Scene.Interact_Obj_Tp.Npc) and dbc.interact[quest_info.begin_params[1]].obj_id or 0
    self.m_giver_area = quest_info.giver_area
    --self.m_receiver = quest_info.begin == 1 and quest_info.begin_params[1] or 0
    self.m_is_passed = false
    
    Util_log:logError(Util_log.Mask.SJG_Quest, string.format("Quest_data after create_condition, self.m_quest_id = %s", tostring(self.m_quest_id)))
    self:create_condition(quest_manager)
end

function Quest_data:create_condition(quest_manager)
    local data = dbc.quest[self.m_quest_id]
    if not data then
        --Debug.LogError(string.format("Quest_data:init_condition() error, 未找到指定的m_quest_id(%s)", tostring(self.m_quest_id)))
        return
    end
    for index = 1, 8 do
        local tp_name = "finish" .. tostring(index)
        local tp = data[tp_name]
        if tp and tp > 0 then
            if Quest_condition_class_dir[tp] then
                local condition = Quest_condition_class_dir[tp]:new(self.m_quest_id, index, quest_manager)
                assert(condition)
                self.m_aim_weights = self.m_aim_weights + condition:get_aim_weight()
                Util_log:logError(Util_log.Mask.SJG_Quest, string.format("Quest_data self.m_aim_weights = %s", tostring(self.m_aim_weights)))
                self.m_condition_dict[index] = condition
            else
                print(string.format("cant found the condition type of %d", tp))
            end
        end
    end
end

--[[function Quest_data:init_condition(finishes)
    for index, condition in pairs(self.m_condition_dict) do
        condition:set_cur_param(finishes[index].stats)
    end
end--]]

--[[function Quest_data:get_condition_dict()
	return self.m_condition_dict
end--]]

function Quest_data:get_cur_weights()
    local weights = 0
    for index, condition in pairs(self.m_condition_dict) do
        weights = weights + condition:get_cur_weight()
    end
    return weights
end

function Quest_data:get_aim_weights()
    return self.m_aim_weights
end

function Quest_data:get_closest_aim_info()
    if self.m_is_passed and self.m_giver_area[1] then
        return self:get_aim_info()
    end
    
    local infos = {}
    for _, condition in pairs(self.m_condition_dict) do
        local dis, dir = condition:get_aim_info()
        if dis then
            table.insert(infos, {dis, dir})
        end
    end
    --Util_log:logError(Util_log.Mask.SJG_Quest, "infos = " .. Util_string:get_string_by_tbl(infos))
    table.sort(infos, function (a, b)
        if a[1] < b[1] then
            return true
        else
            return false
        end
    end)
    if infos[1] then
        return infos[1][1], infos[1][2]
    end
end

function Quest_data:get_aim_info()
    --local dis, dir = 65536, Vector3.forward
    
    local dis, dir = nil, nil
    local world = self.m_quest_manager:getFrame("world")
    local area_data = world:get_area_data(self.m_giver_area[1], self.m_giver_area[2])
    if area_data then
        local own_pos = world:get_main_player():get_pos()
        local vec = (area_data.worldPosition - own_pos)
        dis = vec.magnitude
        dir = vec.normalized
    end
    return dis, dir
end

function Quest_data:set_condition_cur_param(index, cur_param)
    local condition = self.m_condition_dict[index]
    if not condition then return end
    condition:set_cur_param(cur_param)
    local is_passed = condition:on_judge()
    --app:logError("is_passed = " .. tostring(is_passed))
    if is_passed and not Util_table:is_contain(self.m_passed_quest_list, index) then
        table.insert(self.m_passed_quest_list, index)
    end
    local cur_count = #self.m_passed_quest_list
    local max_count = Util_table:count(self.m_condition_dict)
    if cur_count >= max_count then
        self.m_is_passed = true
        if self.m_giver <= 0 then
            self.m_quest_manager:req_complete_quest(self.m_quest_id)
        else
            self.m_quest_manager:set_npc_dependently_quest_state(self.m_giver, self.m_quest_id, Enum_Quest.Quest_State.Finished)
        end
    end
    
    --Event_system:dispatch_event(EVENT_QUEST_UPDATE_QUEST, self.m_quest_id)
end

function Quest_data:get_receiver()
    return self.m_receiver
end

function Quest_data:get_giver()
    return self.m_giver
end

return Quest_data