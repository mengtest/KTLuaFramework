---
--- Created by wdd.
--- DateTime: 2018/2/1 0001 17:30
---
local View =require("system.view")
local SkillRectWarningView = class("skill_rect_warning_view",View)


function SkillRectWarningView:doInit(param)
    self.m_skill_rect_warning_bstart = false
    self.m_skill_rect_warning_time = nil
    self.m_skill_rect_warning_endtime = nil
    self.m_skill_speed = nil
    self.m_skill_waring_curratio = 0
    self.projector = nil
    self.projector_move = nil
    self.aspectRatio = 0
    local width = param.width
    local casttime = param.casttime
    local height = param.height
    local angle = param.angle
    local pos = param.pos
    local viewgo = self:getGO()
    local pos_type = param.skill_sing_pro_pos
    local unit_view = param.unit_view -- 施法者
    local target_pos = param.target_pos -- 施法者
    local skill_sing_pro_rot_type = param.skill_sing_pro_rot_type
    local client_cfg = param.client_cfg
    ---- 根据目标类型设置位置
    if(pos_type == enum.battle.SKILL_SING_PRO_POS.CUR_CENTER) then
        if(param.target_unit~=nil) then
            local target_unit = param.target_unit -- 受击者
            local name = target_unit:getFrameName()
            local target_view = self.m_mgr:getView(name)
            local unit_go = target_view:getGO()
            if(unit_go~=nil) then
                viewgo.transform:SetParent(unit_go.transform)
                if(skill_sing_pro_rot_type == enum.battle.SKILL_SING_PRO_ROT.DISPERSE) then  -- 分散   以中心点为圆心，始终朝向外面。 根据角度计算
                    viewgo.transform.localPosition = Vector3.zero
                    viewgo.transform.localEulerAngles = Vector3(0,angle,0)
                elseif(skill_sing_pro_rot_type.skill_sing_pro_rot_type == enum.battle.SKILL_SING_PRO_ROT.PARALLEL) then -- 平行   以中心点为圆心，固定方向。
                     viewgo.transform.localPosition = Vector3(pos,0,0)
                    viewgo.transform.localEulerAngles = Vector3.zero
                end
            else
                app:logError("矩形预警区域目标为空")
            end
        else
            app:logError("矩形预警区域目标frame为空")
        end

    elseif (pos_type == enum.battle.SKILL_SING_PRO_POS.CUR_CENTER_POS) then
        if(target_pos~=nil) then
             viewgo.transform.position = target_pos
             if(skill_sing_pro_rot_type == enum.battle.SKILL_SING_PRO_ROT.DISPERSE) then  -- 分散   以中心点为圆心，始终朝向外面。 根据角度计算
                    viewgo.transform.localPosition = Vector3.zero
                    viewgo.transform.localEulerAngles = Vector3(0,angle,0)
             elseif(skill_sing_pro_rot_type.skill_sing_pro_rot_type == enum.battle.SKILL_SING_PRO_ROT.PARALLEL) then -- 平行   以中心点为圆心，固定方向。
                  viewgo.transform.localPosition = Vector3(pos,0,0)
                 viewgo.transform.localEulerAngles  = Vector3.zero
             end
        else
            app:logError("矩形预警区域目标坐标点为空")
        end
    elseif (pos_type == enum.battle.SKILL_SING_PRO_POS.RELEASER_CENTER) then
        local unit_go = unit_view:getGO()
        if(unit_go~=nil) then
            viewgo.transform:SetParent(unit_view:getGO().transform)
              if(skill_sing_pro_rot_type == enum.battle.SKILL_SING_PRO_ROT.DISPERSE) then  -- 分散   以中心点为圆心，始终朝向外面。 根据角度计算
                    viewgo.transform.localPosition = Vector3.zero
                    viewgo.transform.localEulerAngles = Vector3(0,angle,0)
                elseif(skill_sing_pro_rot_type == enum.battle.SKILL_SING_PRO_ROT.PARALLEL) then -- 平行   以中心点为圆心，固定方向。
                     viewgo.transform.localPosition = Vector3(pos,0,0)
                    viewgo.transform.localEulerAngles = Vector3.zero
                end
        else
            app:logError("矩形预警区域施法者为空")
        end
    end
      local res_path = "pro_rect_area"
    if not client_cfg then
        if not client_cfg.skill_sing_pro_res_name then
            res_path = client_cfg.skill_sing_pro_res_name
        end
    end
    self:load(app:getAssetPathMgr().get_skill_projector(res_path), function(eft_go)
        eft_go.name = "skill_rect_item"
        eft_go.transform.localPosition = Vector3(0, 2, 0)
        eft_go.transform.localScale = Vector3(1, 1, 1)
        eft_go.transform.localRotation = Vector3.zero
        self.m_skill_rect_item = eft_go
        self.projector =self.m_skill_rect_item.transform:Find("projector"):GetComponent(Projector)
        self.projector_move =self.m_skill_rect_item.transform:Find("move_projector"):GetComponent(Projector)
        self:start(width, height, casttime)
    end)
end

function SkillRectWarningView:Faild()
    self.m_skill_rect_warning_bstart = nil
    local frame = self:getFrame()
    frame:destroySelf()
end


function SkillRectWarningView:doUpdate()
    self:show_area_update()
end

-- 宽度  高度 时间；
function SkillRectWarningView:start(width,height,time)
    -- 根据参数对投影做一个初始化
    if(self.m_skill_rect_item~=nil) then
        if(self.projector == nil) then
            self.projector = self.m_skill_rect_item.transform:Find("projector"):GetComponent(Projector)
        end
        local ratio = width/height --  算出比例
        self.projector.orthographicSize = height
        self.projector.aspectRatio = ratio
        self.aspectRatio = ratio
        if(self.projector_move == nil) then
            self.projector_move = self.m_skill_rect_move_item.transform:Find("move_projector"):GetComponent(Projector)
        end
        self.projector_move.orthographicSize = height
        self.projector_move.aspectRatio = 0
        self.projector.ignoreLayers = LayerMask.GetMask("TransparentFX", "Role")
        self.projector_move.ignoreLayers = LayerMask.GetMask("TransparentFX", "Role")
    end
    self.m_skill_speed = self.aspectRatio/time
    self.m_skill_rect_warning_bstart = true
end

function SkillRectWarningView:show_area_update()
    if(self.m_skill_rect_warning_bstart) then
        if(self.m_skill_waring_curratio~=nil) then
            self.m_skill_waring_curratio= self.m_skill_waring_curratio+self.m_skill_speed*Time.deltaTime
            if(self.projector_move == nil) then
                self.projector_move = self.m_skill_rect_item.transform:Find("move_projector"):GetComponent(Projector)
            end
            self.projector_move.aspectRatio = self.m_skill_waring_curratio
            -- 吟唱完毕
            if(self.projector_move.aspectRatio>=self.projector.aspectRatio-self.projector.aspectRatio*0.075) then
                self.m_skill_waring_curratio = 0
                self.m_skill_rect_warning_bstart = nil
                local frame = self:getFrame()
                frame:destroySelf()
            end
        end
    end
end
return SkillRectWarningView
